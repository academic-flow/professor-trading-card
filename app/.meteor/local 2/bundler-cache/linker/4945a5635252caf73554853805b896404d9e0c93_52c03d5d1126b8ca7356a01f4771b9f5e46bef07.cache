[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nRoles = Package['alanning:roles'].Roles;\nCollection2 = Package['aldeed:collection2'].Collection2;\n_ = Package.underscore._;\nEJSON = Package.ejson.EJSON;\nKadira = Package['montiapm:agent'].Kadira;\nMonti = Package['montiapm:agent'].Monti;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"card\":{\"Card.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/card/Card.js                                                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Cards: () => Cards\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\n/**\n * The CardCollection. It encapsulates state and variable values for stuff.\n */\nclass CardCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'CardCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      name: String,\n      image: String,\n      description: String,\n      owner: String,\n      rarity: {\n        type: String,\n        allowedValues: ['Common', 'Uncommon', 'Mythic'],\n        defaultValue: 'Common'\n      }\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n}\n\n/**\n * The singleton instance of the CardCollection.\n * @type {CardCollection}\n */\nconst Cards = new CardCollection();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"friend\":{\"Friend.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/friend/Friend.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Friends: () => Friends\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\nclass FriendCollection {\n  constructor() {\n    this.name = 'FriendCollection';\n    this.collection = new Mongo.Collection(this.name);\n    this.schema = new SimpleSchema({\n      sender: String,\n      receiver: String,\n      status: Boolean\n    });\n    // adding a schema check for future document\n    this.collection.attachSchema(this.schema);\n    // define name for publications and subscriptions\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n}\nconst Friends = new FriendCollection();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"key\":{\"Key.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/key/Key.js                                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Keys: () => Keys\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\n/**\n * The CardCollection. It encapsulates state and variable values for stuff.\n */\nclass KeyCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'KeyCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      key: String,\n      status: {\n        type: Boolean,\n        defaultValue: false\n      }\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n}\n\n/**\n * The singleton instance of the KeyCollection.\n * @type {KeyCollection}\n */\nconst Keys = new KeyCollection();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"stuff\":{\"Stuff.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/stuff/Stuff.js                                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Stuffs: () => Stuffs\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\n/**\n * The StuffsCollection. It encapsulates state and variable values for stuff.\n */\nclass StuffsCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'StuffsCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      name: String,\n      quantity: Number,\n      owner: String,\n      condition: {\n        type: String,\n        allowedValues: ['excellent', 'good', 'fair', 'poor'],\n        defaultValue: 'good'\n      }\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n}\n\n/**\n * The singleton instance of the StuffsCollection.\n * @type {StuffsCollection}\n */\nconst Stuffs = new StuffsCollection();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"trade\":{\"Trade.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/api/trade/Trade.js                                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Trades: () => Trades\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n}, 1);\nclass TradeCollection {\n  constructor() {\n    this.name = 'TradeCollection';\n    this.collection = new Mongo.Collection(this.name);\n    this.schema = new SimpleSchema({\n      sender: String,\n      receiver: String,\n      card_wanted: String,\n      card_offer: String\n    });\n    // adding a schema check for future document\n    this.collection.attachSchema(this.schema);\n    // define name for publications and subscriptions\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n}\n\n/**\n * The singleton instance of the CardCollection.\n * @type {TradeCollection}\n */\n\nconst Trades = new TradeCollection();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"startup\":{\"server\":{\"Accounts.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/Accounts.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n}, 1);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n}, 2);\n//  check if client is interacting with server\nif (Meteor.isServer) {\n  Accounts.onCreateUser((options, user) => {\n    if (options.role) {\n      Roles.createRole(options.role, {\n        unlessExists: true\n      });\n      Roles.addUsersToRoles(user._id, options.role);\n    }\n    return user;\n  });\n}\n\n// When running app for first time, pass a settings file to set up a default user account.\nif (Meteor.users.find().count() === 0) {\n  if (Meteor.settings.defaultAccounts) {\n    console.log('Creating the default user(s)');\n    Meteor.settings.defaultAccounts.forEach(_ref => {\n      let {\n        email,\n        password,\n        role\n      } = _ref;\n      Accounts.createUser({\n        username: email,\n        email: email,\n        password: password,\n        role: role\n      });\n    });\n  } else {\n    console.log('Cannot initialize the database! Please invoke meteor with a settings file.');\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Methods.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/Methods.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n}, 1);\nlet Keys;\nmodule.link(\"../../api/key/Key\", {\n  Keys(v) {\n    Keys = v;\n  }\n}, 2);\nlet Friends;\nmodule.link(\"../../api/friend/Friend\", {\n  Friends(v) {\n    Friends = v;\n  }\n}, 3);\nlet Cards;\nmodule.link(\"../../api/card/Card\", {\n  Cards(v) {\n    Cards = v;\n  }\n}, 4);\nlet Trades;\nmodule.link(\"../../api/trade/Trade\", {\n  Trades(v) {\n    Trades = v;\n  }\n}, 5);\nMeteor.methods({\n  // key validate function check if the key exist in database and the status if everything good return admin for role\n  keyValidate: function (key) {\n    const keyData = Keys.collection.findOne({\n      key: key\n    });\n    if (!keyData) {\n      throw new Meteor.Error('key-not-found', 'Key not found in the database');\n    }\n\n    // Check the status of the key\n    if (keyData.status === false) {\n      const result = {\n        keyData,\n        role: 'admin'\n      };\n      return result;\n    }\n    return 'Account already exists for this key';\n  },\n  // Chaning status of the key from false to true prevent same key used again\n  keyChangeStatus: function (key) {\n    Keys.collection.update({\n      key: key\n    }, {\n      $set: {\n        status: true\n      }\n    });\n  },\n  // Add friend\n  addFriend: function (sender, receiver) {\n    const alreadyFriendC1 = Friends.collection.findOne({\n      $and: [{\n        sender: sender\n      }, {\n        receiver: receiver\n      }, {\n        status: true\n      }]\n    });\n    const alreadyFriendC2 = Friends.collection.findOne({\n      $and: [{\n        sender: receiver\n      }, {\n        receiver: sender\n      }, {\n        status: true\n      }]\n    });\n    if (alreadyFriendC1 || alreadyFriendC2) {\n      throw new Meteor.Error('already-friend', 'You are already friend');\n    }\n    const checkSenderExist = Friends.collection.findOne({\n      $and: [{\n        sender: sender\n      }, {\n        receiver: receiver\n      }, {\n        status: false\n      }]\n    });\n    if (checkSenderExist) {\n      throw new Meteor.Error('already-pending', 'You already send the friend request');\n    }\n    const checkReceiveExist = Friends.collection.findOne({\n      $and: [{\n        sender: receiver\n      }, {\n        receiver: sender\n      }, {\n        status: false\n      }]\n    });\n    if (checkReceiveExist) {\n      Friends.collection.update({\n        $and: [{\n          sender: receiver\n        }, {\n          receiver: sender\n        }, {\n          status: false\n        }]\n      }, {\n        $set: {\n          status: true\n        }\n      });\n      return \"Added \".concat(receiver);\n    }\n    Friends.collection.insert({\n      sender: sender,\n      receiver: receiver,\n      status: false\n    });\n    return \"Friend request sent to \".concat(receiver);\n  },\n  // Remove friend\n  removeFriend: function (data) {\n    const alreadyFriendC1 = Friends.collection.findOne({\n      $and: [{\n        sender: data.sender\n      }, {\n        receiver: data.receiver\n      }, {\n        status: true\n      }]\n    });\n    const alreadyFriendC2 = Friends.collection.findOne({\n      $and: [{\n        sender: data.receiver\n      }, {\n        receiver: data.sender\n      }, {\n        status: true\n      }]\n    });\n    if (alreadyFriendC1) {\n      Friends.collection.remove({\n        _id: alreadyFriendC1._id\n      });\n    }\n    if (alreadyFriendC2) {\n      Friends.collection.remove({\n        _id: alreadyFriendC2._id\n      });\n    }\n  },\n  confirmRequest: function (data) {\n    Friends.collection.update({\n      $and: [{\n        sender: data.sender\n      }, {\n        receiver: data.receiver\n      }]\n    }, {\n      $set: {\n        status: true\n      }\n    });\n  },\n  rejectRequest: function (data) {\n    Friends.collection.remove({\n      $and: [{\n        sender: data.sender\n      }, {\n        receiver: data.receiver\n      }, {\n        status: false\n      }]\n    });\n  },\n  gettingFriendCardCollection: function (data) {\n    const collection = Cards.collection.find({\n      owner: data\n    }).fetch();\n    return collection;\n  },\n  tradeCard: function (myCardID, selectedCardID, receiver, sender) {\n    const checkingTradeExistC1 = Trades.collection.findOne({\n      $and: [{\n        sender: sender\n      }, {\n        receiver: receiver\n      }, {\n        card_wanted: selectedCardID\n      }, {\n        card_offer: myCardID\n      }]\n    });\n    const checkingTradeExistC2 = Trades.collection.findOne({\n      $and: [{\n        sender: receiver\n      }, {\n        receiver: sender\n      }, {\n        card_wanted: myCardID\n      }, {\n        card_offer: selectedCardID\n      }]\n    });\n    if (checkingTradeExistC1) {\n      throw new Meteor.Error('already-pending', 'You already send asked for this trade');\n    }\n    if (checkingTradeExistC2) {\n      const friendStillHaveCard = Cards.collection.findOne({\n        $and: [{\n          _id: selectedCardID\n        }, {\n          owner: receiver\n        }]\n      });\n      const iStillHaveCard = Cards.collection.findOne({\n        $and: [{\n          _id: myCardID\n        }, {\n          owner: sender\n        }]\n      });\n      if (friendStillHaveCard && iStillHaveCard) {\n        Cards.collection.update({\n          $and: [{\n            _id: selectedCardID\n          }, {\n            owner: receiver\n          }]\n        }, {\n          $set: {\n            owner: sender\n          }\n        });\n        Cards.collection.update({\n          $and: [{\n            _id: myCardID\n          }, {\n            owner: sender\n          }]\n        }, {\n          $set: {\n            owner: receiver\n          }\n        });\n        Trades.collection.remove({\n          $and: [{\n            sender: receiver\n          }, {\n            receiver: sender\n          }, {\n            card_wanted: myCardID\n          }, {\n            card_offer: selectedCardID\n          }]\n        });\n        return 'success trade';\n      }\n      throw new Meteor.Error(\"can-not-trade', 'Cannot trade either you or your friend don't own the card anymore\");\n    }\n    Trades.collection.insert({\n      sender: sender,\n      receiver: receiver,\n      card_wanted: selectedCardID,\n      card_offer: myCardID\n    });\n    return 'initiate the trade';\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Mongo.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/Mongo.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Stuffs;\nmodule.link(\"../../api/stuff/Stuff.js\", {\n  Stuffs(v) {\n    Stuffs = v;\n  }\n}, 1);\nlet Cards;\nmodule.link(\"../../api/card/Card.js\", {\n  Cards(v) {\n    Cards = v;\n  }\n}, 2);\nlet Friends;\nmodule.link(\"../../api/friend/Friend.js\", {\n  Friends(v) {\n    Friends = v;\n  }\n}, 3);\nlet Keys;\nmodule.link(\"../../api/key/Key.js\", {\n  Keys(v) {\n    Keys = v;\n  }\n}, 4);\n/* eslint-disable no-console */\n\n// Initialize the database with a default data document.\nconst addData = data => {\n  console.log(\"  Adding: \".concat(data.name, \" (\").concat(data.owner, \")\"));\n  Stuffs.collection.insert(data);\n};\n\n// adding Friend data\nconst addFriendData = data => {\n  console.log(' Adding friend data');\n  Friends.collection.insert(data);\n};\n\n// adding card data\nconst addCardData = data => {\n  console.log(\"  Adding: \".concat(data.name, \" (\").concat(data.owner, \")\"));\n  Cards.collection.insert(data);\n};\n\n// adding key data\nconst addKeyData = data => {\n  console.log(\"  Adding: \".concat(data.key, \" is used: (\").concat(data.status, \")\"));\n  Keys.collection.insert(data);\n};\n\n// Initialize the StuffsCollection if empty.\nif (Stuffs.collection.find().count() === 0) {\n  if (Meteor.settings.defaultData) {\n    console.log('Creating default data.');\n    Meteor.settings.defaultData.forEach(data => addData(data));\n  }\n}\n\n// check if db is empty for cards then add cards\nif (Cards.collection.find().count() === 0) {\n  if (Meteor.settings.cardData) {\n    console.log('Creating card data');\n    Meteor.settings.cardData.forEach(data => addCardData(data));\n  }\n}\n// check if db is empty for keys then add keys\nif (Keys.collection.find().count() === 0) {\n  if (Meteor.settings.keyData) {\n    console.log('Creating key data.');\n    Meteor.settings.keyData.forEach(data => addKeyData(data));\n  }\n}\nif (Friends.collection.find().count() === 0) {\n  if (Meteor.settings.friendData) {\n    console.log('Creating key data.');\n    Meteor.settings.friendData.forEach(data => addFriendData(data));\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Publications.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// imports/startup/server/Publications.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n}, 1);\nlet Cards;\nmodule.link(\"../../api/card/Card\", {\n  Cards(v) {\n    Cards = v;\n  }\n}, 2);\nlet Friends;\nmodule.link(\"../../api/friend/Friend\", {\n  Friends(v) {\n    Friends = v;\n  }\n}, 3);\nlet Trades;\nmodule.link(\"../../api/trade/Trade\", {\n  Trades(v) {\n    Trades = v;\n  }\n}, 4);\n// User-level publication.\n// If logged in, then publish documents owned by this user. Otherwise, publish nothing.\nMeteor.publish(Cards.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Cards.collection.find({\n      owner: username\n    });\n  }\n  return this.ready();\n});\nMeteor.publish(Trades.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Trades.collection.find({\n      receiver: username\n    });\n  }\n  return this.ready();\n});\nMeteor.publish(Friends.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Friends.collection.find({\n      $or: [{\n        receiver: username\n      }, {\n        sender: username\n      }]\n    });\n  }\n  return this.ready();\n});\n\n// Admin-level publication.\n// If logged in and with admin role, then publish all documents from all users. Otherwise, publish nothing.\nMeteor.publish(Cards.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Cards.collection.find();\n  }\n  return this.ready();\n});\nMeteor.publish(Friends.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Friends.collection.find();\n  }\n  return this.ready();\n});\nMeteor.publish(Trades.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Trades.collection.find();\n  }\n  return this.ready();\n});\n\n// planning:roles publication\n// Recommended code to publish roles for each user.\nMeteor.publish(null, function () {\n  if (this.userId) {\n    return Meteor.roleAssignment.find({\n      'user._id': this.userId\n    });\n  }\n  return this.ready();\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// server/main.js                                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.link(\"/imports/startup/server/Accounts\");\nmodule.link(\"/imports/startup/server/Publications\");\nmodule.link(\"/imports/startup/server/Mongo\");\nmodule.link(\"/imports/startup/server/Methods\");\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".mjs\",\n    \".jsx\"\n  ]\n});\n\nrequire(\"/server/main.js\");","hash":"58a40f38e5fb0b207236693151f0ee3cf58ccdef","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/card/Card.js","imports/api/friend/Friend.js","imports/api/key/Key.js","imports/api/stuff/Stuff.js","imports/api/trade/Trade.js","imports/startup/server/Accounts.js","imports/startup/server/Methods.js","imports/startup/server/Mongo.js","imports/startup/server/Publications.js","server/main.js"],"names":["module","export","Cards","Mongo","link","v","SimpleSchema","default","CardCollection","constructor","name","collection","Collection","schema","String","image","description","owner","rarity","type","allowedValues","defaultValue","attachSchema","userPublicationName","concat","adminPublicationName","Friends","FriendCollection","sender","receiver","status","Boolean","Keys","KeyCollection","key","Stuffs","StuffsCollection","quantity","Number","condition","Trades","TradeCollection","card_wanted","card_offer","Meteor","Accounts","Roles","isServer","onCreateUser","options","user","role","createRole","unlessExists","addUsersToRoles","_id","users","find","count","settings","defaultAccounts","console","log","forEach","_ref","email","password","createUser","username","methods","keyValidate","keyData","findOne","Error","result","keyChangeStatus","update","$set","addFriend","alreadyFriendC1","$and","alreadyFriendC2","checkSenderExist","checkReceiveExist","insert","removeFriend","data","remove","confirmRequest","rejectRequest","gettingFriendCardCollection","fetch","tradeCard","myCardID","selectedCardID","checkingTradeExistC1","checkingTradeExistC2","friendStillHaveCard","iStillHaveCard","addData","addFriendData","addCardData","addKeyData","defaultData","cardData","friendData","publish","userId","ready","$or","userIsInRole","roleAssignment"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n/**\n * The CardCollection. It encapsulates state and variable values for stuff.\n */\nclass CardCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'CardCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      name: String,\n      image: String,\n      description: String,\n      owner: String,\n      rarity: {\n        type: String,\n        allowedValues: ['Common', 'Uncommon', 'Mythic'],\n        defaultValue: 'Common',\n      },\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = `${this.name}.publication.user`;\n    this.adminPublicationName = `${this.name}.publication.admin`;\n  }\n}\n\n/**\n * The singleton instance of the CardCollection.\n * @type {CardCollection}\n */\nexport const Cards = new CardCollection();\n","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nclass FriendCollection {\n  constructor() {\n    this.name = 'FriendCollection';\n    this.collection = new Mongo.Collection(this.name);\n    this.schema = new SimpleSchema({\n      sender: String,\n      receiver: String,\n      status: Boolean,\n\n    });\n    // adding a schema check for future document\n    this.collection.attachSchema(this.schema);\n    // define name for publications and subscriptions\n    this.userPublicationName = `${this.name}.publication.user`;\n    this.adminPublicationName = `${this.name}.publication.admin`;\n  }\n}\n\nexport const Friends = new FriendCollection();\n","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n/**\n * The CardCollection. It encapsulates state and variable values for stuff.\n */\nclass KeyCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'KeyCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      key: String,\n      status: {\n        type: Boolean,\n        defaultValue: false,\n      },\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = `${this.name}.publication.user`;\n    this.adminPublicationName = `${this.name}.publication.admin`;\n  }\n}\n\n/**\n * The singleton instance of the KeyCollection.\n * @type {KeyCollection}\n */\nexport const Keys = new KeyCollection();\n","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\n/**\n * The StuffsCollection. It encapsulates state and variable values for stuff.\n */\nclass StuffsCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'StuffsCollection';\n    // Define the Mongo collection.\n    this.collection = new Mongo.Collection(this.name);\n    // Define the structure of each document in the collection.\n    this.schema = new SimpleSchema({\n      name: String,\n      quantity: Number,\n      owner: String,\n      condition: {\n        type: String,\n        allowedValues: ['excellent', 'good', 'fair', 'poor'],\n        defaultValue: 'good',\n      },\n    });\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n    this.collection.attachSchema(this.schema);\n    // Define names for publications and subscriptions\n    this.userPublicationName = `${this.name}.publication.user`;\n    this.adminPublicationName = `${this.name}.publication.admin`;\n  }\n}\n\n/**\n * The singleton instance of the StuffsCollection.\n * @type {StuffsCollection}\n */\nexport const Stuffs = new StuffsCollection();\n","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nclass TradeCollection {\n  constructor() {\n    this.name = 'TradeCollection';\n    this.collection = new Mongo.Collection(this.name);\n    this.schema = new SimpleSchema({\n      sender: String,\n      receiver: String,\n      card_wanted: String,\n      card_offer: String,\n\n    });\n    // adding a schema check for future document\n    this.collection.attachSchema(this.schema);\n    // define name for publications and subscriptions\n    this.userPublicationName = `${this.name}.publication.user`;\n    this.adminPublicationName = `${this.name}.publication.admin`;\n  }\n}\n\n/**\n * The singleton instance of the CardCollection.\n * @type {TradeCollection}\n */\n\nexport const Trades = new TradeCollection();\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Roles } from 'meteor/alanning:roles';\n\n//  check if client is interacting with server\nif (Meteor.isServer) {\n  Accounts.onCreateUser((options, user) => {\n    if (options.role) {\n      Roles.createRole(options.role, { unlessExists: true });\n      Roles.addUsersToRoles(user._id, options.role);\n    }\n    return user;\n  });\n}\n\n// When running app for first time, pass a settings file to set up a default user account.\nif (Meteor.users.find().count() === 0) {\n  if (Meteor.settings.defaultAccounts) {\n    console.log('Creating the default user(s)');\n    Meteor.settings.defaultAccounts.forEach(({ email, password, role }) => {\n      Accounts.createUser({\n        username: email,\n        email: email,\n        password: password,\n        role: role,\n      });\n    });\n  } else {\n    console.log('Cannot initialize the database! Please invoke meteor with a settings file.');\n  }\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Keys } from '../../api/key/Key';\nimport { Friends } from '../../api/friend/Friend';\nimport { Cards } from '../../api/card/Card';\nimport { Trades } from '../../api/trade/Trade';\n\nMeteor.methods({\n  // key validate function check if the key exist in database and the status if everything good return admin for role\n  keyValidate: function (key) {\n    const keyData = Keys.collection.findOne({ key: key });\n\n    if (!keyData) {\n      throw new Meteor.Error('key-not-found', 'Key not found in the database');\n    }\n\n    // Check the status of the key\n    if (keyData.status === false) {\n      const result = {\n        keyData,\n        role: 'admin',\n      };\n      return result;\n    }\n    return 'Account already exists for this key';\n\n  },\n  // Chaning status of the key from false to true prevent same key used again\n  keyChangeStatus: function (key) {\n    Keys.collection.update({ key: key }, { $set: { status: true } });\n  },\n\n  // Add friend\n  addFriend: function (sender, receiver) {\n    const alreadyFriendC1 = Friends.collection.findOne({ $and: [{ sender: sender }, { receiver: receiver }, { status: true }] });\n    const alreadyFriendC2 = Friends.collection.findOne({ $and: [{ sender: receiver }, { receiver: sender }, { status: true }] });\n    if (alreadyFriendC1 || alreadyFriendC2) {\n      throw new Meteor.Error('already-friend', 'You are already friend');\n    }\n\n    const checkSenderExist = Friends.collection.findOne({ $and: [{ sender: sender }, { receiver: receiver }, { status: false }] });\n    if (checkSenderExist) {\n      throw new Meteor.Error('already-pending', 'You already send the friend request');\n    }\n\n    const checkReceiveExist = Friends.collection.findOne({ $and: [{ sender: receiver }, { receiver: sender }, { status: false }] });\n    if (checkReceiveExist) {\n      Friends.collection.update(\n        { $and: [{ sender: receiver }, { receiver: sender }, { status: false }] },\n        { $set: { status: true } },\n      );\n      return `Added ${receiver}`;\n    }\n    Friends.collection.insert({ sender: sender, receiver: receiver, status: false });\n    return `Friend request sent to ${receiver}`;\n\n  },\n  // Remove friend\n  removeFriend: function (data) {\n    const alreadyFriendC1 = Friends.collection.findOne({ $and: [{ sender: data.sender }, { receiver: data.receiver }, { status: true }] });\n    const alreadyFriendC2 = Friends.collection.findOne({ $and: [{ sender: data.receiver }, { receiver: data.sender }, { status: true }] });\n    if (alreadyFriendC1) {\n      Friends.collection.remove({ _id: alreadyFriendC1._id });\n    }\n    if (alreadyFriendC2) {\n      Friends.collection.remove({ _id: alreadyFriendC2._id });\n    }\n  },\n  confirmRequest: function (data) {\n    Friends.collection.update(\n      { $and: [{ sender: data.sender }, { receiver: data.receiver }] },\n      { $set: { status: true } },\n    );\n  },\n  rejectRequest: function (data) {\n    Friends.collection.remove({ $and: [{ sender: data.sender }, { receiver: data.receiver }, { status: false }] });\n  },\n  gettingFriendCardCollection: function (data) {\n    const collection = Cards.collection.find({ owner: data }).fetch();\n    return collection;\n  },\n  tradeCard: function (myCardID, selectedCardID, receiver, sender) {\n    const checkingTradeExistC1 = Trades.collection.findOne({ $and: [{ sender: sender }, { receiver: receiver }, { card_wanted: selectedCardID }, { card_offer: myCardID }] });\n    const checkingTradeExistC2 = Trades.collection.findOne({ $and: [{ sender: receiver }, { receiver: sender }, { card_wanted: myCardID }, { card_offer: selectedCardID }] });\n    if (checkingTradeExistC1) {\n      throw new Meteor.Error('already-pending', 'You already send asked for this trade');\n    }\n    if (checkingTradeExistC2) {\n      const friendStillHaveCard = Cards.collection.findOne({ $and: [{ _id: selectedCardID }, { owner: receiver }] });\n      const iStillHaveCard = Cards.collection.findOne({ $and: [{ _id: myCardID }, { owner: sender }] });\n      if (friendStillHaveCard && iStillHaveCard) {\n        Cards.collection.update(\n          { $and: [{ _id: selectedCardID }, { owner: receiver }] },\n          { $set: { owner: sender } },\n        );\n        Cards.collection.update(\n          { $and: [{ _id: myCardID }, { owner: sender }] },\n          { $set: { owner: receiver } },\n        );\n        Trades.collection.remove({ $and: [{ sender: receiver }, { receiver: sender }, { card_wanted: myCardID }, { card_offer: selectedCardID }] });\n\n        return 'success trade';\n      }\n      throw new Meteor.Error(\"can-not-trade', 'Cannot trade either you or your friend don't own the card anymore\");\n\n    }\n    Trades.collection.insert({ sender: sender, receiver: receiver, card_wanted: selectedCardID, card_offer: myCardID });\n    return 'initiate the trade';\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Stuffs } from '../../api/stuff/Stuff.js';\nimport { Cards } from '../../api/card/Card.js';\nimport { Friends } from '../../api/friend/Friend.js';\n\nimport { Keys } from '../../api/key/Key.js';\n\n/* eslint-disable no-console */\n\n// Initialize the database with a default data document.\nconst addData = (data) => {\n  console.log(`  Adding: ${data.name} (${data.owner})`);\n  Stuffs.collection.insert(data);\n};\n\n// adding Friend data\nconst addFriendData = (data) => {\n  console.log(' Adding friend data');\n  Friends.collection.insert(data);\n};\n\n// adding card data\nconst addCardData = (data) => {\n  console.log(`  Adding: ${data.name} (${data.owner})`);\n  Cards.collection.insert(data);\n};\n\n// adding key data\nconst addKeyData = (data) => {\n  console.log(`  Adding: ${data.key} is used: (${data.status})`);\n  Keys.collection.insert(data);\n};\n\n// Initialize the StuffsCollection if empty.\nif (Stuffs.collection.find().count() === 0) {\n  if (Meteor.settings.defaultData) {\n    console.log('Creating default data.');\n    Meteor.settings.defaultData.forEach((data) => addData(data));\n  }\n}\n\n// check if db is empty for cards then add cards\nif (Cards.collection.find().count() === 0) {\n  if (Meteor.settings.cardData) {\n    console.log('Creating card data');\n    Meteor.settings.cardData.forEach((data) => addCardData(data));\n  }\n}\n// check if db is empty for keys then add keys\nif (Keys.collection.find().count() === 0) {\n  if (Meteor.settings.keyData) {\n    console.log('Creating key data.');\n    Meteor.settings.keyData.forEach((data) => addKeyData(data));\n  }\n}\n\nif (Friends.collection.find().count() === 0) {\n  if (Meteor.settings.friendData) {\n    console.log('Creating key data.');\n    Meteor.settings.friendData.forEach((data) => addFriendData(data));\n  }\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Cards } from '../../api/card/Card';\nimport { Friends } from '../../api/friend/Friend';\nimport { Trades } from '../../api/trade/Trade';\n// User-level publication.\n// If logged in, then publish documents owned by this user. Otherwise, publish nothing.\nMeteor.publish(Cards.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Cards.collection.find({ owner: username });\n  }\n  return this.ready();\n});\n\nMeteor.publish(Trades.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Trades.collection.find({ receiver: username });\n  }\n  return this.ready();\n});\n\nMeteor.publish(Friends.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Friends.collection.find({ $or: [{ receiver: username }, { sender: username }] });\n  }\n  return this.ready();\n});\n\n// Admin-level publication.\n// If logged in and with admin role, then publish all documents from all users. Otherwise, publish nothing.\nMeteor.publish(Cards.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Cards.collection.find();\n  }\n  return this.ready();\n});\n\nMeteor.publish(Friends.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Friends.collection.find();\n  }\n  return this.ready();\n});\n\nMeteor.publish(Trades.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Trades.collection.find();\n  }\n  return this.ready();\n});\n\n\n// planning:roles publication\n// Recommended code to publish roles for each user.\nMeteor.publish(null, function () {\n  if (this.userId) {\n    return Meteor.roleAssignment.find({ 'user._id': this.userId });\n  }\n  return this.ready();\n});\n","import '/imports/startup/server/Accounts';\nimport '/imports/startup/server/Publications';\nimport '/imports/startup/server/Mongo';\nimport '/imports/startup/server/Methods';\n"]}}]