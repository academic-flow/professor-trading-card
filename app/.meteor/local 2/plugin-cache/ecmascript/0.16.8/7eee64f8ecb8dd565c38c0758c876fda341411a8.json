{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-base/accounts_client.js","filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_client.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/phatca/Documents/GitHub/professor-trading-card/app","root":"/Users/phatca/Documents/GitHub/professor-trading-card/app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_client.js"}},"code":"let _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  AccountsClient: () => AccountsClient,\n  AccountsTest: () => AccountsTest\n});\nlet AccountsCommon;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n}, 0);\nclass AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n    this._loginServicesHandle = this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    this._loginCallbacksCalled = false;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" has been defined already\"));\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n    for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      funcArgs[_key - 1] = arguments[_key];\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      this._loginCallbacksCalled = false;\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply('getNewToken', [], {\n      wait: true\n    }, (err, result) => {\n      if (!err) {\n        this._storeLoginToken(this.userId(), result.token, result.tokenExpires);\n      }\n    });\n    this.connection.apply('removeOtherTokens', [], {\n      wait: true\n    }, err => callback && callback(err));\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = _objectSpread({\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false\n    }, options);\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f]) options[f] = () => null;\n    });\n    let called;\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    const loginCallbacks = _ref => {\n      let {\n        error,\n        loginDetails\n      } = _ref;\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.forEach(callback => {\n            callback(loginDetails);\n            return true;\n          });\n          this._loginCallbacksCalled = true;\n        } else {\n          this._loginCallbacksCalled = false;\n          this._onLoginFailureHook.forEach(callback => {\n            callback({\n              error\n            });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    };\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{\n                resume: result.token\n              }],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({\n                  error,\n                  loginDetails\n                });\n              }\n            });\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected) return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\"No result from call to \".concat(options.methodName));\n        loginCallbacks({\n          error\n        });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({\n          error: e\n        });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({\n        loginDetails: result\n      });\n    };\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(options.methodName, options.methodArguments, {\n      wait: true,\n      onResultReceived: onResultReceived\n    }, loggedInAndDataReadyCallback);\n  }\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  }\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  }\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug('Ignoring unexpected duplicate page load login attempt info');\n      return;\n    }\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this._loginCallbacksCalled) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({\n        type: 'resume'\n      }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  }\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  }\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  }\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  }\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  }\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  }\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  }\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  }\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  }\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = \":\".concat(this.connection._stream.rawUrl);\n      if (rootUrlPathPrefix) {\n        namespace += \":\".concat(rootUrlPathPrefix);\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(\"Error logging in with token: \".concat(err));\n            this.makeClientLoggedOut();\n          }\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{\n              resume: token\n            }]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  }\n  _pollStoredLoginToken() {\n    if (!this._autoLoginEnabled) {\n      return;\n    }\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, err => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  }\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n\n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n\n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  }\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  }\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  }\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  }\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  }\n}\n;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const {\n    Template\n  } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());\n}\nconst defaultSuccessHandler = function (token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n    const tokenRegex = new RegExp(\"^\\\\#\\\\/\".concat(urlPart, \"\\\\/(.*)$\"));\n    const match = hash.match(tokenRegex);\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n};\n\n// Export for testing\nconst AccountsTest = {\n  attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)\n};","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","AccountsClient","AccountsTest","AccountsCommon","constructor","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","_initLocalStorage","_loginFuncs","_loginCallbacksCalled","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","concat","callLoginFunction","_len","arguments","length","funcArgs","Array","_key","apply","applyLoginFunction","logout","callback","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","callLoginMethod","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","_ref","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","_userId","_onLogoutHook","each","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","Meteor","_debug","_startupCallback","setTimeout","type","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Accounts","Package","blaze","Template","Blaze","registerHelper","user","urlPart","startup","accounts","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call"],"sources":["packages/accounts-base/accounts_client.js"],"sourcesContent":["import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    this._loginCallbacksCalled = false;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      this._loginCallbacksCalled = false;\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      (err, result) => {\n        if (! err) {\n          this._storeLoginToken(\n            this.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    this.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      err => callback && callback(err)\n    );\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = {\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false,\n      ...options,\n    };\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f])\n        options[f] = () => null;\n    });\n\n    let called;\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    const loginCallbacks = ({ error, loginDetails }) => {\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.forEach(callback => {\n            callback(loginDetails);\n            return true;\n          });\n          this._loginCallbacksCalled = true;\n        } else {\n          this._loginCallbacksCalled = false;\n          this._onLoginFailureHook.forEach(callback => {\n            callback({ error });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    };\n\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires)\n            result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{resume: result.token}],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({ error, loginDetails });\n              }});\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected)\n        return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\n          `No result from call to ${options.methodName}`\n        );\n        loginCallbacks({ error });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({ error: e });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({ loginDetails: result });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(\n      options.methodName,\n      options.methodArguments,\n      { wait: true, onResultReceived: onResultReceived },\n      loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  };\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  };\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug(\n        'Ignoring unexpected duplicate page load login attempt info'\n      );\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this._loginCallbacksCalled) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({ type: 'resume' }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  };\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  };\n\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  };\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (! tokenExpires)\n      tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  };\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  };\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  };\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  };\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  };\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  };\n\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = `:${this.connection._stream.rawUrl}`;\n      if (rootUrlPathPrefix) {\n        namespace += `:${rootUrlPathPrefix}`;\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(`Error logging in with token: ${err}`);\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{resume: token}]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  };\n\n  _pollStoredLoginToken() {\n    if (! this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, (err) => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  };\n\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n\n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n\n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  };\n\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  };\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  };\n\n};\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) =>\n  Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const { Template } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper(\n    'loggingInOrOut',\n    () => Meteor.loggingIn() || Meteor.loggingOut()\n  );\n}\n\nconst defaultSuccessHandler = function(token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n\n    const tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\n// Export for testing\nexport const AccountsTest = {\n  attemptToMatchHash: (hash, success) =>\n    attemptToMatchHash(Accounts, hash, success),\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"7eee64f8ecb8dd565c38c0758c876fda341411a8"}
