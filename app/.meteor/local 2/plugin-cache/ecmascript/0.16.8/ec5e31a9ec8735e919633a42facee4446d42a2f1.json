{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/hijack/wrap_observers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_observers.js","filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/hijack/wrap_observers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/phatca/Documents/GitHub/professor-trading-card/app","root":"/Users/phatca/Documents/GitHub/professor-trading-card/app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/hijack/wrap_observers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/hijack/wrap_observers.js"}},"code":"module.export({\n  wrapOplogObserveDriver: () => wrapOplogObserveDriver,\n  wrapPollingObserveDriver: () => wrapPollingObserveDriver,\n  wrapMultiplexer: () => wrapMultiplexer,\n  wrapForCountingObservers: () => wrapForCountingObservers\n});\nlet _;\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n}, 0);\nfunction wrapOplogObserveDriver(proto) {\n  // Track the polled documents. This is reflected to the RAM size and\n  // for the CPU usage directly\n  let originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function (newResults, newBuffer) {\n    let coll = this._cursorDescription.collectionName;\n    let query = this._cursorDescription.selector;\n    let opts = this._cursorDescription.options;\n    const docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    let count = newResults.size() + newBuffer.size();\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'polledFetches', docSize * count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize * count\n      };\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n  let originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n  let originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function (fnName) {\n    let originalFn = proto[fnName];\n    proto[fnName] = function (a, b, c) {\n      if (this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n        if (fnName === '_addPublished') {\n          const coll = this._cursorDescription.collectionName;\n          const query = this._cursorDescription.selector;\n          const opts = this._cursorDescription.options;\n          const docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'liveFetches', docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if (!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n        this._liveUpdatesCounts._initialAdds++;\n        if (fnName === '_addPublished') {\n          if (!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n          if (!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n          const coll = this._cursorDescription.collectionName;\n          const query = this._cursorDescription.selector;\n          const opts = this._cursorDescription.options;\n          const docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          this._docSize.initialFetches += docSize;\n        }\n      }\n      return originalFn.call(this, a, b, c);\n    };\n  });\n  let originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n    return originalStop.call(this);\n  };\n}\nfunction wrapPollingObserveDriver(proto) {\n  let originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function () {\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    let count = 0;\n    let docSize = 0;\n    if (this._results && this._results.size) {\n      count = this._results.size() || 0;\n      let coll = this._cursorDescription.collectionName;\n      let query = this._cursorDescription.selector;\n      let opts = this._cursorDescription.options;\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map) * count;\n    }\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'polledFetches', docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n  let originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n    return originalStop.call(this);\n  };\n}\nfunction wrapMultiplexer(proto) {\n  let originalInitalAdd = proto.addHandleAndSendInitialAdds;\n  proto.addHandleAndSendInitialAdds = function (handle) {\n    if (!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n    if (!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n}\nfunction wrapForCountingObservers() {\n  // to count observers\n  let mongoConnectionProto = MeteorX.MongoConnection.prototype;\n  let originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function (cursorDescription, ordered, callbacks) {\n    let ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    let kadiraInfo = Kadira._getInfo(null, true);\n    if (kadiraInfo && ret._multiplexer) {\n      if (!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if (kadiraInfo.trace.type === 'sub') {\n          let ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: new Date().getTime()\n          };\n          let observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, 'polledFetches', observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function (count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function (count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n    return ret;\n  };\n}","map":{"version":3,"names":["module","export","wrapOplogObserveDriver","wrapPollingObserveDriver","wrapMultiplexer","wrapForCountingObservers","_","link","v","proto","originalPublishNewResults","_publishNewResults","newResults","newBuffer","coll","_cursorDescription","collectionName","query","selector","opts","options","docSize","Kadira","docSzCache","getSize","count","size","_ownerInfo","models","pubsub","trackPolledDocuments","trackDocSize","name","_polledDocuments","_docSize","polledFetches","call","originalHandleOplogEntryQuerying","_handleOplogEntryQuerying","op","trackDocumentChanges","originalHandleOplogEntrySteadyOrFetching","_handleOplogEntrySteadyOrFetching","forEach","fnName","originalFn","a","b","c","trackLiveUpdates","_liveUpdatesCounts","_initialAdds","initialFetches","originalStop","stop","type","EventBus","emit","trackDeletedObserver","originalPollMongo","_pollMongo","_results","_map","_polledDocSize","originalInitalAdd","addHandleAndSendInitialAdds","handle","_firstInitialAddTime","Date","now","_wasMultiplexerReady","_ready","_queueLength","_queue","_taskHandles","length","_elapsedPollingTime","mongoConnectionProto","MeteorX","MongoConnection","prototype","originalObserveChanges","_observeChanges","cursorDescription","ordered","callbacks","ret","kadiraInfo","_getInfo","_multiplexer","__kadiraTracked","trace","incrementHandleCount","ownerInfo","startTime","getTime","observerDriver","_observeDriver","trackCreatedObserver","each","key"],"sources":["packages/montiapm:agent/lib/hijack/wrap_observers.js"],"sourcesContent":["import { _ } from 'meteor/underscore';\n\nexport function wrapOplogObserveDriver (proto) {\n  // Track the polled documents. This is reflected to the RAM size and\n  // for the CPU usage directly\n  let originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function (newResults, newBuffer) {\n    let coll = this._cursorDescription.collectionName;\n    let query = this._cursorDescription.selector;\n    let opts = this._cursorDescription.options;\n    const docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    let count = newResults.size() + newBuffer.size();\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'polledFetches', docSize * count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize * count\n      };\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  let originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  let originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function (fnName) {\n    let originalFn = proto[fnName];\n    proto[fnName] = function (a, b, c) {\n      if (this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if (fnName === '_addPublished') {\n          const coll = this._cursorDescription.collectionName;\n          const query = this._cursorDescription.selector;\n          const opts = this._cursorDescription.options;\n          const docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'liveFetches', docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if (!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if (fnName === '_addPublished') {\n          if (!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if (!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          const coll = this._cursorDescription.collectionName;\n          const query = this._cursorDescription.selector;\n          const opts = this._cursorDescription.options;\n          const docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n\n  let originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n}\n\nexport function wrapPollingObserveDriver (proto) {\n  let originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function () {\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    let count = 0;\n    let docSize = 0;\n\n    if (this._results && this._results.size) {\n      count = this._results.size() || 0;\n\n      let coll = this._cursorDescription.collectionName;\n      let query = this._cursorDescription.selector;\n      let opts = this._cursorDescription.options;\n\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map) * count;\n    }\n\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, 'polledFetches', docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  let originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n}\n\nexport function wrapMultiplexer (proto) {\n  let originalInitalAdd = proto.addHandleAndSendInitialAdds;\n  proto.addHandleAndSendInitialAdds = function (handle) {\n    if (!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if (!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n}\n\nexport function wrapForCountingObservers () {\n  // to count observers\n  let mongoConnectionProto = MeteorX.MongoConnection.prototype;\n  let originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function (cursorDescription, ordered, callbacks) {\n    let ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    let kadiraInfo = Kadira._getInfo(null, true);\n\n    if (kadiraInfo && ret._multiplexer) {\n      if (!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if (kadiraInfo.trace.type === 'sub') {\n          let ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: new Date().getTime()\n          };\n\n          let observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, 'polledFetches', observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function (count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function (count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  };\n}\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"ec5e31a9ec8735e919633a42facee4446d42a2f1"}
