[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Collection2;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:collection2\":{\"collection2.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aldeed_collection2/collection2.js                                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nlet EventEmitter;\nmodule.link(\"meteor/raix:eventemitter\", {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 2);\nlet checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n}, 3);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n}, 4);\nlet isEmpty;\nmodule.link(\"lodash.isempty\", {\n  default(v) {\n    isEmpty = v;\n  }\n}, 5);\nlet isEqual;\nmodule.link(\"lodash.isequal\", {\n  default(v) {\n    isEqual = v;\n  }\n}, 6);\nlet isObject;\nmodule.link(\"lodash.isobject\", {\n  default(v) {\n    isObject = v;\n  }\n}, 7);\nlet flattenSelector;\nmodule.link(\"./lib\", {\n  flattenSelector(v) {\n    flattenSelector = v;\n  }\n}, 8);\ncheckNpmVersions({\n  'simpl-schema': '>=0.0.0'\n}, 'aldeed:collection2');\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\nCollection2.cleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n  function attachTo(obj) {\n    // we need an array to hold multiple schemas\n    // position 0 is reserved for the \"base\" schema\n    obj._c2 = obj._c2 || {};\n    obj._c2._simpleSchemas = obj._c2._simpleSchemas || [null];\n    if (typeof options.selector === \"object\") {\n      // Selector Schemas\n\n      // Extend selector schema with base schema\n      const baseSchema = obj._c2._simpleSchemas[0];\n      if (baseSchema) {\n        ss = extendSchema(baseSchema.schema, ss);\n      }\n\n      // Index of existing schema with identical selector\n      let schemaIndex;\n\n      // Loop through existing schemas with selectors,\n      for (schemaIndex = obj._c2._simpleSchemas.length - 1; 0 < schemaIndex; schemaIndex--) {\n        const schema = obj._c2._simpleSchemas[schemaIndex];\n        if (schema && isEqual(schema.selector, options.selector)) break;\n      }\n      if (schemaIndex <= 0) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: ss,\n          selector: options.selector\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace === true) {\n          // Replace existing selector schema with new selector schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        } else {\n          // Extend existing selector schema with new selector schema.\n          obj._c2._simpleSchemas[schemaIndex].schema = extendSchema(obj._c2._simpleSchemas[schemaIndex].schema, ss);\n        }\n      }\n    } else {\n      // Base Schema\n      if (options.replace === true) {\n        // Replace base schema and delete all other schemas\n        obj._c2._simpleSchemas = [{\n          schema: ss,\n          selector: options.selector\n        }];\n      } else {\n        // Set base schema if not yet set\n        if (!obj._c2._simpleSchemas[0]) {\n          return obj._c2._simpleSchemas[0] = {\n            schema: ss,\n            selector: undefined\n          };\n        }\n        // Extend base schema and therefore extend all schemas\n        obj._c2._simpleSchemas.forEach((schema, index) => {\n          if (obj._c2._simpleSchemas[index]) {\n            obj._c2._simpleSchemas[index].schema = extendSchema(obj._c2._simpleSchemas[index].schema, ss);\n          }\n        });\n      }\n    }\n  }\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n  defineDeny(this, options);\n  keepInsecure(this);\n  Collection2.emit('schema.attached', this, ss, options);\n};\n[Mongo.Collection, LocalCollection].forEach(obj => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n    const schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      let schema, selector, target;\n      // Position 0 reserved for base schema\n      for (var i = 1; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) {\n          // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n      if (schemas[0]) {\n        return schemas[0].schema;\n      } else {\n        throw new Error(\"No default schema\");\n      }\n    }\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach(methodName => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let options = methodName === \"insert\" ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n    if (this._c2 && options.bypassCollection2 !== true) {\n      let userId = null;\n      try {\n        // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n      args = doValidate(this, methodName, args, Meteor.isServer || this._connection === null,\n      // getAutoValues\n      userId, Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  let doc, callback, error, options, isUpsert, selector, last, hasCallback;\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n  const validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  last = args.length - 1;\n  hasCallback = typeof args[last] === 'function';\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = type === \"update\" && options.upsert === true;\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  let schema = collection.simpleSchema(doc, options, selector);\n  const isLocalCollection = collection._connection === null;\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Process pick/omit options if they are present\n  const picks = Array.isArray(options.pick) ? options.pick : null;\n  const omits = Array.isArray(options.omit) ? options.omit : null;\n  if (picks && omits) {\n    // Pick and omit cannot both be present in the options\n    throw new Error('pick and omit options are mutually exclusive');\n  } else if (picks) {\n    schema = schema.pick(...picks);\n  } else if (omits) {\n    schema = schema.omit(...omits);\n  }\n\n  // Determine validation context\n  let validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function (err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n  const schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  let docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  let cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n  const autoValueContext = {\n    isInsert: type === \"insert\",\n    isUpdate: type === \"update\" && options.upsert !== true,\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n  const extendAutoValueContext = _objectSpread(_objectSpread(_objectSpread({}, (schema._cleanOptions || {}).extendAutoValueContext || {}), autoValueContext), options.extendAutoValueContext);\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    mutate: true,\n    // Clean the doc/modifier in place\n    isModifier: type !== \"insert\"\n  }, Collection2.cleanOptions), schema._cleanOptions || {}), cleanOptionsForThisOperation), {}, {\n    extendAutoValueContext,\n    // This was extended separately above\n    getAutoValues // Force this override\n  }));\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  let docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation.\n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    const set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: type !== \"insert\",\n      mutate: true,\n      // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' + (type === 'update' ? 'modifier' : 'object') + ' is now empty');\n  }\n\n  // Validate doc\n  let isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: type === \"update\" || type === \"upsert\",\n      upsert: isUpsert,\n      extendedCustomContext: _objectSpread({\n        isInsert: type === \"insert\",\n        isUpdate: type === \"update\" && options.upsert !== true,\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n    return args;\n  } else {\n    var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n    error = getErrorObject(validationContext, (_Meteor$settings = Meteor.settings) !== null && _Meteor$settings !== void 0 && (_Meteor$settings$pack = _Meteor$settings.packages) !== null && _Meteor$settings$pack !== void 0 && (_Meteor$settings$pack2 = _Meteor$settings$pack.collection2) !== null && _Meteor$settings$pack2 !== void 0 && _Meteor$settings$pack2.disableCollectionNamesInValidation ? '' : \"in \".concat(collection._name, \" \").concat(type));\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\nfunction getErrorObject(context) {\n  let appendToMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let message;\n  const invalidKeys = typeof context.validationErrors === 'function' ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = \"\".concat(firstErrorMessage, \" (\").concat(firstErrorKey, \")\");\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = \"\".concat(message, \" \").concat(appendToMessage).trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\nfunction addUniqueError(context, errorMessage) {\n  const name = errorMessage.split('c2_')[1].split(' ')[0];\n  const val = errorMessage.split('dup key:')[1].split('\"')[1];\n  const addValidationErrorsPropName = typeof context.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const error = args[0];\n    if (error && (error.name === \"MongoError\" && error.code === 11001 || error.message.indexOf('MongoError: E11000') !== -1) && error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  const addValidationErrorsPropName = typeof validationContext.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n      const invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\nlet alreadyInsecure = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function () {\n        return true;\n      },\n      update: function () {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\nlet alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n    const isLocalCollection = c._connection === null;\n\n    // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function (userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny(_objectSpread({\n      insert: function (userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"insert\", [doc, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false,\n        // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"update\", [{\n          _id: doc && doc._id\n        }, modifier, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false,\n        // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {\n      transform: null\n    }));\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\nfunction extendSchema(s1, s2) {\n  if (s2.version >= 2) {\n    const ss = new SimpleSchema(s1);\n    ss.extend(s2);\n    return ss;\n  } else {\n    return new SimpleSchema([s1, s2]);\n  }\n}\nmodule.exportDefault(Collection2);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aldeed_collection2/lib.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  flattenSelector: () => flattenSelector\n});\nfunction flattenSelector(selector) {\n  // If selector uses $and format, convert to plain object selector\n  if (Array.isArray(selector.$and)) {\n    selector.$and.forEach(sel => {\n      Object.assign(selector, flattenSelector(sel));\n    });\n    delete selector.$and;\n  }\n  const obj = {};\n  Object.entries(selector).forEach(_ref => {\n    let [key, value] = _ref;\n    // Ignoring logical selectors (https://docs.mongodb.com/manual/reference/operator/query/#logical)\n    if (!key.startsWith(\"$\")) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.$eq !== undefined) {\n          obj[key] = value.$eq;\n        } else if (Array.isArray(value.$in) && value.$in.length === 1) {\n          obj[key] = value.$in[0];\n        } else if (Object.keys(value).every(v => !(typeof v === \"string\" && v.startsWith(\"$\")))) {\n          obj[key] = value;\n        }\n      } else {\n        obj[key] = value;\n      }\n    }\n  });\n  return obj;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"lodash.isempty\":{\"package.json\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isempty/package.json                                   //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.exports = {\n  \"name\": \"lodash.isempty\",\n  \"version\": \"4.4.0\"\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isempty/index.js                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap');\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' ||\n        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (nonEnumShadows || isPrototype(value)) {\n    return !nativeKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEmpty;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isequal\":{\"package.json\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isequal/package.json                                   //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.exports = {\n  \"name\": \"lodash.isequal\",\n  \"version\": \"4.5.0\"\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isequal/index.js                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isobject\":{\"package.json\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isobject/package.json                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.exports = {\n  \"name\": \"lodash.isobject\",\n  \"version\": \"3.0.2\"\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isobject/index.js                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**\n * lodash 3.0.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/aldeed:collection2/collection2.js\");\n\n/* Exports */\nPackage._define(\"aldeed:collection2\", exports, {\n  Collection2: Collection2\n});\n\n})();\n","servePath":"/packages/aldeed_collection2.js","sourceMap":{"version":3,"sources":["packages/aldeed:collection2/collection2.js","packages/aldeed:collection2/lib.js"],"names":["_objectSpread","module","link","default","v","EventEmitter","Meteor","Mongo","checkNpmVersions","EJSON","isEmpty","isEqual","isObject","flattenSelector","SimpleSchema","require","Collection2","cleanOptions","filter","autoConvert","removeEmptyStrings","trimStrings","removeNullsFromArrays","Collection","prototype","attachSchema","c2AttachSchema","ss","options","isSimpleSchema","attachTo","obj","_c2","_simpleSchemas","selector","baseSchema","extendSchema","schema","schemaIndex","length","push","replace","undefined","forEach","index","_collection","LocalCollection","defineDeny","keepInsecure","emit","simpleSchema","doc","query","_simpleSchema","schemas","target","i","Object","keys","$set","Error","methodName","_super","_len","arguments","args","Array","_key","bypassCollection2","userId","err","doValidate","isServer","_connection","_makeNewID","splice","apply","collection","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","upsert","isLocalCollection","picks","isArray","pick","omits","omit","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","autoValueContext","isInsert","isUpdate","extendAutoValueContext","_cleanOptions","cleanOptionsForThisOperation","prop","clean","mutate","isModifier","docToValidate","hasOwnProperty","call","set","assign","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","_Meteor$settings","_Meteor$settings$pack","_Meteor$settings$pack2","getErrorObject","settings","packages","collection2","disableCollectionNamesInValidation","concat","_name","context","appendToMessage","message","invalidKeys","validationErrors","firstErrorKey","name","firstErrorMessage","keyErrorMessage","indexOf","trim","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","_len2","_key2","code","wrappedCallbackForParsingServerErrors","_len3","_key3","details","invalidKeysFromServer","parse","alreadyInsecure","c","Package","insecure","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","s1","s2","version","extend","exportDefault","export","$and","sel","entries","_ref","key","startsWith","$eq","$in","every"],"mappings":"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","file":"/packages/aldeed_collection2.js","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport { EJSON } from 'meteor/ejson';\nimport isEmpty from 'lodash.isempty';\nimport isEqual from 'lodash.isequal';\nimport isObject from 'lodash.isobject';\nimport { flattenSelector } from './lib';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\nCollection2.cleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false,\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  function attachTo(obj) {\n    // we need an array to hold multiple schemas\n    // position 0 is reserved for the \"base\" schema\n    obj._c2 = obj._c2 || {};\n    obj._c2._simpleSchemas = obj._c2._simpleSchemas || [ null ];\n\n    if (typeof options.selector === \"object\") {\n      // Selector Schemas\n\n      // Extend selector schema with base schema\n      const baseSchema = obj._c2._simpleSchemas[0];\n      if (baseSchema) {\n        ss = extendSchema(baseSchema.schema, ss);\n      }\n\n      // Index of existing schema with identical selector\n      let schemaIndex;\n\n      // Loop through existing schemas with selectors,\n      for (schemaIndex = obj._c2._simpleSchemas.length - 1; 0 < schemaIndex; schemaIndex--) {\n        const schema = obj._c2._simpleSchemas[schemaIndex];\n        if (schema && isEqual(schema.selector, options.selector)) break;\n      }\n\n      if (schemaIndex <= 0) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: ss,\n          selector: options.selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace === true) {\n          // Replace existing selector schema with new selector schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        } else {\n          // Extend existing selector schema with new selector schema.\n          obj._c2._simpleSchemas[schemaIndex].schema = extendSchema(obj._c2._simpleSchemas[schemaIndex].schema, ss);\n        }\n      }\n    } else {\n      // Base Schema\n      if (options.replace === true) {\n        // Replace base schema and delete all other schemas\n        obj._c2._simpleSchemas = [{\n          schema: ss,\n          selector: options.selector,\n        }];\n      } else {\n        // Set base schema if not yet set\n        if (!obj._c2._simpleSchemas[0]) {\n          return obj._c2._simpleSchemas[0] = { schema: ss, selector: undefined };\n        }\n        // Extend base schema and therefore extend all schemas\n        obj._c2._simpleSchemas.forEach((schema, index) => {\n          if (obj._c2._simpleSchemas[index]) {\n            obj._c2._simpleSchemas[index].schema = extendSchema(obj._c2._simpleSchemas[index].schema, ss);\n          }\n        });\n      }\n    }\n  }\n\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach((obj) => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    const schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n\n      let schema, selector, target;\n      // Position 0 reserved for base schema\n      for (var i = 1; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n      if (schemas[0]) {\n        return schemas[0].schema;\n      } else {\n        throw new Error(\"No default schema\");\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach((methodName) => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function(...args) {\n    let options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      let userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(\n        this,\n        methodName,\n        args,\n        Meteor.isServer || this._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  let doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  const validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  let schema = collection.simpleSchema(doc, options, selector);\n  const isLocalCollection = (collection._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Process pick/omit options if they are present\n  const picks = Array.isArray(options.pick) ? options.pick : null;\n  const omits = Array.isArray(options.omit) ? options.omit : null;\n\n  if (picks && omits) {\n    // Pick and omit cannot both be present in the options\n    throw new Error('pick and omit options are mutually exclusive');\n  } else if (picks) {\n    schema = schema.pick(...picks);\n  } else if (omits) {\n    schema = schema.omit(...omits);\n  }\n\n  // Determine validation context\n  let validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  const schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  let docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  let cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: (type === \"insert\"),\n    isUpdate: (type === \"update\" && options.upsert !== true),\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = {\n    ...((schema._cleanOptions || {}).extendAutoValueContext || {}),\n    ...autoValueContext,\n    ...options.extendAutoValueContext,\n  };\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, {\n    mutate: true, // Clean the doc/modifier in place\n    isModifier: (type !== \"insert\"),\n    // Start with some Collection2 defaults, which will usually be overwritten\n    ...Collection2.cleanOptions,\n    // The extend with the schema-level defaults (from SimpleSchema constructor options)\n    ...(schema._cleanOptions || {}),\n    // Finally, options for this specific operation should take precedence\n    ...cleanOptionsForThisOperation,\n    extendAutoValueContext, // This was extended separately above\n    getAutoValues, // Force this override\n  });\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  let docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation.\n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    const set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: (type !== \"insert\"),\n      mutate: true, // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false,\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  let isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection,\n        ...(options.extendedCustomContext || {}),\n      },\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, Meteor.settings?.packages?.collection2?.disableCollectionNamesInValidation ? '' : `in ${collection._name} ${type}`);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context, appendToMessage = '') {\n  let message;\n  const invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = `${firstErrorMessage} (${firstErrorKey})`;\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = `${message} ${appendToMessage}`.trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  const name = errorMessage.split('c2_')[1].split(' ')[0];\n  const val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  const addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(...args) {\n    const error = args[0];\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000') !== -1) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  const addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(...args) {\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      const invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nlet alreadyInsecure = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nlet alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    const isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id'],\n      ...(options.transform === true ? {} : {transform: null}),\n    });\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nfunction extendSchema(s1, s2) {\n  if (s2.version >= 2) {\n    const ss = new SimpleSchema(s1);\n    ss.extend(s2);\n    return ss;\n  } else {\n    return new SimpleSchema([ s1, s2 ]);\n  }\n}\n\nexport default Collection2;\n","export function flattenSelector(selector) {\n  // If selector uses $and format, convert to plain object selector\n  if (Array.isArray(selector.$and)) {\n    selector.$and.forEach(sel => {\n      Object.assign(selector, flattenSelector(sel));\n    });\n\n    delete selector.$and\n  }\n\n  const obj = {}\n\n  Object.entries(selector).forEach(([key, value]) => {\n    // Ignoring logical selectors (https://docs.mongodb.com/manual/reference/operator/query/#logical)\n    if (!key.startsWith(\"$\")) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.$eq !== undefined) {\n          obj[key] = value.$eq\n        } else if (Array.isArray(value.$in) && value.$in.length === 1) {\n          obj[key] = value.$in[0]\n        } else if (Object.keys(value).every(v => !(typeof v === \"string\" && v.startsWith(\"$\")))) {\n          obj[key] = value\n        }\n      } else {\n        obj[key] = value\n      }\n    }\n  })\n  \n  return obj\n}\n"]}}]