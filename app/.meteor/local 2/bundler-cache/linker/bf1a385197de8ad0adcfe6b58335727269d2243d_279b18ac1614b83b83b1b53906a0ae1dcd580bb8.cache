[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Kadira, Monti;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"montiapm:agent\":{\"lib\":{\"common\":{\"utils.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/common/utils.js                                                        //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  getClientArchVersion: () => getClientArchVersion,\n  getErrorParameters: () => getErrorParameters,\n  objectHasData: () => objectHasData,\n  millisToHuman: () => millisToHuman\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nfunction getClientArchVersion(arch) {\n  const autoupdate = __meteor_runtime_config__.autoupdate;\n  if (autoupdate) {\n    return autoupdate.versions[arch] ? autoupdate.versions[arch].version : 'none';\n  }\n\n  // Meteor 1.7 and older did not have an `autoupdate` object.\n  switch (arch) {\n    case 'cordova.web':\n      return __meteor_runtime_config__.autoupdateVersionCordova;\n    case 'web.browser':\n    case 'web.browser.legacy':\n      // Meteor 1.7 always used the web.browser.legacy version\n      return __meteor_runtime_config__.autoupdateVersion;\n    default:\n      return 'none';\n  }\n}\nconst createStackTrace = () => {\n  if (Error.captureStackTrace) {\n    let err = {};\n    Error.captureStackTrace(err, Kadira.trackError);\n    return err.stack;\n  }\n  const stack = new Error().stack.split('\\n');\n  let toRemove = 0;\n\n  // Remove frames starting from when trackError was called\n  for (; toRemove < stack.length; toRemove++) {\n    if (stack[toRemove].indexOf('trackError') > -1) {\n      toRemove += 1;\n      break;\n    }\n  }\n\n  // In safari, there isn't a frame that has trackError\n  if (toRemove === stack.length) {\n    return stack.join('\\n');\n  }\n  return stack.slice(toRemove).join('\\n');\n};\nconst getErrorParameters = function (args) {\n  let type = null;\n  let message = null;\n  let subType = null;\n  let stack = null;\n  let kadiraInfo = null;\n  if (!(args[0] instanceof Error) && typeof args[0] === 'string' && typeof args[1] === 'string') {\n    // Old usage:\n    // Monti.trackError(\n    //   'type', 'error message', { stacks: 'error stack', subType: 'sub type }\n    // );\n\n    const options = args[2] || {};\n    type = args[0];\n    subType = Meteor.isClient ? args[0] : options.subType;\n    message = args[1];\n    stack = options.stacks || createStackTrace();\n    kadiraInfo = options.kadiraInfo;\n  } else {\n    // New usage:\n    // Monti.trackError(error, { type: 'type', subType: 'subType' });\n    const error = args[0];\n    const options = args[1] || {};\n    const isErrorObject = typeof error === 'object' && error !== null;\n    message = isErrorObject ? error.message : error;\n    stack = isErrorObject && error.stack || createStackTrace();\n    type = options.type;\n    subType = options.subType;\n    kadiraInfo = options.kadiraInfo;\n  }\n  return {\n    type,\n    message,\n    subType,\n    stack,\n    kadiraInfo\n  };\n};\nconst objectHasData = function (obj) {\n  return Object.values(obj).some(val => ![null, undefined, ''].includes(val));\n};\nconst millisToHuman = function (milliseconds) {\n  const millis = milliseconds % 1000;\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const builder = [];\n  if (days > 0) {\n    builder.push(\"\".concat(days, \"d\"));\n  }\n  if (hours > 0) {\n    builder.push(\"\".concat(hours % 24, \"h\"));\n  }\n  if (minutes > 0) {\n    builder.push(\"\".concat(minutes % 60, \"m\"));\n  }\n  if (seconds > 0) {\n    builder.push(\"\".concat(seconds % 60, \"s\"));\n  }\n  if (millis > 0) {\n    builder.push(\"\".concat(millis, \"ms\"));\n  }\n  return builder.join(' ');\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"unify.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/common/unify.js                                                        //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nKadira = {};\nKadira.options = {};\nMonti = Kadira;\nif (Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\nif (Meteor.isServer) {\n  const EventEmitter = Npm.require('events').EventEmitter;\n  const eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n  const buildArgs = function (args) {\n    let eventName = \"\".concat(args[0], \"-\").concat(args[1]);\n    args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n  Kadira.EventBus = {};\n  ['on', 'emit', 'removeListener', 'removeAllListeners', 'once'].forEach(function (m) {\n    Kadira.EventBus[m] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const _args = buildArgs(args);\n      return eventBus[m](..._args);\n    };\n  });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"default_error_filters.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/common/default_error_filters.js                                        //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nconst commonErrRegExps = [/connection timeout\\. no (\\w*) heartbeat received/i, /INVALID_STATE_ERR/i];\nKadira.errorFilters = {\n  filterValidationErrors(type, message, err) {\n    if (err && err instanceof Meteor.Error) {\n      return false;\n    }\n    return true;\n  },\n  filterCommonMeteorErrors(type, message) {\n    for (let lc = 0; lc < commonErrRegExps.length; lc++) {\n      const regExp = commonErrRegExps[lc];\n      if (regExp.test(message)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"send.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/common/send.js                                                         //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Retry;\nmodule.link(\"../retry\", {\n  Retry(v) {\n    Retry = v;\n  }\n}, 1);\nKadira.send = function (payload, path, callback) {\n  if (!Kadira.connected) {\n    throw new Error('You need to connect with Kadira first, before sending messages!');\n  }\n  path = path.substr(0, 1) !== '/' ? \"/\".concat(path) : path;\n  let endpoint = Kadira.options.endpoint + path;\n  let retryCount = 0;\n  let retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000 * 5,\n    maxTimeout: 1000 * 60\n  });\n  let sendFunction = Kadira._getSendFunction();\n  tryToSend();\n  function tryToSend(err) {\n    if (retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Monti APM server');\n      if (callback) {\n        callback(err);\n      }\n    }\n  }\n  function send() {\n    sendFunction(endpoint, payload, function (err, res) {\n      if (err && !res) {\n        tryToSend(err);\n      } else if (res.statusCode === 200) {\n        if (callback) {\n          callback(null, res.data);\n        }\n      } else if (callback) {\n        callback(new Meteor.Error(res.statusCode, res.content));\n      }\n    });\n  }\n};\nKadira._getSendFunction = function () {\n  return Meteor.isServer ? Kadira._serverSend : Kadira._clientSend;\n};\nKadira._clientSend = function (endpoint, payload, callback) {\n  Kadira._makeHttpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n};\nKadira._serverSend = function () {\n  throw new Error('Kadira._serverSend is not supported. Use coreApi instead.');\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"models\":{\"base_error.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/models/base_error.js                                                   //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  BaseErrorModel: () => BaseErrorModel\n});\nfunction BaseErrorModel() {\n  this._filters = [];\n}\nBaseErrorModel.prototype.addFilter = function (filter) {\n  if (typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error('Error filter must be a function');\n  }\n};\nBaseErrorModel.prototype.removeFilter = function (filter) {\n  const index = this._filters.indexOf(filter);\n  if (index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\nBaseErrorModel.prototype.applyFilters = function (type, message, error, subType) {\n  for (let lc = 0; lc < this._filters.length; lc++) {\n    let filter = this._filters[lc];\n    try {\n      let validated = filter(type, message, error, subType);\n      if (!validated) {\n        return false;\n      }\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in an error cycle\n      this._filters.splice(lc, 1);\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n  return true;\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"retry.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/retry.js                                                               //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  Retry: () => Retry\n});\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n}, 0);\nclass Retry {\n  constructor() {\n    let {\n      // 1 second\n      baseTimeout = 1000,\n      exponent = 2.2,\n      // The default is high-ish to ensure a server can recover from a\n      // failure caused by load.\n      // 5 minutes\n      maxTimeout = 5 * 60000,\n      minTimeout = 10,\n      minCount = 2,\n      // +- 25%\n      fuzz = 0.5\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout(count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    }\n    let timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count));\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    timeout *= Random.fraction() * this.fuzz + (1 - this.fuzz / 2);\n    return Math.ceil(timeout);\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater(count, fn) {\n    const timeout = this._timeout(count);\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ntp.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/ntp.js                                                                 //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  Ntp: () => Ntp\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Retry;\nmodule.link(\"./retry\", {\n  Retry(v) {\n    Retry = v;\n  }\n}, 1);\nconst logger = getLogger();\nclass Ntp {\n  constructor(options) {\n    const {\n      endpoint,\n      disableNtp\n    } = options || {};\n    this.isDisabled = disableNtp;\n    this.path = '/simplentp/sync';\n    this.setEndpoint(endpoint);\n    this.diff = 0;\n    this.synced = false;\n    this.reSyncCount = 0;\n    this.reSync = new Retry({\n      baseTimeout: 1000 * 60,\n      maxTimeout: 1000 * 60 * 10,\n      minCount: 0\n    });\n  }\n  static _now() {\n    const now = Date.now();\n    if (typeof now === 'number') {\n      return now;\n    } else if (now instanceof Date) {\n      // some extenal JS libraries override Date.now and returns a Date object\n      // which directly affect us. So we need to prepare for that\n      return now.getTime();\n    }\n    // trust me. I've seen now === undefined\n    return new Date().getTime();\n  }\n  setEndpoint(endpoint) {\n    this.endpoint = endpoint ? endpoint + this.path : null;\n  }\n  getTime() {\n    return Ntp._now() + Math.round(this.diff);\n  }\n  syncTime(localTime) {\n    return localTime + Math.ceil(this.diff);\n  }\n  sync() {\n    if (this.endpoint === null || this.isDisabled) {\n      return;\n    }\n    logger('init sync');\n    let self = this;\n    let retryCount = 0;\n    let retry = new Retry({\n      baseTimeout: 1000 * 20,\n      maxTimeout: 1000 * 60,\n      minCount: 1,\n      minTimeout: 0\n    });\n    syncTime();\n    function syncTime() {\n      if (retryCount < 5) {\n        logger('attempt time sync with server', retryCount);\n        // if we send 0 to the retryLater, cacheDns will run immediately\n        retry.retryLater(retryCount++, cacheDns);\n      } else {\n        logger('maximum retries reached');\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          let args = [].slice.call(arguments);\n          self.sync(...args);\n        });\n      }\n    }\n\n    // first attempt is to cache dns. So, calculation does not\n    // include DNS resolution time\n    function cacheDns() {\n      self.getServerTime(function (err) {\n        if (!err) {\n          calculateTimeDiff();\n        } else {\n          syncTime();\n        }\n      });\n    }\n    function calculateTimeDiff() {\n      let clientStartTime = new Date().getTime();\n      self.getServerTime(function (err, serverTime) {\n        if (!err && serverTime) {\n          // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n          let networkTime = (new Date().getTime() - clientStartTime) / 2;\n          let serverStartTime = serverTime - networkTime;\n          self.diff = serverStartTime - clientStartTime;\n          self.synced = true;\n          // we need to send 1 into retryLater.\n          self.reSync.retryLater(self.reSyncCount++, function () {\n            let args = [].slice.call(arguments);\n            self.sync(...args);\n          });\n          logger('successfully updated diff value', self.diff);\n        } else {\n          syncTime();\n        }\n      });\n    }\n  }\n  getServerTime(callback) {\n    let self = this;\n    if (self.endpoint === null) {\n      throw new Error('getServerTime requires the endpoint to be set');\n    }\n    if (self.isDisabled) {\n      throw new Error('getServerTime requires NTP to be enabled');\n    }\n    if (Meteor.isServer) {\n      Kadira.coreApi.get(self.path, {\n        noRetries: true\n      }).then(content => {\n        let serverTime = parseInt(content, 10);\n        callback(null, serverTime);\n      }).catch(err => {\n        callback(err);\n      });\n    } else {\n      Kadira._makeHttpRequest('GET', \"\".concat(self.endpoint, \"?noCache=\").concat(new Date().getTime(), \"-\").concat(Math.random()), function (err, res) {\n        if (err) {\n          callback(err);\n        } else {\n          let serverTime = parseInt(res.content, 10);\n          callback(null, serverTime);\n        }\n      });\n    }\n  }\n}\nfunction getLogger() {\n  if (Meteor.isServer) {\n    return Npm.require('debug')('kadira:ntp');\n  }\n  return function (message) {\n    let canLog = false;\n    try {\n      canLog = global.localStorage.getItem('LOG_KADIRA') !== null && typeof console !== 'undefined';\n      // eslint-disable-next-line no-empty\n    } catch (e) {} // older browsers can sometimes throw because of getItem\n\n    if (!canLog) {\n      return;\n    }\n    if (message) {\n      message = \"kadira:ntp \".concat(message);\n      arguments[0] = message;\n    }\n    console.log(...arguments);\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client\":{\"httpRequest.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/httpRequest.js                                                  //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  httpRequest: () => httpRequest\n});\nfunction matchPageProtocol(endpoint) {\n  let withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);\n  return window.location.protocol + withoutProtocol;\n}\nfunction httpRequest(method, url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  /**\n   * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object\n   * If XDomainRequest exists, use it to send errors.\n   * XDR can POST data to HTTPS endpoints only if current page uses HTTPS\n   */\n  if (window.XDomainRequest) {\n    let xdr = new window.XDomainRequest();\n    url = matchPageProtocol(url);\n    xdr.onload = function () {\n      let headers = {\n        'Content-Type': xdr.contentType\n      };\n      let data = {};\n      try {\n        data = JSON.parse(xdr.responseText);\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n      callback(null, {\n        content: xdr.responseText,\n        data,\n        headers,\n        statusCode: 200\n      });\n    };\n    xdr.onerror = function () {\n      callback({\n        statusCode: 404\n      });\n    };\n    xdr.onprogress = function () {\n      // onprogress must be set. Otherwise, ie doesn't handle duplicate requests\n      // correctly.\n    };\n    xdr.open(method, url);\n    setTimeout(() => {\n      let content = options.content;\n      if (typeof content === 'object') {\n        content = JSON.stringify(content);\n      }\n      // delaying send fixes issues when multiple xdr requests are made\n      // at the same time.\n      xdr.send(options.content || null);\n    }, 0);\n  } else {\n    // Based on Meteor's HTTP package. Uses XMLHttpRequest\n    let content = options.content;\n\n    // wrap callback to add a 'response' property on an error, in case\n    // we have both (http 4xx/5xx error, which has a response payload)\n    callback = function (_callback) {\n      let called = false;\n      return function (error, response) {\n        if (!called) {\n          called = true;\n          if (error && response) {\n            error.response = response;\n          }\n          _callback(error, response);\n        }\n      };\n    }(callback);\n    try {\n      if (typeof XMLHttpRequest === 'undefined') {\n        throw new Error(\"Can't create XMLHttpRequest\");\n      }\n      let xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        });\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          // COMPLETE\n          if (!xhr.status) {\n            // no HTTP response\n            callback(new Error('Connection lost'));\n          } else {\n            let response = {};\n            response.statusCode = xhr.status;\n            response.content = xhr.responseText;\n\n            // Read Content-Type header, up to a ';' if there is one.\n            // A typical header might be \"application/json; charset=utf-8\"\n            // or just \"application/json\".\n            let contentType = (xhr.getResponseHeader('content-type') || ';').split(';')[0];\n\n            // Only try to parse data as JSON if server sets correct content type.\n            if (['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'].indexOf(contentType) >= 0) {\n              try {\n                response.data = JSON.parse(response.content);\n              } catch (err) {\n                response.data = null;\n              }\n            } else {\n              response.data = null;\n            }\n            let error = null;\n            if (response.statusCode >= 400) {\n              let message = \"failed [\".concat(response.statusCode, \"]\");\n              if (response.content) {\n                const MAX_LENGTH = 500;\n                let stringContent = typeof response.content === 'string' ? response.content : response.content.toString();\n                stringContent = stringContent.replace(/\\n/g, ' ');\n                stringContent = stringContent.length > MAX_LENGTH ? \"\".concat(stringContent.slice(0, MAX_LENGTH), \"...\") : stringContent;\n                message += \" \".concat(stringContent);\n              }\n              error = new Error(message);\n            }\n            callback(error, response);\n          }\n        }\n      };\n      xhr.send(content);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/utils.js                                                        //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nmodule.export({\n  getBrowserInfo: () => getBrowserInfo,\n  getErrorStack: () => getErrorStack,\n  getClientArch: () => getClientArch,\n  checkSizeAndPickFields: () => checkSizeAndPickFields\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nfunction getBrowserInfo() {\n  return {\n    browser: window.navigator.userAgent,\n    userId: Meteor.userId && Meteor.userId(),\n    url: window.location.href,\n    resolution: getResolution(),\n    clientArch: getClientArch()\n  };\n}\nfunction getResolution() {\n  const screen = window.screen;\n  if (screen && screen.width && screen.height) {\n    return \"\".concat(screen.width, \"x\").concat(screen.height);\n  }\n}\nconst toArray = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args;\n};\nfunction getErrorStack(zone, callback) {\n  let trace = [];\n  let eventMap = zone.eventMap || {};\n  let infoMap = zone.infoMap || {};\n  trace.push({\n    at: new Date().getTime(),\n    stack: zone.erroredStack.get()\n  });\n  processZone();\n  function processZone() {\n    // we assume, first two zones are not interesting\n    // bacause, they are some internal meteor loading stuffs\n    if (zone && zone.depth > 2) {\n      let stack = '';\n      if (zone.currentStack) {\n        stack = zone.currentStack.get();\n      }\n      let events = eventMap[zone.id] || [];\n      let info = getInfoArray(infoMap[zone.id]);\n      let ownerArgsEvent = events && events[0] && events[0].type === 'owner-args' && events.shift();\n      let runAt = ownerArgsEvent ? ownerArgsEvent.at : zone.runAt;\n      let ownerArgs = ownerArgsEvent ? toArray(...ownerArgsEvent.args) : [];\n\n      // limiting\n      events = events.slice(-5).map(checkSizeAndPickFields(100));\n      info = info.slice(-5).map(checkSizeAndPickFields(100));\n      ownerArgs = checkSizeAndPickFields(200)(ownerArgs.slice(0, 5));\n      if (zone.owner) delete zone.owner.zoneId;\n      trace.push({\n        createdAt: zone.createdAt,\n        runAt,\n        stack,\n        owner: zone.owner,\n        ownerArgs,\n        events,\n        info,\n        zoneId: zone.id\n      });\n      zone = zone.parent;\n      setTimeout(processZone, 0);\n    } else {\n      callback(trace);\n    }\n  }\n}\nfunction getInfoArray() {\n  let info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(info).map(function (key, type) {\n    const value = info[key];\n    value.type = type;\n    return value;\n  });\n}\nfunction getClientArch() {\n  if (Meteor.isCordova) {\n    return 'cordova.web';\n  } else if (typeof Meteor.isModern === 'undefined' || Meteor.isModern) {\n    return 'web.browser';\n  }\n  return 'web.browser.legacy';\n}\nfunction checkSizeAndPickFields(maxFieldSize) {\n  return function (obj) {\n    maxFieldSize = maxFieldSize || 100;\n    for (let key in obj) {\n      let value = obj[key];\n      try {\n        let valueStringified = JSON.stringify(value);\n        if (valueStringified.length > maxFieldSize) {\n          obj[key] = \"\".concat(valueStringified.substr(0, maxFieldSize), \" ...\");\n        } else {\n          obj[key] = value;\n        }\n      } catch (ex) {\n        obj[key] = 'Error: cannot stringify value';\n      }\n    }\n    return obj;\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"models\":{\"errors.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/models/errors.js                                                //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ErrorModel: () => ErrorModel\n});\nlet BaseErrorModel;\nmodule.link(\"../../models/base_error\", {\n  BaseErrorModel(v) {\n    BaseErrorModel = v;\n  }\n}, 0);\nlet getClientArch;\nmodule.link(\"../utils\", {\n  getClientArch(v) {\n    getClientArch = v;\n  }\n}, 1);\nlet getClientArchVersion;\nmodule.link(\"../../common/utils\", {\n  getClientArchVersion(v) {\n    getClientArchVersion = v;\n  }\n}, 2);\nfunction ErrorModel(options) {\n  BaseErrorModel.call(this);\n  options = options || {};\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 * 2; // 2 mins\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;\n  let self = this;\n  self.options = options;\n\n  // errorsSentCount will be reseted at the start of the interval\n  self.errorsSentCount = 0;\n  self.errorsSent = Object.create(null);\n  self.intervalTimeoutHandler = setInterval(function () {\n    self.errorsSentCount = 0;\n    self._flushErrors();\n  }, self.options.intervalInMillis);\n}\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\nErrorModel.prototype.sendError = function (errorDef, err, force) {\n  let self = this;\n  if (!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {\n    return;\n  }\n  if (!this.canSendErrors()) {\n    // reached maximum error count for this interval (1 min)\n    return;\n  }\n  if (force) {\n    sendError();\n  } else if (Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval === 0) {\n    sendError();\n  } else {\n    setTimeout(forceSendError, self.options.waitForNtpSyncInterval);\n  }\n  function forceSendError() {\n    self.sendError(errorDef, err, true);\n  }\n  function sendError() {\n    if (!self.errorsSent[errorDef.name]) {\n      // sync time with the server\n      if (errorDef.startTime) {\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);\n      }\n      errorDef.count = 1;\n      let payload = self._buildPayload([errorDef]);\n      Kadira.send(payload, '/errors');\n      self.errorsSent[errorDef.name] = _objectSpread({}, errorDef);\n      self.errorsSent[errorDef.name].count = 0;\n      self.errorsSentCount++;\n    } else {\n      self.increamentErrorCount(errorDef.name);\n    }\n  }\n};\nErrorModel.prototype._buildPayload = function (errors) {\n  const arch = getClientArch();\n  return {\n    host: Kadira.options.hostname,\n    recordIPAddress: Kadira.options.recordIPAddress,\n    errors,\n    arch,\n    archVersion: getClientArchVersion(arch)\n  };\n};\nErrorModel.prototype._flushErrors = function () {\n  const errors = Object.values(this.errorsSent).filter(e => e.count > 0);\n  if (errors.length > 0) {\n    Kadira.send(this._buildPayload(errors), '/errors');\n  }\n  this.errorsSent = Object.create(null);\n};\nErrorModel.prototype.isErrorExists = function (name) {\n  return !!this.errorsSent[name];\n};\nErrorModel.prototype.increamentErrorCount = function (name) {\n  let error = this.errorsSent[name];\n  if (error) {\n    error.count++;\n  }\n};\nErrorModel.prototype.canSendErrors = function () {\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;\n};\nErrorModel.prototype.close = function () {\n  clearTimeout(this.intervalTimeoutHandler);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"error_reporters\":{\"zone.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/error_reporters/zone.js                                         //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet getBrowserInfo, getErrorStack;\nmodule.link(\"../utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  },\n  getErrorStack(v) {\n    getErrorStack = v;\n  }\n}, 0);\nif (window.Zone && Zone.inited) {\n  Zone.Reporters.add('kadira', kadiraZoneReporter);\n}\nfunction kadiraZoneReporter(zone) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n  let errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);\n  if (Kadira.errors.isErrorExists(errorName)) {\n    Kadira.errors.increamentErrorCount(errorName);\n  } else if (Kadira.errors.canSendErrors()) {\n    getErrorStack(zone, function (stacks) {\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: errorName,\n        type: 'client',\n        startTime: zone.runAt,\n        subType: 'zone',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify(stacks)\n      });\n    });\n  }\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"window_error.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/error_reporters/window_error.js                                 //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet getBrowserInfo;\nmodule.link(\"../utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  }\n}, 0);\nlet prevWindowOnError = window.onerror || Function.prototype;\nfunction handleOnError(message, url, line, col, error) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return prevWindowOnError(message, url, line, col, error);\n  }\n  url = url || '<anonymous>';\n  line = line || 0;\n  col = col || 0;\n  let stack;\n  if (error) {\n    stack = error.stack;\n  } else {\n    stack = \"Error:\\n    at window.onerror (\".concat(url, \":\").concat(line, \":\").concat(col, \")\");\n  }\n  let now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onerror',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        message,\n        url,\n        line,\n        col,\n        error\n      }\n    },\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack\n    }])\n  });\n  return prevWindowOnError(message, url, line, col, error);\n}\nKadira._setupOnErrorReporter = function setupOnError() {\n  if (window.onerror !== handleOnError) {\n    prevWindowOnError = window.onerror || prevWindowOnError;\n    window.onerror = handleOnError;\n  }\n};\nKadira._setupOnErrorReporter();\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteor_debug.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/error_reporters/meteor_debug.js                                 //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet getBrowserInfo;\nmodule.link(\"../utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  }\n}, 1);\nlet originalMeteorDebug = Meteor._debug;\nlet lastMessageToIgnore = null;\nlet messagesToIgnore = 0;\n\n// Sometimes one of the other error reporter tracks an error, but Meteor also\n// sends the details to Meteor._debug. In some places, Meteor splits the\n// information across multiple Meteor._debug calls.\n//\n// Does not report Meteor._debug errors until it sees the given message\n// or it has ignored maxMessages.\nKadira._ignoreDebugMessagesUntil = function (message, maxMessages) {\n  lastMessageToIgnore = message;\n  messagesToIgnore = maxMessages;\n};\nMeteor._debug = function (m, s) {\n  // We need to assign variables like this. Otherwise,\n  // we can't see proper error messages.\n  // See: https://github.com/meteorhacks/kadira/issues/193\n  let message = m;\n  let stack = s;\n  let args = arguments;\n  function runOriginal() {\n    return originalMeteorDebug.apply(Meteor, args);\n  }\n\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return runOriginal();\n  }\n\n  // do not track if a zone is available (let zone handle the error)\n  if (window.zone) {\n    return runOriginal();\n  }\n\n  // Do not report messages until either we see the\n  // lastMessageToIgnore or we have ignored the number of\n  // messages in messagesToIgnore\n  if (lastMessageToIgnore) {\n    if (message === lastMessageToIgnore || messagesToIgnore === 1) {\n      lastMessageToIgnore = null;\n      messagesToIgnore = 0;\n    } else {\n      messagesToIgnore -= 1;\n    }\n    return runOriginal();\n  }\n\n  // We hate Meteor._debug (no single usage pattern)\n  if (message instanceof Error) {\n    stack = message.stack;\n    message = message.message;\n  } else if (typeof message === 'string' && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  } else if (typeof message === 'string' && stack instanceof Error) {\n    const separator = message.endsWith(':') ? '' : ':';\n    message = \"\".concat(message).concat(separator, \" \").concat(stack.message);\n    stack = getStackFromMessage(stack.stack);\n  }\n\n  // sometimes Meteor._debug is called with the stack concat to the message\n  // FIXME Meteor._debug can be called in many ways\n  if (message && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n  let now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'meteor._debug',\n    info: getBrowserInfo(),\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack\n    }])\n  });\n  return runOriginal();\n};\n\n// Identifies lines that are a stack trace frame:\n// 1. Has \"at\" proceeded and followed by at least one space\n// 2. Or has an \"@\" symbol\nlet stackRegex = /(^.*@.*$|^\\s+at\\s.+$)/gm;\nfunction getStackFromMessage(message) {\n  // add empty string to add the empty line at start\n  let stack = [''];\n  let match;\n  // eslint-disable-next-line no-cond-assign\n  while (match = stackRegex.exec(message)) {\n    stack.push(match[0]);\n  }\n  return stack.join('\\n');\n}\nfunction firstLine(message) {\n  return message.split('\\n')[0];\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"unhandled_rejection.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/error_reporters/unhandled_rejection.js                          //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet getBrowserInfo;\nmodule.link(\"../utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  }\n}, 0);\nwindow.addEventListener('unhandledrejection', function (e) {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n  let message = e.reason;\n  let stack = '';\n  if (typeof message === 'object' && message !== null) {\n    stack = message.stack;\n    message = message.message;\n  }\n  let now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onunhandledrejection',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        reason: e.reason\n      }\n    },\n    stacks: JSON.stringify([{\n      at: now,\n      events: [],\n      stack\n    }])\n  });\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"tracker.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/error_reporters/tracker.js                                      //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 0);\nlet getBrowserInfo;\nmodule.link(\"../utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  }\n}, 1);\nconst origCompute = Tracker.Computation.prototype._compute;\nconst origAfterFlush = Tracker.afterFlush;\nconst origRunFlush = Tracker._runFlush;\n\n// Internal variable in the Tracker package set during Tracker._runFlush\n// If it is true, Tracker throws the error instead of using Meteor._debug\n// In that case, we should not report the error in afterFlush and\n// instead let another reporter handle it\nlet throwFirstError = false;\nTracker._runFlush = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  throwFirstError = !!options.throwFirstError;\n  return origRunFlush.apply(this, arguments);\n};\nTracker.afterFlush = function (func) {\n  return origAfterFlush(function () {\n    try {\n      return func();\n    } catch (e) {\n      if (Kadira.options.enableErrorTracking && !throwFirstError) {\n        let message = e.message;\n        let stack = e.stack;\n        let now = new Date().getTime();\n        Kadira.errors.sendError({\n          appId: Kadira.options.appId,\n          name: message,\n          type: 'client',\n          startTime: now,\n          subType: 'tracker.afterFlush',\n          info: getBrowserInfo(),\n          stacks: JSON.stringify([{\n            at: now,\n            events: [],\n            stack\n          }])\n        });\n\n        // Once the error is thrown, Tracker will call\n        // Meteor._debug 2 or 3 times. The last time will\n        // have the stack trace.\n        Kadira._ignoreDebugMessagesUntil(stack, 3);\n      }\n      throw e;\n    }\n  });\n};\nTracker.Computation.prototype._compute = function () {\n  try {\n    return origCompute.apply(this, arguments);\n  } catch (e) {\n    // During the first run, Tracker throws the error\n    // It will be handled by a different error reporter\n    if (Kadira.options.enableErrorTracking && !this.firstRun) {\n      let message = e.message;\n      let stack = e.stack;\n      let now = new Date().getTime();\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: message,\n        type: 'client',\n        startTime: now,\n        subType: 'tracker.compute',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify([{\n          at: now,\n          events: [],\n          stack\n        }])\n      });\n\n      // Once the error is thrown, Tracker will call\n      // Meteor._debug 2 or 3 times. The last time will\n      // have the stack trace.\n      Kadira._ignoreDebugMessagesUntil(stack, 3);\n    }\n    throw e;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"kadira.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/client/kadira.js                                                       //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet getErrorParameters;\nmodule.link(\"../common/utils\", {\n  getErrorParameters(v) {\n    getErrorParameters = v;\n  }\n}, 1);\nlet ErrorModel;\nmodule.link(\"./models/errors\", {\n  ErrorModel(v) {\n    ErrorModel = v;\n  }\n}, 2);\nlet Ntp;\nmodule.link(\"../ntp\", {\n  Ntp(v) {\n    Ntp = v;\n  }\n}, 3);\nlet getBrowserInfo;\nmodule.link(\"./utils\", {\n  getBrowserInfo(v) {\n    getBrowserInfo = v;\n  }\n}, 4);\nlet httpRequest;\nmodule.link(\"./httpRequest\", {\n  httpRequest(v) {\n    httpRequest = v;\n  }\n}, 5);\nKadira.enableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = true;\n};\nKadira.disableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = false;\n};\nKadira.trackError = function () {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n  if (Kadira.options.disableClientErrorTracking) {\n    return;\n  }\n  const {\n    message,\n    subType,\n    stack\n  } = getErrorParameters(arguments);\n  if (message) {\n    let now = new Date().getTime();\n    Kadira.errors.sendError({\n      appId: Kadira.options.appId,\n      name: message,\n      startTime: now,\n      type: 'client',\n      subType: subType || 'Monti.trackError',\n      info: getBrowserInfo(),\n      stacks: JSON.stringify([{\n        at: now,\n        events: [],\n        stack\n      }])\n    });\n  }\n};\n\n// Create new NTP object and error model immediately so it can be used\n// endpoints is set later using __meteor_runtime_config__ or publication\nKadira.syncedDate = new Ntp(null);\nKadira.errors = new ErrorModel({\n  waitForNtpSyncInterval: 1000 * 5,\n  // 5 secs\n  intervalInMillis: 1000 * 60 * 1,\n  // 1minutes\n  maxErrorsPerInterval: 5\n});\nlet initialized = false;\nfunction initialize() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n  Kadira.options = _objectSpread({\n    errorDumpInterval: 1000 * 60,\n    maxErrorsPerInterval: 10,\n    collectAllStacks: false,\n    enableErrorTracking: false\n  }, options);\n  if (Kadira.options.appId && Kadira.options.endpoint) {\n    // update endpoint after receiving correct data\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);\n    Kadira.syncedDate.isDisabled = Kadira.options.disableNtp;\n    Kadira.connected = true;\n    Meteor.startup(function () {\n      // if we don't do this might block the initial rendering\n      // or, it will show up bottom of the page, which is not cool\n      setTimeout(function () {\n        Kadira.syncedDate.sync();\n      }, Kadira.options.clientEngineSyncDelay);\n    });\n  }\n  if (Kadira.connected && Kadira.options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  }\n  if (window.Zone && Zone.inited) {\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;\n  }\n}\n\n// __meteor_runtime_config__ cannot be dynamically set for cordova apps\n// using a null subscription to send required options to client\nif (Meteor.isCordova) {\n  const SettingsCollection = new Meteor.Collection('kadira_settings');\n  SettingsCollection.find().observe({\n    added: initialize\n  });\n} else {\n  initialize(__meteor_runtime_config__.kadira);\n}\nKadira._makeHttpRequest = httpRequest;\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"profiler\":{\"client.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                    //\n// packages/montiapm_agent/lib/profiler/client.js                                                     //\n//                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                      //\n// For just making a notice\n// `montiapm:profiler` will override this method to add\n// actual functionality\nKadira.profileCpu = function profileCpu() {\n  const message = 'Please install montiapm:profiler' + ' to take a CPU profile.';\n  console.log(message);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".d.ts\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/utils.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/unify.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/models/base_error.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/retry.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/ntp.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/httpRequest.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/utils.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/models/errors.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/zone.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/window_error.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/meteor_debug.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/unhandled_rejection.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/error_reporters/tracker.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/client/kadira.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/profiler/client.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/default_error_filters.js\");\nrequire(\"/node_modules/meteor/montiapm:agent/lib/common/send.js\");\n\n/* Exports */\nPackage._define(\"montiapm:agent\", {\n  Kadira: Kadira,\n  Monti: Monti\n});\n\n})();\n","servePath":"/packages/montiapm_agent.js","sourceMap":{"version":3,"sources":["packages/montiapm:agent/lib/common/utils.js","packages/montiapm:agent/lib/common/unify.js","packages/montiapm:agent/lib/common/default_error_filters.js","packages/montiapm:agent/lib/common/send.js","packages/montiapm:agent/lib/models/base_error.js","packages/montiapm:agent/lib/retry.js","packages/montiapm:agent/lib/ntp.js","packages/montiapm:agent/lib/client/httpRequest.js","packages/montiapm:agent/lib/client/utils.js","packages/montiapm:agent/lib/client/models/errors.js","packages/montiapm:agent/lib/client/error_reporters/zone.js","packages/montiapm:agent/lib/client/error_reporters/window_error.js","packages/montiapm:agent/lib/client/error_reporters/meteor_debug.js","packages/montiapm:agent/lib/client/error_reporters/unhandled_rejection.js","packages/montiapm:agent/lib/client/error_reporters/tracker.js","packages/montiapm:agent/lib/client/kadira.js","packages/montiapm:agent/lib/profiler/client.js"],"names":["module","export","getClientArchVersion","getErrorParameters","objectHasData","millisToHuman","Meteor","link","v","arch","autoupdate","__meteor_runtime_config__","versions","version","autoupdateVersionCordova","autoupdateVersion","createStackTrace","Error","captureStackTrace","err","Kadira","trackError","stack","split","toRemove","length","indexOf","join","slice","args","type","message","subType","kadiraInfo","options","isClient","stacks","error","isErrorObject","obj","Object","values","some","val","undefined","includes","milliseconds","millis","seconds","Math","floor","minutes","hours","days","builder","push","concat","Monti","wrapAsync","_wrapAsync","isServer","EventEmitter","Npm","require","eventBus","setMaxListeners","buildArgs","eventName","unshift","EventBus","forEach","m","_len","arguments","Array","_key","_args","commonErrRegExps","errorFilters","filterValidationErrors","filterCommonMeteorErrors","lc","regExp","test","Retry","send","payload","path","callback","connected","substr","endpoint","retryCount","retry","minCount","minTimeout","baseTimeout","maxTimeout","sendFunction","_getSendFunction","tryToSend","retryLater","console","warn","res","statusCode","data","content","_serverSend","_clientSend","_makeHttpRequest","headers","JSON","stringify","BaseErrorModel","_filters","prototype","addFilter","filter","removeFilter","index","splice","applyFilters","validated","ex","Random","constructor","exponent","fuzz","retryTimer","clear","clearTimeout","_timeout","count","timeout","min","pow","fraction","ceil","fn","setTimeout","Ntp","logger","getLogger","disableNtp","isDisabled","setEndpoint","diff","synced","reSyncCount","reSync","_now","now","Date","getTime","round","syncTime","localTime","sync","self","cacheDns","call","getServerTime","calculateTimeDiff","clientStartTime","serverTime","networkTime","serverStartTime","coreApi","get","noRetries","then","parseInt","catch","random","canLog","global","localStorage","getItem","e","log","httpRequest","matchPageProtocol","withoutProtocol","window","location","protocol","method","url","XDomainRequest","xdr","onload","contentType","parse","responseText","onerror","onprogress","open","_callback","called","response","XMLHttpRequest","xhr","keys","key","setRequestHeader","onreadystatechange","readyState","status","getResponseHeader","MAX_LENGTH","stringContent","toString","replace","getBrowserInfo","getErrorStack","getClientArch","checkSizeAndPickFields","browser","navigator","userAgent","userId","href","resolution","getResolution","clientArch","screen","width","height","toArray","zone","trace","eventMap","infoMap","at","erroredStack","processZone","depth","currentStack","events","id","info","getInfoArray","ownerArgsEvent","shift","runAt","ownerArgs","map","owner","zoneId","createdAt","parent","value","isCordova","isModern","maxFieldSize","valueStringified","_objectSpread","default","ErrorModel","maxErrorsPerInterval","intervalInMillis","waitForNtpSyncInterval","errorsSentCount","errorsSent","create","intervalTimeoutHandler","setInterval","_flushErrors","assign","sendError","errorDef","force","name","canSendErrors","syncedDate","forceSendError","startTime","_buildPayload","increamentErrorCount","errors","host","hostname","recordIPAddress","archVersion","isErrorExists","close","Zone","inited","Reporters","add","kadiraZoneReporter","enableErrorTracking","errorName","getErrorMessage","_e","appId","prevWindowOnError","Function","handleOnError","line","col","_internalDetails","origError","_setupOnErrorReporter","setupOnError","originalMeteorDebug","_debug","lastMessageToIgnore","messagesToIgnore","_ignoreDebugMessagesUntil","maxMessages","s","runOriginal","apply","getStackFromMessage","firstLine","separator","endsWith","stackRegex","match","exec","addEventListener","reason","Tracker","origCompute","Computation","_compute","origAfterFlush","afterFlush","origRunFlush","_runFlush","throwFirstError","func","firstRun","disableErrorTracking","disableClientErrorTracking","initialized","initialize","errorDumpInterval","collectAllStacks","startup","clientEngineSyncDelay","SettingsCollection","Collection","find","observe","added","kadira","profileCpu"],"mappings":"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","file":"/packages/montiapm_agent.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nexport function getClientArchVersion (arch) {\n  const autoupdate = __meteor_runtime_config__.autoupdate;\n\n  if (autoupdate) {\n    return autoupdate.versions[arch] ? autoupdate.versions[arch].version : 'none';\n  }\n\n  // Meteor 1.7 and older did not have an `autoupdate` object.\n  switch (arch) {\n    case 'cordova.web':\n      return __meteor_runtime_config__.autoupdateVersionCordova;\n    case 'web.browser':\n    case 'web.browser.legacy':\n      // Meteor 1.7 always used the web.browser.legacy version\n      return __meteor_runtime_config__.autoupdateVersion;\n\n    default:\n      return 'none';\n  }\n}\n\nconst createStackTrace = () => {\n  if (Error.captureStackTrace) {\n    let err = {};\n    Error.captureStackTrace(err, Kadira.trackError);\n    return err.stack;\n  }\n\n  const stack = new Error().stack.split('\\n');\n  let toRemove = 0;\n\n  // Remove frames starting from when trackError was called\n  for (; toRemove < stack.length; toRemove++) {\n    if (stack[toRemove].indexOf('trackError') > -1) {\n      toRemove += 1;\n      break;\n    }\n  }\n\n  // In safari, there isn't a frame that has trackError\n  if (toRemove === stack.length) {\n    return stack.join('\\n');\n  }\n\n  return stack.slice(toRemove).join('\\n');\n};\n\nexport const getErrorParameters = function (args) {\n  let type = null;\n  let message = null;\n  let subType = null;\n  let stack = null;\n  let kadiraInfo = null;\n\n  if (\n    !(args[0] instanceof Error) &&\n    typeof args[0] === 'string' &&\n    typeof args[1] === 'string'\n  ) {\n    // Old usage:\n    // Monti.trackError(\n    //   'type', 'error message', { stacks: 'error stack', subType: 'sub type }\n    // );\n\n    const options = args[2] || {};\n\n    type = args[0];\n    subType = Meteor.isClient ? args[0] : options.subType;\n    message = args[1];\n    stack = options.stacks || createStackTrace();\n    kadiraInfo = options.kadiraInfo;\n  } else {\n    // New usage:\n    // Monti.trackError(error, { type: 'type', subType: 'subType' });\n    const error = args[0];\n    const options = args[1] || {};\n    const isErrorObject = typeof error === 'object' && error !== null;\n\n    message = isErrorObject ? error.message : error;\n    stack = isErrorObject && error.stack || createStackTrace();\n    type = options.type;\n    subType = options.subType;\n    kadiraInfo = options.kadiraInfo;\n  }\n\n  return { type, message, subType, stack, kadiraInfo };\n};\n\n/**\n * @param {Object} obj The object to check.\n * @returns {boolean} True if the object has set any data which is not `null`, `undefined` or an empty string.\n */\nexport const objectHasData = function (obj) {\n  return Object.values(obj).some(val => ![null, undefined, ''].includes(val));\n};\n\n/**\n * @param {Number} milliseconds The number of milliseconds.\n * @returns {string} A human-readable representation of the given milliseconds.\n */\nexport const millisToHuman = function (milliseconds) {\n  const millis = milliseconds % 1000;\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  const builder = [];\n\n  if (days > 0) {\n    builder.push(`${days}d`);\n  }\n\n  if (hours > 0) {\n    builder.push(`${hours % 24}h`);\n  }\n\n  if (minutes > 0) {\n    builder.push(`${minutes % 60}m`);\n  }\n\n  if (seconds > 0) {\n    builder.push(`${seconds % 60}s`);\n  }\n\n  if (millis > 0) {\n    builder.push(`${millis}ms`);\n  }\n\n  return builder.join(' ');\n};\n","import { Meteor } from 'meteor/meteor';\n\nKadira = {};\nKadira.options = {};\n\nMonti = Kadira;\n\nif (Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif (Meteor.isServer) {\n  const EventEmitter = Npm.require('events').EventEmitter;\n  const eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  const buildArgs = function (args) {\n    let eventName = `${args[0]}-${args[1]}`;\n    args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n\n  Kadira.EventBus = {};\n\n  ['on', 'emit', 'removeListener', 'removeAllListeners', 'once'].forEach(function (m) {\n    Kadira.EventBus[m] = function (...args) {\n      const _args = buildArgs(args);\n      return eventBus[m](..._args);\n    };\n  });\n}\n","import { Meteor } from 'meteor/meteor';\n\nconst commonErrRegExps = [\n  /connection timeout\\. no (\\w*) heartbeat received/i,\n  /INVALID_STATE_ERR/i,\n];\n\nKadira.errorFilters = {\n  filterValidationErrors (type, message, err) {\n    if (err && err instanceof Meteor.Error) {\n      return false;\n    }\n    return true;\n  },\n\n  filterCommonMeteorErrors (type, message) {\n    for (let lc = 0; lc < commonErrRegExps.length; lc++) {\n      const regExp = commonErrRegExps[lc];\n      if (regExp.test(message)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Retry } from '../retry';\n\nKadira.send = function (payload, path, callback) {\n  if (!Kadira.connected) {\n    throw new Error('You need to connect with Kadira first, before sending messages!');\n  }\n\n  path = path.substr(0, 1) !== '/' ? `/${path}` : path;\n  let endpoint = Kadira.options.endpoint + path;\n  let retryCount = 0;\n  let retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000 * 5,\n    maxTimeout: 1000 * 60,\n  });\n\n  let sendFunction = Kadira._getSendFunction();\n  tryToSend();\n\n  function tryToSend (err) {\n    if (retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to Monti APM server');\n      if (callback) {\n        callback(err);\n      }\n    }\n  }\n\n  function send () {\n    sendFunction(endpoint, payload, function (err, res) {\n      if (err && !res) {\n        tryToSend(err);\n      } else if (res.statusCode === 200) {\n        if (callback) {\n          callback(null, res.data);\n        }\n      } else if (callback) {\n        callback(new Meteor.Error(res.statusCode, res.content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function () {\n  return Meteor.isServer ? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  Kadira._makeHttpRequest('POST', endpoint, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    content: JSON.stringify(payload)\n  }, callback);\n};\n\nKadira._serverSend = function () {\n  throw new Error('Kadira._serverSend is not supported. Use coreApi instead.');\n};\n","export function BaseErrorModel () {\n  this._filters = [];\n}\n\nBaseErrorModel.prototype.addFilter = function (filter) {\n  if (typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error('Error filter must be a function');\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function (filter) {\n  const index = this._filters.indexOf(filter);\n  if (index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function (type, message, error, subType) {\n  for (let lc = 0; lc < this._filters.length; lc++) {\n    let filter = this._filters[lc];\n    try {\n      let validated = filter(type, message, error, subType);\n      if (!validated) {\n        return false;\n      }\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in an error cycle\n      this._filters.splice(lc, 1);\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};\n","import { Random } from 'meteor/random';\n\n// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\n// TODO: remove this class and use Meteor Retry in a later version of meteor.\n\nexport class Retry {\n  constructor ({\n    // 1 second\n    baseTimeout = 1000,\n    exponent = 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    // 5 minutes\n    maxTimeout = 5 * 60000,\n    minTimeout = 10,\n    minCount = 2,\n    // +- 25%\n    fuzz = 0.5,\n  } = {}) {\n    this.baseTimeout = baseTimeout;\n    this.exponent = exponent;\n    this.maxTimeout = maxTimeout;\n    this.minTimeout = minTimeout;\n    this.minCount = minCount;\n    this.fuzz = fuzz;\n    this.retryTimer = null;\n  }\n\n  // Reset a pending retry, if any.\n  clear () {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n    this.retryTimer = null;\n  }\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout (count) {\n    if (count < this.minCount) {\n      return this.minTimeout;\n    }\n\n    let timeout = Math.min(\n      this.maxTimeout,\n      this.baseTimeout * Math.pow(this.exponent, count));\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    timeout *= (Random.fraction() * this.fuzz) +\n                         (1 - this.fuzz / 2);\n    return Math.ceil(timeout);\n  }\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater (count, fn) {\n    const timeout = this._timeout(count);\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n    }\n\n    this.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n}\n","import { Meteor } from 'meteor/meteor';\nimport { Retry } from './retry';\n\nconst logger = getLogger();\n\nexport class Ntp {\n  constructor (options) {\n    const {endpoint, disableNtp} = options || {};\n\n    this.isDisabled = disableNtp;\n    this.path = '/simplentp/sync';\n    this.setEndpoint(endpoint);\n    this.diff = 0;\n    this.synced = false;\n    this.reSyncCount = 0;\n    this.reSync = new Retry({\n      baseTimeout: 1000 * 60,\n      maxTimeout: 1000 * 60 * 10,\n      minCount: 0\n    });\n  }\n\n  static _now () {\n    const now = Date.now();\n    if (typeof now === 'number') {\n      return now;\n    } else if (now instanceof Date) {\n      // some extenal JS libraries override Date.now and returns a Date object\n      // which directly affect us. So we need to prepare for that\n      return now.getTime();\n    }\n    // trust me. I've seen now === undefined\n    return new Date().getTime();\n  }\n\n  setEndpoint (endpoint) {\n    this.endpoint = endpoint ? endpoint + this.path : null;\n  }\n\n  getTime () {\n    return Ntp._now() + Math.round(this.diff);\n  }\n\n  syncTime (localTime) {\n    return localTime + Math.ceil(this.diff);\n  }\n\n  sync () {\n    if (this.endpoint === null || this.isDisabled) {\n      return;\n    }\n\n    logger('init sync');\n    let self = this;\n    let retryCount = 0;\n\n    let retry = new Retry({\n      baseTimeout: 1000 * 20,\n      maxTimeout: 1000 * 60,\n      minCount: 1,\n      minTimeout: 0\n    });\n\n    syncTime();\n\n    function syncTime () {\n      if (retryCount < 5) {\n        logger('attempt time sync with server', retryCount);\n        // if we send 0 to the retryLater, cacheDns will run immediately\n        retry.retryLater(retryCount++, cacheDns);\n      } else {\n        logger('maximum retries reached');\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          let args = [].slice.call(arguments);\n          self.sync(...args);\n        });\n      }\n    }\n\n    // first attempt is to cache dns. So, calculation does not\n    // include DNS resolution time\n    function cacheDns () {\n      self.getServerTime(function (err) {\n        if (!err) {\n          calculateTimeDiff();\n        } else {\n          syncTime();\n        }\n      });\n    }\n\n    function calculateTimeDiff () {\n      let clientStartTime = new Date().getTime();\n      self.getServerTime(function (err, serverTime) {\n        if (!err && serverTime) {\n          // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n          let networkTime = (new Date().getTime() - clientStartTime) / 2;\n          let serverStartTime = serverTime - networkTime;\n          self.diff = serverStartTime - clientStartTime;\n          self.synced = true;\n          // we need to send 1 into retryLater.\n          self.reSync.retryLater(self.reSyncCount++, function () {\n            let args = [].slice.call(arguments);\n            self.sync(...args);\n          });\n          logger('successfully updated diff value', self.diff);\n        } else {\n          syncTime();\n        }\n      });\n    }\n  }\n\n  getServerTime (callback) {\n    let self = this;\n\n    if (self.endpoint === null) {\n      throw new Error('getServerTime requires the endpoint to be set');\n    }\n\n    if (self.isDisabled) {\n      throw new Error('getServerTime requires NTP to be enabled');\n    }\n\n    if (Meteor.isServer) {\n      Kadira.coreApi.get(self.path, {noRetries: true}).then(content => {\n        let serverTime = parseInt(content, 10);\n        callback(null, serverTime);\n      })\n        .catch(err => {\n          callback(err);\n        });\n    } else {\n      Kadira._makeHttpRequest('GET', `${self.endpoint}?noCache=${new Date().getTime()}-${Math.random()}`, function (err, res) {\n        if (err) {\n          callback(err);\n        } else {\n          let serverTime = parseInt(res.content, 10);\n          callback(null, serverTime);\n        }\n      });\n    }\n  }\n}\n\nfunction getLogger () {\n  if (Meteor.isServer) {\n    return Npm.require('debug')('kadira:ntp');\n  }\n\n  return function (message) {\n    let canLog = false;\n    try {\n      canLog = global.localStorage.getItem('LOG_KADIRA') !== null && typeof console !== 'undefined';\n      // eslint-disable-next-line no-empty\n    } catch (e) { } // older browsers can sometimes throw because of getItem\n\n    if (!canLog) {\n      return;\n    }\n\n    if (message) {\n      message = `kadira:ntp ${message}`;\n      arguments[0] = message;\n    }\n\n    console.log(...arguments);\n  };\n}\n","function matchPageProtocol (endpoint) {\n  let withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);\n  return window.location.protocol + withoutProtocol;\n}\n\nexport function httpRequest (method, url, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  /**\n   * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object\n   * If XDomainRequest exists, use it to send errors.\n   * XDR can POST data to HTTPS endpoints only if current page uses HTTPS\n   */\n  if (window.XDomainRequest) {\n    let xdr = new window.XDomainRequest();\n    url = matchPageProtocol(url);\n\n    xdr.onload = function () {\n      let headers = { 'Content-Type': xdr.contentType };\n      let data = {};\n      try {\n        data = JSON.parse(xdr.responseText);\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n\n      callback(null, { content: xdr.responseText, data, headers, statusCode: 200 });\n    };\n\n    xdr.onerror = function () {\n      callback({ statusCode: 404 });\n    };\n    xdr.onprogress = function () {\n      // onprogress must be set. Otherwise, ie doesn't handle duplicate requests\n      // correctly.\n    };\n\n    xdr.open(method, url);\n\n    setTimeout(() => {\n      let content = options.content;\n      if (typeof content === 'object') {\n        content = JSON.stringify(content);\n      }\n      // delaying send fixes issues when multiple xdr requests are made\n      // at the same time.\n      xdr.send(options.content || null);\n    }, 0);\n  } else {\n    // Based on Meteor's HTTP package. Uses XMLHttpRequest\n    let content = options.content;\n\n    // wrap callback to add a 'response' property on an error, in case\n    // we have both (http 4xx/5xx error, which has a response payload)\n    callback = (function (_callback) {\n      let called = false;\n      return function (error, response) {\n        if (!called) {\n          called = true;\n          if (error && response) {\n            error.response = response;\n          }\n          _callback(error, response);\n        }\n      };\n    })(callback);\n\n    try {\n      if (typeof XMLHttpRequest === 'undefined') {\n        throw new Error(\"Can't create XMLHttpRequest\");\n      }\n\n      let xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true);\n\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, options.headers[key]);\n        });\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) { // COMPLETE\n          if (!xhr.status) {\n            // no HTTP response\n            callback(new Error('Connection lost'));\n          } else {\n            let response = {};\n            response.statusCode = xhr.status;\n            response.content = xhr.responseText;\n\n            // Read Content-Type header, up to a ';' if there is one.\n            // A typical header might be \"application/json; charset=utf-8\"\n            // or just \"application/json\".\n            let contentType = (xhr.getResponseHeader('content-type') || ';').split(';')[0];\n\n            // Only try to parse data as JSON if server sets correct content type.\n            if (['application/json',\n              'text/javascript',\n              'application/javascript',\n              'application/x-javascript',\n            ].indexOf(contentType) >= 0) {\n              try {\n                response.data = JSON.parse(response.content);\n              } catch (err) {\n                response.data = null;\n              }\n            } else {\n              response.data = null;\n            }\n\n            let error = null;\n            if (response.statusCode >= 400) {\n              let message = `failed [${response.statusCode}]`;\n\n              if (response.content) {\n                const MAX_LENGTH = 500;\n                let stringContent = typeof response.content === 'string' ?\n                  response.content : response.content.toString();\n                stringContent = stringContent.replace(/\\n/g, ' ');\n                stringContent = stringContent.length > MAX_LENGTH ? `${stringContent.slice(0, MAX_LENGTH)}...` : stringContent;\n                message += ` ${stringContent}`;\n              }\n\n              error = new Error(message);\n            }\n\n            callback(error, response);\n          }\n        }\n      };\n\n      xhr.send(content);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n","import { Meteor } from 'meteor/meteor';\n\nexport function getBrowserInfo () {\n  return {\n    browser: window.navigator.userAgent,\n    userId: Meteor.userId && Meteor.userId(),\n    url: window.location.href,\n    resolution: getResolution(),\n    clientArch: getClientArch(),\n  };\n}\n\nfunction getResolution () {\n  const screen = window.screen;\n  if (screen && screen.width && screen.height) {\n    return `${screen.width}x${screen.height}`;\n  }\n}\n\nconst toArray = (...args) => args;\n\nexport function getErrorStack (zone, callback) {\n  let trace = [];\n  let eventMap = zone.eventMap || {};\n  let infoMap = zone.infoMap || {};\n\n  trace.push({\n    at: new Date().getTime(),\n    stack: zone.erroredStack.get()\n  });\n\n  processZone();\n  function processZone () {\n    // we assume, first two zones are not interesting\n    // bacause, they are some internal meteor loading stuffs\n    if (zone && zone.depth > 2) {\n      let stack = '';\n      if (zone.currentStack) {\n        stack = zone.currentStack.get();\n      }\n\n      let events = eventMap[zone.id] || [];\n      let info = getInfoArray(infoMap[zone.id]);\n      let ownerArgsEvent = events && events[0] && events[0].type === 'owner-args' && events.shift();\n      let runAt = ownerArgsEvent ? ownerArgsEvent.at : zone.runAt;\n      let ownerArgs = ownerArgsEvent ? toArray(...ownerArgsEvent.args) : [];\n\n      // limiting\n      events = events.slice(-5).map(checkSizeAndPickFields(100));\n      info = info.slice(-5).map(checkSizeAndPickFields(100));\n      ownerArgs = checkSizeAndPickFields(200)(ownerArgs.slice(0,5));\n\n      if (zone.owner) delete zone.owner.zoneId;\n\n      trace.push({\n        createdAt: zone.createdAt,\n        runAt,\n        stack,\n        owner: zone.owner,\n        ownerArgs,\n        events,\n        info,\n        zoneId: zone.id\n      });\n      zone = zone.parent;\n\n      setTimeout(processZone, 0);\n    } else {\n      callback(trace);\n    }\n  }\n}\n\nfunction getInfoArray (info = {}) {\n  return Object.keys(info)\n    .map(function (key, type) {\n      const value = info[key];\n      value.type = type;\n      return value;\n    });\n}\n\nexport function getClientArch () {\n  if (Meteor.isCordova) {\n    return 'cordova.web';\n  } else if (typeof Meteor.isModern === 'undefined' || Meteor.isModern) {\n    return 'web.browser';\n  }\n  return 'web.browser.legacy';\n}\n\nexport function checkSizeAndPickFields (maxFieldSize) {\n  return function (obj) {\n    maxFieldSize = maxFieldSize || 100;\n    for (let key in obj) {\n      let value = obj[key];\n      try {\n        let valueStringified = JSON.stringify(value);\n        if (valueStringified.length > maxFieldSize) {\n          obj[key] = `${valueStringified.substr(0, maxFieldSize)} ...`;\n        } else {\n          obj[key] = value;\n        }\n      } catch (ex) {\n        obj[key] = 'Error: cannot stringify value';\n      }\n    }\n    return obj;\n  };\n}\n","import { BaseErrorModel } from '../../models/base_error';\nimport { getClientArch } from '../utils';\nimport { getClientArchVersion } from '../../common/utils';\n\nexport function ErrorModel (options) {\n  BaseErrorModel.call(this);\n  options = options || {};\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 * 2; // 2 mins\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;\n  let self = this;\n\n  self.options = options;\n\n  // errorsSentCount will be reseted at the start of the interval\n  self.errorsSentCount = 0;\n  self.errorsSent = Object.create(null);\n  self.intervalTimeoutHandler = setInterval(function () {\n    self.errorsSentCount = 0;\n    self._flushErrors();\n  }, self.options.intervalInMillis);\n}\n\nObject.assign(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.sendError = function (errorDef, err, force) {\n  let self = this;\n  if (!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {\n    return;\n  }\n\n  if (!this.canSendErrors()) {\n    // reached maximum error count for this interval (1 min)\n    return;\n  }\n\n  if (force) {\n    sendError();\n  } else if (Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval === 0) {\n    sendError();\n  } else {\n    setTimeout(forceSendError, self.options.waitForNtpSyncInterval);\n  }\n\n  function forceSendError () {\n    self.sendError(errorDef, err, true);\n  }\n\n  function sendError () {\n    if (!self.errorsSent[errorDef.name]) {\n      // sync time with the server\n      if (errorDef.startTime) {\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);\n      }\n      errorDef.count = 1;\n      let payload = self._buildPayload([errorDef]);\n      Kadira.send(payload, '/errors');\n\n      self.errorsSent[errorDef.name] = { ...errorDef };\n      self.errorsSent[errorDef.name].count = 0;\n      self.errorsSentCount++;\n    } else {\n      self.increamentErrorCount(errorDef.name);\n    }\n  }\n};\n\nErrorModel.prototype._buildPayload = function (errors) {\n  const arch = getClientArch();\n\n  return {\n    host: Kadira.options.hostname,\n    recordIPAddress: Kadira.options.recordIPAddress,\n    errors,\n    arch,\n    archVersion: getClientArchVersion(arch)\n  };\n};\n\nErrorModel.prototype._flushErrors = function () {\n  const errors = Object.values(this.errorsSent).filter(e => e.count > 0);\n\n  if (errors.length > 0) {\n    Kadira.send(this._buildPayload(errors), '/errors');\n  }\n\n  this.errorsSent = Object.create(null);\n};\n\nErrorModel.prototype.isErrorExists = function (name) {\n  return !!this.errorsSent[name];\n};\n\nErrorModel.prototype.increamentErrorCount = function (name) {\n  let error = this.errorsSent[name];\n  if (error) {\n    error.count++;\n  }\n};\n\nErrorModel.prototype.canSendErrors = function () {\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;\n};\n\nErrorModel.prototype.close = function () {\n  clearTimeout(this.intervalTimeoutHandler);\n};\n","/* global Zone */\n\nimport { getBrowserInfo, getErrorStack } from '../utils';\n\nif (window.Zone && Zone.inited) {\n  Zone.Reporters.add('kadira', kadiraZoneReporter);\n}\n\nfunction kadiraZoneReporter (zone) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  let errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);\n  if (Kadira.errors.isErrorExists(errorName)) {\n    Kadira.errors.increamentErrorCount(errorName);\n  } else if (Kadira.errors.canSendErrors()) {\n    getErrorStack(zone, function (stacks) {\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: errorName,\n        type: 'client',\n        startTime: zone.runAt,\n        subType: 'zone',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify(stacks),\n      });\n    });\n  }\n}\n","import { getBrowserInfo } from '../utils';\n\nlet prevWindowOnError = window.onerror || Function.prototype;\n\nfunction handleOnError (message, url, line, col, error) {\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return prevWindowOnError(message, url, line, col, error);\n  }\n\n  url = url || '<anonymous>';\n  line = line || 0;\n  col = col || 0;\n\n  let stack;\n  if (error) {\n    stack = error.stack;\n  } else {\n    stack = `Error:\\n    at window.onerror (${url}:${line}:${col})`;\n  }\n\n  let now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onerror',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        message,\n        url,\n        line,\n        col,\n        error\n      }\n    },\n    stacks: JSON.stringify([{at: now, events: [], stack}]),\n  });\n\n  return prevWindowOnError(message, url, line, col, error);\n}\n\nKadira._setupOnErrorReporter = function setupOnError () {\n  if (window.onerror !== handleOnError) {\n    prevWindowOnError = window.onerror || prevWindowOnError;\n\n    window.onerror = handleOnError;\n  }\n};\n\nKadira._setupOnErrorReporter();\n","import { Meteor } from 'meteor/meteor';\nimport { getBrowserInfo } from '../utils';\n\nlet originalMeteorDebug = Meteor._debug;\n\nlet lastMessageToIgnore = null;\nlet messagesToIgnore = 0;\n\n// Sometimes one of the other error reporter tracks an error, but Meteor also\n// sends the details to Meteor._debug. In some places, Meteor splits the\n// information across multiple Meteor._debug calls.\n//\n// Does not report Meteor._debug errors until it sees the given message\n// or it has ignored maxMessages.\nKadira._ignoreDebugMessagesUntil = function (message, maxMessages) {\n  lastMessageToIgnore = message;\n  messagesToIgnore = maxMessages;\n};\n\nMeteor._debug = function (m, s) {\n  // We need to assign variables like this. Otherwise,\n  // we can't see proper error messages.\n  // See: https://github.com/meteorhacks/kadira/issues/193\n  let message = m;\n  let stack = s;\n  let args = arguments;\n\n  function runOriginal () {\n    return originalMeteorDebug.apply(Meteor, args);\n  }\n\n  // track only if error tracking is enabled\n  if (!Kadira.options.enableErrorTracking) {\n    return runOriginal();\n  }\n\n  // do not track if a zone is available (let zone handle the error)\n  if (window.zone) {\n    return runOriginal();\n  }\n\n  // Do not report messages until either we see the\n  // lastMessageToIgnore or we have ignored the number of\n  // messages in messagesToIgnore\n  if (lastMessageToIgnore) {\n    if (message === lastMessageToIgnore || messagesToIgnore === 1) {\n      lastMessageToIgnore = null;\n      messagesToIgnore = 0;\n    } else {\n      messagesToIgnore -= 1;\n    }\n\n    return runOriginal();\n  }\n\n  // We hate Meteor._debug (no single usage pattern)\n  if (message instanceof Error) {\n    stack = message.stack;\n    message = message.message;\n  } else if (typeof message === 'string' && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  } else if (typeof message === 'string' && stack instanceof Error) {\n    const separator = message.endsWith(':') ? '' : ':';\n    message = `${message}${separator} ${stack.message}`;\n    stack = getStackFromMessage(stack.stack);\n  }\n\n  // sometimes Meteor._debug is called with the stack concat to the message\n  // FIXME Meteor._debug can be called in many ways\n  if (message && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n\n  let now = new Date().getTime();\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'meteor._debug',\n    info: getBrowserInfo(),\n    stacks: JSON.stringify([{at: now, events: [], stack}]),\n  });\n\n  return runOriginal();\n};\n\n// Identifies lines that are a stack trace frame:\n// 1. Has \"at\" proceeded and followed by at least one space\n// 2. Or has an \"@\" symbol\nlet stackRegex = /(^.*@.*$|^\\s+at\\s.+$)/gm;\nfunction getStackFromMessage (message) {\n  // add empty string to add the empty line at start\n  let stack = [''];\n  let match;\n  // eslint-disable-next-line no-cond-assign\n  while (match = stackRegex.exec(message)) {\n    stack.push(match[0]);\n  }\n  return stack.join('\\n');\n}\n\nfunction firstLine (message) {\n  return message.split('\\n')[0];\n}\n","import { getBrowserInfo } from '../utils';\n\nwindow.addEventListener('unhandledrejection', function (e) {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  let message = e.reason;\n  let stack = '';\n\n  if (typeof message === 'object' && message !== null) {\n    stack = message.stack;\n    message = message.message;\n  }\n\n  let now = new Date().getTime();\n\n  Kadira.errors.sendError({\n    appId: Kadira.options.appId,\n    name: message,\n    type: 'client',\n    startTime: now,\n    subType: 'window.onunhandledrejection',\n    info: getBrowserInfo(),\n    _internalDetails: {\n      origError: {\n        reason: e.reason,\n      }\n    },\n    stacks: JSON.stringify([{at: now, events: [], stack}])\n  });\n});\n","import { Tracker } from 'meteor/tracker';\nimport { getBrowserInfo } from '../utils';\n\nconst origCompute = Tracker.Computation.prototype._compute;\nconst origAfterFlush = Tracker.afterFlush;\nconst origRunFlush = Tracker._runFlush;\n\n// Internal variable in the Tracker package set during Tracker._runFlush\n// If it is true, Tracker throws the error instead of using Meteor._debug\n// In that case, we should not report the error in afterFlush and\n// instead let another reporter handle it\nlet throwFirstError = false;\n\nTracker._runFlush = function (options = {}) {\n  throwFirstError = !!options.throwFirstError;\n  return origRunFlush.apply(this, arguments);\n};\n\nTracker.afterFlush = function (func) {\n  return origAfterFlush(function () {\n    try {\n      return func();\n    } catch (e) {\n      if (Kadira.options.enableErrorTracking && !throwFirstError) {\n        let message = e.message;\n        let stack = e.stack;\n        let now = new Date().getTime();\n\n        Kadira.errors.sendError({\n          appId: Kadira.options.appId,\n          name: message,\n          type: 'client',\n          startTime: now,\n          subType: 'tracker.afterFlush',\n          info: getBrowserInfo(),\n          stacks: JSON.stringify([{at: now, events: [], stack}])\n        });\n\n        // Once the error is thrown, Tracker will call\n        // Meteor._debug 2 or 3 times. The last time will\n        // have the stack trace.\n        Kadira._ignoreDebugMessagesUntil(stack, 3);\n      }\n\n      throw e;\n    }\n  });\n};\n\nTracker.Computation.prototype._compute = function () {\n  try {\n    return origCompute.apply(this, arguments);\n  } catch (e) {\n    // During the first run, Tracker throws the error\n    // It will be handled by a different error reporter\n    if (Kadira.options.enableErrorTracking && !this.firstRun) {\n      let message = e.message;\n      let stack = e.stack;\n      let now = new Date().getTime();\n\n      Kadira.errors.sendError({\n        appId: Kadira.options.appId,\n        name: message,\n        type: 'client',\n        startTime: now,\n        subType: 'tracker.compute',\n        info: getBrowserInfo(),\n        stacks: JSON.stringify([{at: now, events: [], stack}])\n      });\n\n      // Once the error is thrown, Tracker will call\n      // Meteor._debug 2 or 3 times. The last time will\n      // have the stack trace.\n      Kadira._ignoreDebugMessagesUntil(stack, 3);\n    }\n\n    throw e;\n  }\n};\n","/* global Zone */\n\nimport { Meteor } from 'meteor/meteor';\nimport { getErrorParameters } from '../common/utils';\nimport { ErrorModel } from './models/errors';\nimport { Ntp } from '../ntp';\nimport { getBrowserInfo } from './utils';\nimport { httpRequest } from './httpRequest';\n\nKadira.enableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function () {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  if (Kadira.options.disableClientErrorTracking) {\n    return;\n  }\n\n  const { message, subType, stack } = getErrorParameters(arguments);\n\n  if (message) {\n    let now = new Date().getTime();\n\n    Kadira.errors.sendError({\n      appId: Kadira.options.appId,\n      name: message,\n      startTime: now,\n      type: 'client',\n      subType: subType || 'Monti.trackError',\n      info: getBrowserInfo(),\n      stacks: JSON.stringify([{ at: now, events: [], stack }]),\n    });\n  }\n};\n\n// Create new NTP object and error model immediately so it can be used\n// endpoints is set later using __meteor_runtime_config__ or publication\nKadira.syncedDate = new Ntp(null);\nKadira.errors = new ErrorModel({\n  waitForNtpSyncInterval: 1000 * 5, // 5 secs\n  intervalInMillis: 1000 * 60 * 1, // 1minutes\n  maxErrorsPerInterval: 5\n});\n\nlet initialized = false;\nfunction initialize (options = {}) {\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n\n  Kadira.options = {\n    errorDumpInterval: 1000 * 60,\n    maxErrorsPerInterval: 10,\n    collectAllStacks: false,\n    enableErrorTracking: false,\n    ...options,\n  };\n\n  if (Kadira.options.appId && Kadira.options.endpoint) {\n    // update endpoint after receiving correct data\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);\n    Kadira.syncedDate.isDisabled = Kadira.options.disableNtp;\n\n    Kadira.connected = true;\n    Meteor.startup(function () {\n      // if we don't do this might block the initial rendering\n      // or, it will show up bottom of the page, which is not cool\n      setTimeout(function () {\n        Kadira.syncedDate.sync();\n      }, Kadira.options.clientEngineSyncDelay);\n    });\n  }\n\n  if (Kadira.connected && Kadira.options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  }\n\n  if (window.Zone && Zone.inited) {\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;\n  }\n}\n\n// __meteor_runtime_config__ cannot be dynamically set for cordova apps\n// using a null subscription to send required options to client\nif (Meteor.isCordova) {\n  const SettingsCollection = new Meteor.Collection('kadira_settings');\n  SettingsCollection.find().observe({ added: initialize });\n} else {\n  initialize(__meteor_runtime_config__.kadira);\n}\n\nKadira._makeHttpRequest = httpRequest;\n","// For just making a notice\n// `montiapm:profiler` will override this method to add\n// actual functionality\nKadira.profileCpu = function profileCpu () {\n  const message =\n    'Please install montiapm:profiler' +\n    ' to take a CPU profile.';\n  console.log(message);\n};\n"]}}]