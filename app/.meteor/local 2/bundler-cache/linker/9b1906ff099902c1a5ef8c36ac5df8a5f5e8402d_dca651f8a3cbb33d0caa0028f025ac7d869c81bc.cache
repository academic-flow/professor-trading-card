[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Accounts, options, tokenExpires;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"client_main.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/client_main.js                                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  Accounts: () => Accounts,\n  AccountsClient: () => AccountsClient,\n  AccountsTest: () => AccountsTest,\n  default: () => exports\n});\nlet AccountsClient, AccountsTest;\nmodule.link(\"./accounts_client.js\", {\n  AccountsClient(v) {\n    AccountsClient = v;\n  },\n  AccountsTest(v) {\n    AccountsTest = v;\n  }\n}, 0);\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nmodule.runSetters(Accounts = new AccountsClient(), [\"Accounts\"]);\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_client.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_client.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  AccountsClient: () => AccountsClient,\n  AccountsTest: () => AccountsTest\n});\nlet AccountsCommon;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  }\n}, 0);\nclass AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n    this._loginServicesHandle = this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    this._loginCallbacksCalled = false;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" has been defined already\"));\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n    for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      funcArgs[_key - 1] = arguments[_key];\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(\"\".concat(funcName, \" was not defined\"));\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      this._loginCallbacksCalled = false;\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply('getNewToken', [], {\n      wait: true\n    }, (err, result) => {\n      if (!err) {\n        this._storeLoginToken(this.userId(), result.token, result.tokenExpires);\n      }\n    });\n    this.connection.apply('removeOtherTokens', [], {\n      wait: true\n    }, err => callback && callback(err));\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = _objectSpread({\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false\n    }, options);\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f]) options[f] = () => null;\n    });\n    let called;\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    const loginCallbacks = _ref => {\n      let {\n        error,\n        loginDetails\n      } = _ref;\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.forEach(callback => {\n            callback(loginDetails);\n            return true;\n          });\n          this._loginCallbacksCalled = true;\n        } else {\n          this._loginCallbacksCalled = false;\n          this._onLoginFailureHook.forEach(callback => {\n            callback({\n              error\n            });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    };\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{\n                resume: result.token\n              }],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({\n                  error,\n                  loginDetails\n                });\n              }\n            });\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected) return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\"No result from call to \".concat(options.methodName));\n        loginCallbacks({\n          error\n        });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({\n          error: e\n        });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({\n        loginDetails: result\n      });\n    };\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(options.methodName, options.methodArguments, {\n      wait: true,\n      onResultReceived: onResultReceived\n    }, loggedInAndDataReadyCallback);\n  }\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  }\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  }\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug('Ignoring unexpected duplicate page load login attempt info');\n      return;\n    }\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this._loginCallbacksCalled) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({\n        type: 'resume'\n      }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  }\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  }\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  }\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  }\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  }\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  }\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  }\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  }\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  }\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = \":\".concat(this.connection._stream.rawUrl);\n      if (rootUrlPathPrefix) {\n        namespace += \":\".concat(rootUrlPathPrefix);\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(\"Error logging in with token: \".concat(err));\n            this.makeClientLoggedOut();\n          }\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{\n              resume: token\n            }]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  }\n  _pollStoredLoginToken() {\n    if (!this._autoLoginEnabled) {\n      return;\n    }\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, err => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  }\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n\n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n\n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  }\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  }\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  }\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  }\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n    }\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  }\n}\n;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const {\n    Template\n  } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());\n}\nconst defaultSuccessHandler = function (token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n    const tokenRegex = new RegExp(\"^\\\\#\\\\/\".concat(urlPart, \"\\\\/(.*)$\"));\n    const match = hash.match(tokenRegex);\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n};\n\n// Export for testing\nconst AccountsTest = {\n  attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_common.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/accounts-base/accounts_common.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  AccountsCommon: () => AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS: () => EXPIRE_TOKENS_INTERVAL_MS\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\n// config option keys\nconst VALID_CONFIG_KEYS = ['sendVerificationEmail', 'forbidClientAccountCreation', 'passwordEnrollTokenExpiration', 'passwordEnrollTokenExpirationInDays', 'restrictCreationByEmailDomain', 'loginExpirationInDays', 'loginExpiration', 'passwordResetTokenExpirationInDays', 'passwordResetTokenExpiration', 'ambiguousErrorMessages', 'bcryptRounds', 'defaultFieldSelector', 'loginTokenExpirationHours', 'tokenSequenceLength', 'collection'];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nclass AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback'\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback'\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback'\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n  _initializeCollection(options) {\n    if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n      throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n    }\n    let collectionName = 'users';\n    if (typeof options.collection === 'string') {\n      collectionName = options.collection;\n    }\n    let collection;\n    if (options.collection instanceof Mongo.Collection) {\n      collection = options.collection;\n    } else {\n      collection = new Mongo.Collection(collectionName, {\n        _preventAutopublish: true,\n        connection: this.connection\n      });\n    }\n    return collection;\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error('userId method not implemented');\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields) return _objectSpread(_objectSpread({}, options), {}, {\n      fields: this._options.defaultFieldSelector\n    });\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]] ? options : _objectSpread(_objectSpread({}, options), {}, {\n      fields: _objectSpread(_objectSpread({}, options.fields), this._options.defaultFieldSelector)\n    });\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOne(userId, this._addDefaultFieldSelector(options)) : null;\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  async userAsync(options) {\n    const userId = this.userId();\n    return userId ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options)) : null;\n  }\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug('Accounts.config was called on the client but not on the ' + 'server; some configuration options may not take effect.');\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error('The oauthSecretKey option may only be specified on the server');\n      }\n      if (!Package['oauth-encryption']) {\n        throw new Error('The oauth-encryption package must be loaded to set oauthSecretKey');\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _objectSpread({}, options);\n      delete options.oauthSecretKey;\n    }\n\n    // Validate config options keys\n    Object.keys(options).forEach(key => {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n        throw new Meteor.Error(\"Accounts.config: Invalid key: \".concat(key));\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_CONFIG_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          if (key !== 'collection') {\n            throw new Meteor.Error(\"Can't set `\".concat(key, \"` more than once\"));\n          }\n        }\n        this._options[key] = options[key];\n      }\n    });\n    if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n      this.users = this._initializeCollection(options);\n    }\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n    return this._options.loginExpiration || (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000;\n  }\n  _getPasswordResetTokenLifetimeMs() {\n    return this._options.passwordResetTokenExpiration || (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n  _getPasswordEnrollTokenLifetimeMs() {\n    return this._options.passwordEnrollTokenExpiration || (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000;\n  }\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = options => Accounts.user(options);\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = options => Accounts.userAsync(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nconst EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;\n// 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/accounts-base/client_main.js\");\n\n/* Exports */\nPackage._define(\"accounts-base\", exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["packages/accounts-base/client_main.js","packages/accounts-base/accounts_client.js","packages/accounts-base/accounts_common.js"],"names":["module","export","Accounts","AccountsClient","AccountsTest","default","exports","link","v","runSetters","Meteor","users","_objectSpread","AccountsCommon","constructor","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","_initLocalStorage","_loginFuncs","_loginCallbacksCalled","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","concat","callLoginFunction","_len","arguments","length","funcArgs","Array","_key","apply","applyLoginFunction","logout","callback","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","callLoginMethod","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","_ref","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","_userId","_onLogoutHook","each","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","_startupCallback","setTimeout","type","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Package","blaze","Template","Blaze","registerHelper","user","urlPart","startup","accounts","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","EXPIRE_TOKENS_INTERVAL_MS","VALID_CONFIG_KEYS","_options","undefined","_initConnection","_initializeCollection","Hook","bindEnvironment","debugPrintExceptions","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","prototype","name","numericError","collection","Mongo","Collection","collectionName","_preventAutopublish","_addDefaultFieldSelector","defaultFieldSelector","fields","keys","Object","keys2","findOne","userAsync","findOneAsync","config","isServer","accountsConfigCalled","hasOwnProperty","isClient","OAuthEncryption","loadKey","oauthSecretKey","key","includes","_name","onLogin","ret","register","onLoginFailure","onLogout","ddpUrl","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS"],"mappings":"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;IACZ,MAAMiB,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;IAC5B,OAAOA,MAAM,GACT,IAAI,CAACrB,KAAK,CAACsL,OAAO,CAACjK,MAAM,EAAE,IAAI,CAAC2J,wBAAwB,CAAC5K,OAAO,CAAC,CAAC,GAClE,IAAI;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMmL,SAASA,CAACnL,OAAO,EAAE;IACvB,MAAMiB,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;IAC5B,OAAOA,MAAM,GACT,IAAI,CAACrB,KAAK,CAACwL,YAAY,CAACnK,MAAM,EAAE,IAAI,CAAC2J,wBAAwB,CAAC5K,OAAO,CAAC,CAAC,GACvE,IAAI;EACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqL,MAAMA,CAACrL,OAAO,EAAE;IACd;IACA;IACA;IACA;IACA;IACA,IAAIL,MAAM,CAAC2L,QAAQ,EAAE;MACnBpE,yBAAyB,CAACqE,oBAAoB,GAAG,IAAI;IACvD,CAAC,MAAM,IAAI,CAACrE,yBAAyB,CAACqE,oBAAoB,EAAE;MAC1D;MACA;MACA5L,MAAM,CAACkG,MAAM,CACX,0DAA0D,GACxD,yDACJ,CAAC;IACH;;IAEA;IACA;IACA;IACA,IAAImF,MAAM,CAACZ,SAAS,CAACoB,cAAc,CAACrC,IAAI,CAACnJ,OAAO,EAAE,gBAAgB,CAAC,EAAE;MACnE,IAAIL,MAAM,CAAC8L,QAAQ,EAAE;QACnB,MAAM,IAAI9J,KAAK,CACb,+DACF,CAAC;MACH;MACA,IAAI,CAACwG,OAAO,CAAC,kBAAkB,CAAC,EAAE;QAChC,MAAM,IAAIxG,KAAK,CACb,mEACF,CA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","file":"/packages/accounts-base.js","sourcesContent":["import {\n  AccountsClient,\n  AccountsTest,\n} from \"./accounts_client.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  Accounts,\n  AccountsClient,\n  AccountsTest,\n  // For backwards compatibility. Note that exporting an object as the\n  // default export is *not* the same as exporting its properties as named\n  // exports, as was previously assumed.\n  exports as default,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    this.savedHash = window.location.hash;\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    this._loginCallbacksCalled = false;\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    this._loggingOut.set(true);\n    this.connection.apply('logout', [], {\n      wait: true\n    }, (error, result) => {\n      this._loggingOut.set(false);\n      this._loginCallbacksCalled = false;\n      if (error) {\n        callback && callback(error);\n      } else {\n        this.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    this.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      (err, result) => {\n        if (! err) {\n          this._storeLoginToken(\n            this.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    this.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      err => callback && callback(err)\n    );\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  callLoginMethod(options) {\n    options = {\n      methodName: 'login',\n      methodArguments: [{}],\n      _suppressLoggingIn: false,\n      ...options,\n    };\n\n    // Set defaults for callback arguments to no-op functions; make sure we\n    // override falsey values too.\n    ['validateResult', 'userCallback'].forEach(f => {\n      if (!options[f])\n        options[f] = () => null;\n    });\n\n    let called;\n    // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n    const loginCallbacks = ({ error, loginDetails }) => {\n      if (!called) {\n        called = true;\n        if (!error) {\n          this._onLoginHook.forEach(callback => {\n            callback(loginDetails);\n            return true;\n          });\n          this._loginCallbacksCalled = true;\n        } else {\n          this._loginCallbacksCalled = false;\n          this._onLoginFailureHook.forEach(callback => {\n            callback({ error });\n            return true;\n          });\n        }\n        options.userCallback(error, loginDetails);\n      }\n    };\n\n    let reconnected = false;\n\n    // We want to set up onReconnect as soon as we get a result token back from\n    // the server, without having to wait for subscriptions to rerun. This is\n    // because if we disconnect and reconnect between getting the result and\n    // getting the results of subscription rerun, we WILL NOT re-send this\n    // method (because we never re-send methods whose results we've received)\n    // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n    // time. This will lead to makeClientLoggedIn(result.id) even though we\n    // haven't actually sent a login method!\n    //\n    // But by making sure that we send this \"resume\" login in that case (and\n    // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n    // client-side userId. (It's important that livedata_connection guarantees\n    // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n    // will occur before the callback from the resume login call.)\n    const onResultReceived = (err, result) => {\n      if (err || !result || !result.token) {\n        // Leave onReconnect alone if there was an error, so that if the user was\n        // already logged in they will still get logged in on reconnect.\n        // See issue #4970.\n      } else {\n        // First clear out any previously set Acccounts login onReconnect\n        // callback (to make sure we don't keep piling up duplicate callbacks,\n        // which would then all be triggered when reconnecting).\n        if (this._reconnectStopper) {\n          this._reconnectStopper.stop();\n        }\n\n        this._reconnectStopper = DDP.onReconnect(conn => {\n          if (conn != this.connection) {\n            return;\n          }\n          reconnected = true;\n          // If our token was updated in storage, use the latest one.\n          const storedToken = this._storedLoginToken();\n          if (storedToken) {\n            result = {\n              token: storedToken,\n              tokenExpires: this._storedLoginTokenExpires()\n            };\n          }\n          if (!result.tokenExpires)\n            result.tokenExpires = this._tokenExpiration(new Date());\n          if (this._tokenExpiresSoon(result.tokenExpires)) {\n            this.makeClientLoggedOut();\n          } else {\n            this.callLoginMethod({\n              methodArguments: [{resume: result.token}],\n              // Reconnect quiescence ensures that the user doesn't see an\n              // intermediate state before the login method finishes. So we don't\n              // need to show a logging-in animation.\n              _suppressLoggingIn: true,\n              userCallback: (error, loginDetails) => {\n                const storedTokenNow = this._storedLoginToken();\n                if (error) {\n                  // If we had a login error AND the current stored token is the\n                  // one that we tried to log in with, then declare ourselves\n                  // logged out. If there's a token in storage but it's not the\n                  // token that we tried to log in with, we don't know anything\n                  // about whether that token is valid or not, so do nothing. The\n                  // periodic localStorage poll will decide if we are logged in or\n                  // out with this token, if it hasn't already. Of course, even\n                  // with this check, another tab could insert a new valid token\n                  // immediately before we clear localStorage here, which would\n                  // lead to both tabs being logged out, but by checking the token\n                  // in storage right now we hope to make that unlikely to happen.\n                  //\n                  // If there is no token in storage right now, we don't have to\n                  // do anything; whatever code removed the token from storage was\n                  // responsible for calling `makeClientLoggedOut()`, or the\n                  // periodic localStorage poll will call `makeClientLoggedOut`\n                  // eventually if another tab wiped the token from storage.\n                  if (storedTokenNow && storedTokenNow === result.token) {\n                    this.makeClientLoggedOut();\n                  }\n                }\n                // Possibly a weird callback to call, but better than nothing if\n                // there is a reconnect between \"login result received\" and \"data\n                // ready\".\n                loginCallbacks({ error, loginDetails });\n              }});\n          }\n        });\n      }\n    };\n\n    // This callback is called once the local cache of the current-user\n    // subscription (and all subscriptions, in fact) are guaranteed to be up to\n    // date.\n    const loggedInAndDataReadyCallback = (error, result) => {\n      // If the login method returns its result but the connection is lost\n      // before the data is in the local cache, it'll set an onReconnect (see\n      // above). The onReconnect will try to log in using the token, and *it*\n      // will call userCallback via its own version of this\n      // loggedInAndDataReadyCallback. So we don't have to do anything here.\n      if (reconnected)\n        return;\n\n      // Note that we need to call this even if _suppressLoggingIn is true,\n      // because it could be matching a _setLoggingIn(true) from a\n      // half-completed pre-reconnect login method.\n      this._setLoggingIn(false);\n      if (error || !result) {\n        error = error || new Error(\n          `No result from call to ${options.methodName}`\n        );\n        loginCallbacks({ error });\n        return;\n      }\n      try {\n        options.validateResult(result);\n      } catch (e) {\n        loginCallbacks({ error: e });\n        return;\n      }\n\n      // Make the client logged in. (The user data should already be loaded!)\n      this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n      loginCallbacks({ loginDetails: result });\n    };\n\n    if (!options._suppressLoggingIn) {\n      this._setLoggingIn(true);\n    }\n    this.connection.apply(\n      options.methodName,\n      options.methodArguments,\n      { wait: true, onResultReceived: onResultReceived },\n      loggedInAndDataReadyCallback);\n  }\n\n  makeClientLoggedOut() {\n    // Ensure client was successfully logged in before running logout hooks.\n    if (this.connection._userId) {\n      this._onLogoutHook.each(callback => {\n        callback();\n        return true;\n      });\n    }\n    this._unstoreLoginToken();\n    this.connection.setUserId(null);\n    this._reconnectStopper && this._reconnectStopper.stop();\n  }\n\n  makeClientLoggedIn(userId, token, tokenExpires) {\n    this._storeLoginToken(userId, token, tokenExpires);\n    this.connection.setUserId(userId);\n  }\n\n  ///\n  /// LOGIN SERVICES\n  ///\n\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  loginServicesConfigured() {\n    return this._loginServicesHandle.ready();\n  };\n\n  // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  onPageLoadLogin(f) {\n    if (this._pageLoadLoginAttemptInfo) {\n      f(this._pageLoadLoginAttemptInfo);\n    } else {\n      this._pageLoadLoginCallbacks.push(f);\n    }\n  };\n\n  // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  _pageLoadLogin(attemptInfo) {\n    if (this._pageLoadLoginAttemptInfo) {\n      Meteor._debug(\n        'Ignoring unexpected duplicate page load login attempt info'\n      );\n      return;\n    }\n\n    this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = attemptInfo;\n  }\n\n  // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  _startupCallback(callback) {\n    // Are we already logged in?\n    if (this._loginCallbacksCalled) {\n      // If already logged in before handler is registered, it's safe to\n      // assume type is a 'resume', so we execute the callback at the end\n      // of the queue so that Meteor.startup can complete before any\n      // embedded onLogin callbacks would execute.\n      Meteor.setTimeout(() => callback({ type: 'resume' }), 0);\n    }\n  }\n\n  ///\n  /// LOGIN TOKENS\n  ///\n\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n\n  loginWithToken(token, callback) {\n    this.callLoginMethod({\n      methodArguments: [{\n        resume: token\n      }],\n      userCallback: callback\n    });\n  };\n\n  // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  _enableAutoLogin() {\n    this._autoLoginEnabled = true;\n    this._pollStoredLoginToken();\n  };\n\n  ///\n  /// STORING\n  ///\n\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  _isolateLoginTokenForTest() {\n    this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n    this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n  };\n\n  _storeLoginToken(userId, token, tokenExpires) {\n    Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n    if (! tokenExpires)\n      tokenExpires = this._tokenExpiration(new Date());\n    Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = token;\n  };\n\n  _unstoreLoginToken() {\n    Meteor._localStorage.removeItem(this.USER_ID_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n    Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n    // to ensure that the localstorage poller doesn't end up trying to\n    // connect a second time\n    this._lastLoginTokenWhenPolled = null;\n  };\n\n  // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  _storedLoginToken() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n  };\n\n  _storedLoginTokenExpires() {\n    return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n  };\n\n  _storedUserId() {\n    return Meteor._localStorage.getItem(this.USER_ID_KEY);\n  };\n\n  _unstoreLoginTokenIfExpiresSoon() {\n    const tokenExpires = this._storedLoginTokenExpires();\n    if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n      this._unstoreLoginToken();\n    }\n  };\n\n  ///\n  /// AUTO-LOGIN\n  ///\n\n  _initLocalStorage() {\n    // Key names to use in localStorage\n    this.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n    this.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n    this.USER_ID_KEY = \"Meteor.userId\";\n\n    const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n      // We want to keep using the same keys for existing apps that do not\n      // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n      // to log in again after an app updates to a version of Meteor that\n      // contains this code, but it's generally preferable to namespace the\n      // keys so that connections from distinct apps to distinct DDP URLs\n      // will be distinct in Meteor._localStorage.\n      let namespace = `:${this.connection._stream.rawUrl}`;\n      if (rootUrlPathPrefix) {\n        namespace += `:${rootUrlPathPrefix}`;\n      }\n      this.LOGIN_TOKEN_KEY += namespace;\n      this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n      this.USER_ID_KEY += namespace;\n    }\n\n    let token;\n    if (this._autoLoginEnabled) {\n      // Immediately try to log in via local storage, so that any DDP\n      // messages are sent after we have established our user account\n      this._unstoreLoginTokenIfExpiresSoon();\n      token = this._storedLoginToken();\n      if (token) {\n        // On startup, optimistically present us as logged in while the\n        // request is in flight. This reduces page flicker on startup.\n        const userId = this._storedUserId();\n        userId && this.connection.setUserId(userId);\n        this.loginWithToken(token, err => {\n          if (err) {\n            Meteor._debug(`Error logging in with token: ${err}`);\n            this.makeClientLoggedOut();\n          }\n\n          this._pageLoadLogin({\n            type: \"resume\",\n            allowed: !err,\n            error: err,\n            methodName: \"login\",\n            // XXX This is duplicate code with loginWithToken, but\n            // loginWithToken can also be called at other times besides\n            // page load.\n            methodArguments: [{resume: token}]\n          });\n        });\n      }\n    }\n\n    // Poll local storage every 3 seconds to login if someone logged in in\n    // another tab\n    this._lastLoginTokenWhenPolled = token;\n\n    if (this._pollIntervalTimer) {\n      // Unlikely that _initLocalStorage will be called more than once for\n      // the same AccountsClient instance, but just in case...\n      clearInterval(this._pollIntervalTimer);\n    }\n\n    this._pollIntervalTimer = setInterval(() => {\n      this._pollStoredLoginToken();\n    }, 3000);\n  };\n\n  _pollStoredLoginToken() {\n    if (! this._autoLoginEnabled) {\n      return;\n    }\n\n    const currentLoginToken = this._storedLoginToken();\n\n    // != instead of !== just to make sure undefined and null are treated the same\n    if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n      if (currentLoginToken) {\n        this.loginWithToken(currentLoginToken, (err) => {\n          if (err) {\n            this.makeClientLoggedOut();\n          }\n        });\n      } else {\n        this.logout();\n      }\n    }\n\n    this._lastLoginTokenWhenPolled = currentLoginToken;\n  };\n\n  ///\n  /// URLS\n  ///\n\n  _initUrlMatching() {\n    // By default, allow the autologin process to happen.\n    this._autoLoginEnabled = true;\n\n    // We only support one callback per URL.\n    this._accountsCallbacks = {};\n\n    // Try to match the saved value of window.location.hash.\n    this._attemptToMatchHash();\n  };\n\n  // Separate out this functionality for testing\n  _attemptToMatchHash() {\n    attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n  };\n\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  onResetPasswordLink(callback) {\n    if (this._accountsCallbacks[\"reset-password\"]) {\n      Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"reset-password\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  onEmailVerificationLink(callback) {\n    if (this._accountsCallbacks[\"verify-email\"]) {\n      Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"verify-email\"] = callback;\n  };\n\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  onEnrollmentLink(callback) {\n    if (this._accountsCallbacks[\"enroll-account\"]) {\n      Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n        \"Only one callback added will be executed.\");\n    }\n\n    this._accountsCallbacks[\"enroll-account\"] = callback;\n  };\n\n};\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = callback => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) =>\n  Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  const { Template } = Package.blaze.Blaze;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', () => Meteor.user());\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper(\n    'loggingInOrOut',\n    () => Meteor.loggingIn() || Meteor.loggingOut()\n  );\n}\n\nconst defaultSuccessHandler = function(token, urlPart) {\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(() => {\n    // if a callback has been registered for this kind of token, call it\n    if (this._accountsCallbacks[urlPart]) {\n      this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n    }\n  });\n}\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n  // All of the special hash URLs we support for accounts interactions\n  [\"reset-password\", \"verify-email\", \"enroll-account\"].forEach(urlPart => {\n    let token;\n\n    const tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n    const match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\n// Export for testing\nexport const AccountsTest = {\n  attemptToMatchHash: (hash, success) =>\n    attemptToMatchHash(Accounts, hash, success),\n};\n","import { Meteor } from 'meteor/meteor';\n\n// config option keys\nconst VALID_CONFIG_KEYS = [\n  'sendVerificationEmail',\n  'forbidClientAccountCreation',\n  'passwordEnrollTokenExpiration',\n  'passwordEnrollTokenExpirationInDays',\n  'restrictCreationByEmailDomain',\n  'loginExpirationInDays',\n  'loginExpiration',\n  'passwordResetTokenExpirationInDays',\n  'passwordResetTokenExpiration',\n  'ambiguousErrorMessages',\n  'bcryptRounds',\n  'defaultFieldSelector',\n  'loginTokenExpirationHours',\n  'tokenSequenceLength',\n  'collection',\n];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback',\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback',\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback',\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function(\n      description\n    ) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n\n  _initializeCollection(options) {\n    if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n      throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n    }\n\n    let collectionName = 'users';\n    if (typeof options.collection === 'string') {\n      collectionName = options.collection;\n    }\n\n    let collection;\n    if (options.collection instanceof Mongo.Collection) {\n      collection = options.collection;\n    } else {\n      collection = new Mongo.Collection(collectionName, {\n        _preventAutopublish: true,\n        connection: this.connection,\n      });\n    }\n\n    return collection;\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error('userId method not implemented');\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields)\n      return {\n        ...options,\n        fields: this._options.defaultFieldSelector,\n      };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]]\n      ? options\n      : {\n          ...options,\n          fields: {\n            ...options.fields,\n            ...this._options.defaultFieldSelector,\n          },\n        };\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOne(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  async userAsync(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\n        'Accounts.config was called on the client but not on the ' +\n          'server; some configuration options may not take effect.'\n      );\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\n          'The oauthSecretKey option may only be specified on the server'\n        );\n      }\n      if (!Package['oauth-encryption']) {\n        throw new Error(\n          'The oauth-encryption package must be loaded to set oauthSecretKey'\n        );\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(\n        options.oauthSecretKey\n      );\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // Validate config options keys\n    Object.keys(options).forEach(key => {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n        throw new Meteor.Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_CONFIG_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          if (key !== 'collection') {\n            throw new Meteor.Error(`Can't set \\`${key}\\` more than once`);\n          }\n        }\n        this._options[key] = options[key];\n      }\n    });\n\n    if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n      this.users = this._initializeCollection(options);\n    }\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (\n      typeof __meteor_runtime_config__ !== 'undefined' &&\n      __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n    ) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(\n        __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n      );\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      this._options.loginExpirationInDays === null\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (\n      this._options.loginExpiration ||\n      (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (\n      this._options.passwordResetTokenExpiration ||\n      (this._options.passwordResetTokenExpirationInDays ||\n        DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (\n      this._options.passwordEnrollTokenExpiration ||\n      (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = options => Accounts.user(options);\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = options => Accounts.userAsync(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n"]}}]