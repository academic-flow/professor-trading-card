{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/alanning:roles/roles/roles_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/alanning:roles/roles/roles_server.js","filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/alanning:roles/roles/roles_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/phatca/Documents/GitHub/professor-trading-card/app","root":"/Users/phatca/Documents/GitHub/professor-trading-card/app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/alanning:roles/roles/roles_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/alanning:roles/roles/roles_server.js"}},"code":"/* global Meteor, Roles */\nlet indexFnAssignment;\nlet indexFnRoles;\nif (Meteor.roles.createIndexAsync) {\n  indexFnAssignment = Meteor.roleAssignment.createIndexAsync.bind(Meteor.roleAssignment);\n  indexFnRoles = Meteor.roles.createIndexAsync.bind(Meteor.roles);\n} else if (Meteor.roles.createIndex) {\n  indexFnAssignment = Meteor.roleAssignment.createIndex.bind(Meteor.roleAssignment);\n  indexFnRoles = Meteor.roles.createIndex.bind(Meteor.roles);\n} else {\n  indexFnAssignment = Meteor.roleAssignment._ensureIndex.bind(Meteor.roleAssignment);\n  indexFnRoles = Meteor.roles._ensureIndex.bind(Meteor.roles);\n}\n[{\n  'user._id': 1,\n  'inheritedRoles._id': 1,\n  scope: 1\n}, {\n  'user._id': 1,\n  'role._id': 1,\n  scope: 1\n}, {\n  'role._id': 1\n}, {\n  scope: 1,\n  'user._id': 1,\n  'inheritedRoles._id': 1\n},\n// Adding userId and roleId might speed up other queries depending on the first index\n{\n  'inheritedRoles._id': 1\n}].forEach(index => indexFnAssignment(index));\nindexFnRoles({\n  'children._id': 1\n});\n\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  const loggedInUserId = this.userId;\n  const fields = {\n    roles: 1\n  };\n  if (!loggedInUserId) {\n    this.ready();\n    return;\n  }\n  return Meteor.users.find({\n    _id: loggedInUserId\n  }, {\n    fields\n  });\n});\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role;\n  },\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role);\n  },\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'object';\n  },\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'string' || typeof roles === 'object' && !Array.isArray(roles);\n  },\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) {\n      throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\");\n    }\n    return {\n      _id: oldRole.name,\n      children: []\n    };\n  },\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) {\n      throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\");\n    }\n    return {\n      name: newRole._id\n    };\n  },\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    const roles = [];\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) {\n          throw new Error(\"Role '\" + role + \"' is not a string.\");\n        }\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        });\n      });\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(_ref => {\n        let [group, rolesArray] = _ref;\n        if (group === '__global_roles__') {\n          group = null;\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.');\n        }\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) {\n            throw new Error(\"Role '\" + role + \"' is not a string.\");\n          }\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          });\n        });\n      });\n    }\n    return roles;\n  },\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    let roles;\n    if (usingGroups) {\n      roles = {};\n    } else {\n      roles = [];\n    }\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) {\n        throw new Error(\"Role '\" + userRole + \"' is not an object.\");\n      }\n\n      // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) {\n          throw new Error(\"Role '\" + userRole._id + \"' with scope '\" + userRole.scope + \"' without enabled groups.\");\n        }\n\n        // escape\n        const scope = userRole.scope.replace(/\\./g, '_');\n        if (scope[0] === '$') {\n          throw new Error(\"Group name '\" + scope + \"' start with $.\");\n        }\n        roles[scope] = roles[scope] || [];\n        roles[scope].push(userRole._id);\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || [];\n          roles.__global_roles__.push(userRole._id);\n        } else {\n          roles.push(userRole._id);\n        }\n      }\n    });\n    return roles;\n  },\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update({\n      _id: user._id,\n      // making sure nothing changed in meantime\n      roles: user.roles\n    }, {\n      $set: {\n        roles\n      }\n    });\n  },\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id);\n    Meteor.roles.insert(newRole);\n  },\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName);\n    } catch (e) {\n      const indexNotFound = /index not found/.test(e.message || e.err || e.errmsg);\n      if (!indexNotFound) {\n        throw e;\n      }\n    }\n  },\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser;\n    updateRole = updateRole || Roles._defaultUpdateRole;\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1');\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role));\n      }\n    });\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(user, Roles._convertToNewField(user.roles, convertUnderscoresToDots));\n      }\n    });\n  },\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {};\n    Object.assign(userSelector, {\n      roles: {\n        $ne: null\n      }\n    });\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles.filter(r => r.assigned).forEach(r => {\n        // Added `ifExists` to make it less error-prone\n        Roles._addUserToRole(user._id, r._id, {\n          scope: r.scope,\n          ifExists: true\n        });\n      });\n      Meteor.users.update({\n        _id: user._id\n      }, {\n        $unset: {\n          roles: ''\n        }\n      });\n    });\n\n    // No need to keep the indexes around\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1');\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1');\n  },\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser;\n    updateRole = updateRole || Roles._defaultUpdateRole;\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1');\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1');\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role));\n      }\n    });\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups));\n      }\n    });\n  },\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {};\n    if (Meteor.users.createIndex) {\n      Meteor.users.createIndex({\n        'roles._id': 1,\n        'roles.scope': 1\n      });\n      Meteor.users.createIndex({\n        'roles.scope': 1\n      });\n    } else {\n      Meteor.users._ensureIndex({\n        'roles._id': 1,\n        'roles.scope': 1\n      });\n      Meteor.users._ensureIndex({\n        'roles.scope': 1\n      });\n    }\n    Meteor.roleAssignment.find(assignmentSelector).forEach(r => {\n      const roles = Meteor.users.findOne({\n        _id: r.user._id\n      }).roles || [];\n      const currentRole = roles.find(oldRole => oldRole._id === r.role._id && oldRole.scope === r.scope);\n      if (currentRole) {\n        currentRole.assigned = true;\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        });\n        r.inheritedRoles.forEach(inheritedRole => {\n          const currentInheritedRole = roles.find(oldRole => oldRole._id === inheritedRole._id && oldRole.scope === r.scope);\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            });\n          }\n        });\n      }\n      Meteor.users.update({\n        _id: r.user._id\n      }, {\n        $set: {\n          roles\n        }\n      });\n      Meteor.roleAssignment.remove({\n        _id: r._id\n      });\n    });\n  }\n});","map":{"version":3,"names":["indexFnAssignment","indexFnRoles","Meteor","roles","createIndexAsync","roleAssignment","bind","createIndex","_ensureIndex","scope","forEach","index","publish","loggedInUserId","userId","fields","ready","users","find","_id","Object","assign","Roles","_isNewRole","role","_isOldRole","_isNewField","Array","isArray","_isOldField","_convertToNewRole","oldRole","name","Error","children","_convertToOldRole","newRole","_convertToNewField","oldRoles","convertUnderscoresToDots","push","assigned","entries","_ref","group","rolesArray","replace","_convertToOldField","newRoles","usingGroups","userRole","__global_roles__","_defaultUpdateUser","user","update","$set","_defaultUpdateRole","remove","insert","_dropCollectionIndex","collection","indexName","_dropIndex","e","indexNotFound","test","message","err","errmsg","_forwardMigrate","updateUser","updateRole","cursor","_forwardMigrate2","userSelector","$ne","filter","r","_addUserToRole","ifExists","$unset","_backwardMigrate","_backwardMigrate2","assignmentSelector","findOne","currentRole","inheritedRoles","inheritedRole","currentInheritedRole"],"sources":["packages/alanning:roles/roles/roles_server.js"],"sourcesContent":["/* global Meteor, Roles */\nlet indexFnAssignment\nlet indexFnRoles\n\nif (Meteor.roles.createIndexAsync) {\n  indexFnAssignment = Meteor.roleAssignment.createIndexAsync.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles.createIndexAsync.bind(Meteor.roles)\n} else if (Meteor.roles.createIndex) {\n  indexFnAssignment = Meteor.roleAssignment.createIndex.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles.createIndex.bind(Meteor.roles)\n} else {\n  indexFnAssignment = Meteor.roleAssignment._ensureIndex.bind(Meteor.roleAssignment)\n  indexFnRoles = Meteor.roles._ensureIndex.bind(Meteor.roles)\n}\n\n[\n  { 'user._id': 1, 'inheritedRoles._id': 1, scope: 1 },\n  { 'user._id': 1, 'role._id': 1, scope: 1 },\n  { 'role._id': 1 },\n  { scope: 1, 'user._id': 1, 'inheritedRoles._id': 1 }, // Adding userId and roleId might speed up other queries depending on the first index\n  { 'inheritedRoles._id': 1 }\n].forEach(index => indexFnAssignment(index))\nindexFnRoles({ 'children._id': 1 })\n\n/*\n * Publish logged-in user's roles so client-side checks can work.\n *\n * Use a named publish function so clients can check `ready()` state.\n */\nMeteor.publish('_roles', function () {\n  const loggedInUserId = this.userId\n  const fields = { roles: 1 }\n\n  if (!loggedInUserId) {\n    this.ready()\n    return\n  }\n\n  return Meteor.users.find(\n    { _id: loggedInUserId },\n    { fields }\n  )\n})\n\nObject.assign(Roles, {\n  /**\n   * @method _isNewRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewRole: function (role) {\n    return !('name' in role) && 'children' in role\n  },\n\n  /**\n   * @method _isOldRole\n   * @param {Object} role `Meteor.roles` document.\n   * @return {Boolean} Returns `true` if the `role` is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldRole: function (role) {\n    return 'name' in role && !('children' in role)\n  },\n\n  /**\n   * @method _isNewField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the new format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isNewField: function (roles) {\n    return Array.isArray(roles) && typeof roles[0] === 'object'\n  },\n\n  /**\n   * @method _isOldField\n   * @param {Array} roles `Meteor.users` document `roles` field.\n   * @return {Boolean} Returns `true` if the `roles` field is in the old format.\n   *                   If it is ambiguous or it is not, returns `false`.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _isOldField: function (roles) {\n    return (\n      (Array.isArray(roles) && typeof roles[0] === 'string') ||\n      (typeof roles === 'object' && !Array.isArray(roles))\n    )\n  },\n\n  /**\n   * @method _convertToNewRole\n   * @param {Object} oldRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewRole: function (oldRole) {\n    if (!(typeof oldRole.name === 'string')) { throw new Error(\"Role name '\" + oldRole.name + \"' is not a string.\") }\n\n    return {\n      _id: oldRole.name,\n      children: []\n    }\n  },\n\n  /**\n   * @method _convertToOldRole\n   * @param {Object} newRole `Meteor.roles` document.\n   * @return {Object} Converted `role` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldRole: function (newRole) {\n    if (!(typeof newRole._id === 'string')) { throw new Error(\"Role name '\" + newRole._id + \"' is not a string.\") }\n\n    return {\n      name: newRole._id\n    }\n  },\n\n  /**\n   * @method _convertToNewField\n   * @param {Array} oldRoles `Meteor.users` document `roles` field in the old format.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @return {Array} Converted `roles` to the new format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToNewField: function (oldRoles, convertUnderscoresToDots) {\n    const roles = []\n    if (Array.isArray(oldRoles)) {\n      oldRoles.forEach(function (role, index) {\n        if (!(typeof role === 'string')) { throw new Error(\"Role '\" + role + \"' is not a string.\") }\n\n        roles.push({\n          _id: role,\n          scope: null,\n          assigned: true\n        })\n      })\n    } else if (typeof oldRoles === 'object') {\n      Object.entries(oldRoles).forEach(([group, rolesArray]) => {\n        if (group === '__global_roles__') {\n          group = null\n        } else if (convertUnderscoresToDots) {\n          // unescape\n          group = group.replace(/_/g, '.')\n        }\n\n        rolesArray.forEach(function (role) {\n          if (!(typeof role === 'string')) { throw new Error(\"Role '\" + role + \"' is not a string.\") }\n\n          roles.push({\n            _id: role,\n            scope: group,\n            assigned: true\n          })\n        })\n      })\n    }\n    return roles\n  },\n\n  /**\n   * @method _convertToOldField\n   * @param {Array} newRoles `Meteor.users` document `roles` field in the new format.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @return {Array} Converted `roles` to the old format.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _convertToOldField: function (newRoles, usingGroups) {\n    let roles\n\n    if (usingGroups) {\n      roles = {}\n    } else {\n      roles = []\n    }\n\n    newRoles.forEach(function (userRole) {\n      if (!(typeof userRole === 'object')) { throw new Error(\"Role '\" + userRole + \"' is not an object.\") }\n\n      // We assume that we are converting back a failed migration, so values can only be\n      // what were valid values in 1.0. So no group names starting with $ and no subroles.\n\n      if (userRole.scope) {\n        if (!usingGroups) {\n          throw new Error(\n            \"Role '\" +\n              userRole._id +\n              \"' with scope '\" +\n              userRole.scope +\n              \"' without enabled groups.\"\n          )\n        }\n\n        // escape\n        const scope = userRole.scope.replace(/\\./g, '_')\n\n        if (scope[0] === '$') { throw new Error(\"Group name '\" + scope + \"' start with $.\") }\n\n        roles[scope] = roles[scope] || []\n        roles[scope].push(userRole._id)\n      } else {\n        if (usingGroups) {\n          roles.__global_roles__ = roles.__global_roles__ || []\n          roles.__global_roles__.push(userRole._id)\n        } else {\n          roles.push(userRole._id)\n        }\n      }\n    })\n    return roles\n  },\n\n  /**\n   * @method _defaultUpdateUser\n   * @param {Object} user `Meteor.users` document.\n   * @param {Array|Object} roles Value to which user's `roles` field should be set.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateUser: function (user, roles) {\n    Meteor.users.update(\n      {\n        _id: user._id,\n        // making sure nothing changed in meantime\n        roles: user.roles\n      },\n      {\n        $set: { roles }\n      }\n    )\n  },\n\n  /**\n   * @method _defaultUpdateRole\n   * @param {Object} oldRole Old `Meteor.roles` document.\n   * @param {Object} newRole New `Meteor.roles` document.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _defaultUpdateRole: function (oldRole, newRole) {\n    Meteor.roles.remove(oldRole._id)\n    Meteor.roles.insert(newRole)\n  },\n\n  /**\n   * @method _dropCollectionIndex\n   * @param {Object} collection Collection on which to drop the index.\n   * @param {String} indexName Name of the index to drop.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _dropCollectionIndex: function (collection, indexName) {\n    try {\n      collection._dropIndex(indexName)\n    } catch (e) {\n      const indexNotFound = /index not found/.test(e.message || e.err || e.errmsg)\n\n      if (!indexNotFound) {\n        throw e\n      }\n    }\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the new format.\n   *\n   * @method _forwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} convertUnderscoresToDots Should we convert underscores to dots in group names.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate: function (updateUser, updateRole, convertUnderscoresToDots) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.roles, 'name_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isNewRole(role)) {\n        updateRole(role, Roles._convertToNewRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isNewField(user.roles)) {\n        updateUser(\n          user,\n          Roles._convertToNewField(user.roles, convertUnderscoresToDots)\n        )\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.users` to `Meteor.roleAssignment`.\n   *\n   * @method _forwardMigrate2\n   * @param {Object} userSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _forwardMigrate2: function (userSelector) {\n    userSelector = userSelector || {}\n    Object.assign(userSelector, { roles: { $ne: null } })\n\n    Meteor.users.find(userSelector).forEach(function (user, index) {\n      user.roles\n        .filter((r) => r.assigned)\n        .forEach((r) => {\n          // Added `ifExists` to make it less error-prone\n          Roles._addUserToRole(user._id, r._id, {\n            scope: r.scope,\n            ifExists: true\n          })\n        })\n\n      Meteor.users.update({ _id: user._id }, { $unset: { roles: '' } })\n    })\n\n    // No need to keep the indexes around\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n  },\n\n  /**\n   * Migrates `Meteor.users` and `Meteor.roles` to the old format.\n   *\n   * We assume that we are converting back a failed migration, so values can only be\n   * what were valid values in the old format. So no group names starting with `$` and\n   * no subroles.\n   *\n   * @method _backwardMigrate\n   * @param {Function} updateUser Function which updates the user object. Default `_defaultUpdateUser`.\n   * @param {Function} updateRole Function which updates the role object. Default `_defaultUpdateRole`.\n   * @param {Boolean} usingGroups Should we use groups or not.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate: function (updateUser, updateRole, usingGroups) {\n    updateUser = updateUser || Roles._defaultUpdateUser\n    updateRole = updateRole || Roles._defaultUpdateRole\n\n    Roles._dropCollectionIndex(Meteor.users, 'roles._id_1_roles.scope_1')\n    Roles._dropCollectionIndex(Meteor.users, 'roles.scope_1')\n\n    Meteor.roles.find().forEach(function (role, index, cursor) {\n      if (!Roles._isOldRole(role)) {\n        updateRole(role, Roles._convertToOldRole(role))\n      }\n    })\n\n    Meteor.users.find().forEach(function (user, index, cursor) {\n      if (!Roles._isOldField(user.roles)) {\n        updateUser(user, Roles._convertToOldField(user.roles, usingGroups))\n      }\n    })\n  },\n\n  /**\n   * Moves the assignments from `Meteor.roleAssignment` back to to `Meteor.users`.\n   *\n   * @method _backwardMigrate2\n   * @param {Object} assignmentSelector An opportunity to share the work among instances. It's advisable to do the division based on user-id.\n   * @for Roles\n   * @private\n   * @static\n   */\n  _backwardMigrate2: function (assignmentSelector) {\n    assignmentSelector = assignmentSelector || {}\n\n    if (Meteor.users.createIndex) {\n      Meteor.users.createIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users.createIndex({ 'roles.scope': 1 })\n    } else {\n      Meteor.users._ensureIndex({ 'roles._id': 1, 'roles.scope': 1 })\n      Meteor.users._ensureIndex({ 'roles.scope': 1 })\n    }\n\n    Meteor.roleAssignment.find(assignmentSelector).forEach((r) => {\n      const roles = Meteor.users.findOne({ _id: r.user._id }).roles || []\n\n      const currentRole = roles.find(\n        (oldRole) => oldRole._id === r.role._id && oldRole.scope === r.scope\n      )\n      if (currentRole) {\n        currentRole.assigned = true\n      } else {\n        roles.push({\n          _id: r.role._id,\n          scope: r.scope,\n          assigned: true\n        })\n\n        r.inheritedRoles.forEach((inheritedRole) => {\n          const currentInheritedRole = roles.find(\n            (oldRole) =>\n              oldRole._id === inheritedRole._id && oldRole.scope === r.scope\n          )\n\n          if (!currentInheritedRole) {\n            roles.push({\n              _id: inheritedRole._id,\n              scope: r.scope,\n              assigned: false\n            })\n          }\n        })\n      }\n\n      Meteor.users.update({ _id: r.user._id }, { $set: { roles } })\n      Meteor.roleAssignment.remove({ _id: r._id })\n    })\n  }\n})\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"d9b847ee88c5a2eeedb6a643b236ba163a838940"}
