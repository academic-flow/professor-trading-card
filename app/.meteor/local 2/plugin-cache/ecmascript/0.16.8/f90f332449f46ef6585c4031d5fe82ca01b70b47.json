{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/kadira.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/montiapm:agent/lib/kadira.js","filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/kadira.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/phatca/Documents/GitHub/professor-trading-card/app","root":"/Users/phatca/Documents/GitHub/professor-trading-card/app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/montiapm:agent/lib/kadira.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/montiapm:agent/lib/kadira.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n}, 1);\nlet _;\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n}, 2);\nlet ErrorModel;\nmodule.link(\"./models/errors\", {\n  ErrorModel(v) {\n    ErrorModel = v;\n  }\n}, 3);\nlet HttpModel;\nmodule.link(\"./models/http\", {\n  HttpModel(v) {\n    HttpModel = v;\n  }\n}, 4);\nlet MethodsModel;\nmodule.link(\"./models/methods\", {\n  MethodsModel(v) {\n    MethodsModel = v;\n  }\n}, 5);\nlet PubsubModel;\nmodule.link(\"./models/pubsub\", {\n  PubsubModel(v) {\n    PubsubModel = v;\n  }\n}, 6);\nlet SystemModel;\nmodule.link(\"./models/system\", {\n  SystemModel(v) {\n    SystemModel = v;\n  }\n}, 7);\nlet packageMap;\nmodule.link(\"./.meteor-package-versions\", {\n  default(v) {\n    packageMap = v;\n  }\n}, 8);\nlet getErrorParameters;\nmodule.link(\"./common/utils\", {\n  getErrorParameters(v) {\n    getErrorParameters = v;\n  }\n}, 9);\nlet WaitTimeBuilder;\nmodule.link(\"./wait_time_builder\", {\n  WaitTimeBuilder(v) {\n    WaitTimeBuilder = v;\n  }\n}, 10);\nlet DocSzCache;\nmodule.link(\"./docsize_cache\", {\n  DocSzCache(v) {\n    DocSzCache = v;\n  }\n}, 11);\nlet Ntp;\nmodule.link(\"./ntp\", {\n  Ntp(v) {\n    Ntp = v;\n  }\n}, 12);\nlet getClientVersions;\nmodule.link(\"./utils\", {\n  getClientVersions(v) {\n    getClientVersions = v;\n  }\n}, 13);\nlet handleApiResponse;\nmodule.link(\"./sourcemaps\", {\n  handleApiResponse(v) {\n    handleApiResponse = v;\n  }\n}, 14);\nlet TrackMeteorDebug, TrackUncaughtExceptions, TrackUnhandledRejections;\nmodule.link(\"./hijack/error\", {\n  TrackMeteorDebug(v) {\n    TrackMeteorDebug = v;\n  },\n  TrackUncaughtExceptions(v) {\n    TrackUncaughtExceptions = v;\n  },\n  TrackUnhandledRejections(v) {\n    TrackUnhandledRejections = v;\n  }\n}, 15);\nconst hostname = Npm.require('os').hostname();\nconst logger = Npm.require('debug')('kadira:apm');\nconst Fibers = Npm.require('fibers');\nconst KadiraCore = Npm.require('monti-apm-core').Kadira;\nconst DEBUG_PAYLOAD_SIZE = process.env.MONTI_DEBUG_PAYLOAD_SIZE === 'true';\nKadira.models = {};\nKadira.options = {};\nKadira.env = {\n  currentSub: null,\n  // keep current subscription inside ddp\n  kadiraInfo: new Meteor.EnvironmentVariable()\n};\nKadira.waitTimeBuilder = new WaitTimeBuilder();\nKadira.errors = [];\nKadira.errors.addFilter = Kadira.errors.push.bind(Kadira.errors);\nKadira.models.methods = new MethodsModel();\nKadira.models.pubsub = new PubsubModel();\nKadira.models.system = new SystemModel();\nKadira.models.http = new HttpModel();\nKadira.docSzCache = new DocSzCache(100000, 10);\nKadira.syncedDate = new Ntp();\n\n// If the agent is not connected, we still want to build the payload occasionally\n// since building the payload does some cleanup to prevent memory leaks\n// Once connected, this interval is cleared\nlet buildInterval = Meteor.setInterval(() => {\n  Kadira._buildPayload();\n}, 1000 * 60);\nKadira.connect = function (appId, appSecret, options) {\n  if (Kadira.connected) {\n    console.log('Monti APM: Already Connected');\n    return;\n  }\n  options = options || {};\n  options.appId = appId;\n  options.appSecret = appSecret;\n  options.payloadTimeout = options.payloadTimeout || 1000 * 20;\n  options.endpoint = options.endpoint || 'https://engine.montiapm.com';\n  options.clientEngineSyncDelay = options.clientEngineSyncDelay || 10000;\n  options.thresholds = options.thresholds || {};\n  options.isHostNameSet = !!options.hostname;\n  options.hostname = options.hostname || hostname;\n  options.proxy = options.proxy || null;\n  options.recordIPAddress = options.recordIPAddress || 'full';\n  options.eventStackTrace = options.eventStackTrace || false;\n  options.stalledTimeout = options.stalledTimeout || 1000 * 60 * 30;\n  options.disableClientErrorTracking = options.disableClientErrorTracking || false;\n  if (options.documentSizeCacheSize) {\n    Kadira.docSzCache = new DocSzCache(options.documentSizeCacheSize, 10);\n  }\n\n  // remove trailing slash from endpoint url (if any)\n  if (_.last(options.endpoint) === '/') {\n    options.endpoint = options.endpoint.substr(0, options.endpoint.length - 1);\n  }\n\n  // error tracking is enabled by default\n  if (options.enableErrorTracking === undefined) {\n    options.enableErrorTracking = true;\n  }\n\n  // uploading sourcemaps is enabled by default in production\n  if (options.uploadSourceMaps === undefined && Meteor.isProduction) {\n    options.uploadSourceMaps = true;\n  }\n  Kadira.options = options;\n  Kadira.options.authHeaders = {\n    'KADIRA-APP-ID': Kadira.options.appId,\n    'KADIRA-APP-SECRET': Kadira.options.appSecret\n  };\n  if (appId && appSecret) {\n    options.appId = options.appId.trim();\n    options.appSecret = options.appSecret.trim();\n    Kadira.coreApi = new KadiraCore({\n      appId: options.appId,\n      appSecret: options.appSecret,\n      endpoint: options.endpoint,\n      hostname: options.hostname,\n      agentVersion: packageMap['montiapm:agent'] || '<unknown>'\n    });\n    Kadira.coreApi._headers['METEOR-RELEASE'] = Meteor.release.replace('METEOR@', '');\n    Kadira.coreApi._checkAuth().then(function () {\n      logger('connected to app: ', appId);\n      console.log('Monti APM: Connected');\n      Kadira._sendAppStats();\n      Kadira._schedulePayloadSend();\n    }).catch(function (err) {\n      if (err.message === 'Unauthorized') {\n        console.log('Monti APM: Authentication failed, check your \"appId\" & \"appSecret\"');\n      } else {\n        console.log(\"Monti APM: Unable to connect. \".concat(err.message));\n      }\n    });\n  } else {\n    throw new Error('Monti APM: required appId and appSecret');\n  }\n  Kadira.syncedDate = new Ntp(options);\n  Kadira.syncedDate.sync();\n  Kadira.models.error = new ErrorModel(appId);\n\n  // handle pre-added filters\n  let addFilterFn = Kadira.models.error.addFilter.bind(Kadira.models.error);\n  Kadira.errors.forEach(addFilterFn);\n  Kadira.errors = Kadira.models.error;\n\n  // setting runtime info, which will be sent to kadira\n  __meteor_runtime_config__.kadira = {\n    appId,\n    endpoint: options.endpoint,\n    clientEngineSyncDelay: options.clientEngineSyncDelay,\n    recordIPAddress: options.recordIPAddress,\n    disableNtp: options.disableNtp,\n    disableClientErrorTracking: options.disableClientErrorTracking\n  };\n  if (options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  } else {\n    Kadira.disableErrorTracking();\n  }\n\n  // start tracking errors\n  Meteor.startup(function () {\n    TrackUncaughtExceptions();\n    TrackUnhandledRejections();\n    TrackMeteorDebug();\n  });\n  Meteor.publish(null, function () {\n    let _options = __meteor_runtime_config__.kadira;\n    this.added('kadira_settings', Random.id(), _options);\n    this.ready();\n  });\n\n  // notify we've connected\n  Kadira.connected = true;\n};\n\n// track how many times we've sent the data (once per minute)\nKadira._buildPayload = function () {\n  let payload = {\n    host: Kadira.options.hostname,\n    clientVersions: getClientVersions()\n  };\n  let buildDetailedInfo = Kadira._isDetailedInfo();\n  _.extend(payload, Kadira.models.methods.buildPayload(buildDetailedInfo));\n  _.extend(payload, Kadira.models.pubsub.buildPayload(buildDetailedInfo));\n  _.extend(payload, Kadira.models.system.buildPayload());\n  _.extend(payload, Kadira.models.http.buildPayload());\n  if (Kadira.options.enableErrorTracking) {\n    _.extend(payload, Kadira.models.error.buildPayload());\n  }\n  return payload;\n};\nKadira._countDataSent = 0;\nKadira._detailInfoSentInterval = Math.ceil(1000 * 60 / Kadira.options.payloadTimeout);\nKadira._isDetailedInfo = function () {\n  return Kadira._countDataSent++ % Kadira._detailInfoSentInterval === 0;\n};\nKadira._sendAppStats = function () {\n  let appStats = {};\n  appStats.release = Meteor.release;\n  appStats.protocolVersion = '1.0.0';\n  appStats.packageVersions = [];\n  appStats.clientVersions = getClientVersions();\n  _.each(Package, function (v, name) {\n    appStats.packageVersions.push({\n      name,\n      version: packageMap[name] || null\n    });\n  });\n  Kadira.coreApi.sendData({\n    startTime: new Date(),\n    appStats\n  }).then(function (body) {\n    handleApiResponse(body);\n  }).catch(function (err) {\n    console.error('Monti APM Error on sending appStats:', err.message);\n  });\n};\nKadira._schedulePayloadSend = function () {\n  clearInterval(buildInterval);\n  setTimeout(function () {\n    Kadira._schedulePayloadSend();\n    Kadira._sendPayload();\n  }, Kadira.options.payloadTimeout);\n};\nfunction logPayload(payload) {\n  let traceCount = payload.methodRequests.length + payload.pubRequests.length + payload.httpRequests.length + payload.errors.length;\n  let largestTrace = {\n    size: 0,\n    content: ''\n  };\n\n  // eslint-disable-next-line no-inner-declarations\n  function countBreakdowns(breakdowns, field) {\n    let result = 0;\n    breakdowns.forEach(entry => {\n      result += Object.keys(entry[field]).length;\n    });\n    return result;\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function sizeTraces(traces) {\n    let histogram = Object.create(null);\n    let total = 0;\n    traces.forEach(trace => {\n      const stringified = JSON.stringify(trace);\n      let length = stringified.length;\n      total += length;\n      if (length > largestTrace.size) {\n        largestTrace = {\n          size: length,\n          content: stringified\n        };\n      }\n      let normalized = length - length % 500;\n      histogram[normalized] = histogram[normalized] || 0;\n      histogram[normalized] += 1;\n    });\n    histogram.total = total;\n    return Object.entries(histogram).map(_ref => {\n      let [k, v] = _ref;\n      return \"\".concat(k, \": \").concat(v);\n    }).join(', ');\n  }\n  console.log('------- APM Payload Metrics -------');\n  console.log(\"methods: \".concat(countBreakdowns(payload.methodMetrics, 'methods')));\n  console.log(\"pubs: \".concat(countBreakdowns(payload.pubMetrics, 'pubs')));\n  console.log(\"routes: \".concat(countBreakdowns(payload.httpMetrics, 'routes')));\n  console.log(\"errors: \".concat(payload.errors.length));\n  console.log(\"traces: \".concat(traceCount));\n  console.log('Method trace sizes:', sizeTraces(payload.methodRequests));\n  console.log('Pub trace sizes:', sizeTraces(payload.pubRequests));\n  console.log('HTTP trace sizes:', sizeTraces(payload.httpRequests));\n  console.log('Error trace sizes:', sizeTraces(payload.errors));\n  console.log('Largest trace:', largestTrace);\n  console.log('------- ------------------- -------');\n}\nKadira._sendPayload = function () {\n  new Fibers(function () {\n    let payload = Kadira._buildPayload();\n    if (DEBUG_PAYLOAD_SIZE) {\n      logPayload(payload);\n    }\n    function send() {\n      return Kadira.coreApi.sendData(payload).then(function (body) {\n        handleApiResponse(body);\n      });\n    }\n    function logErr(err) {\n      console.log('Monti APM Error:', 'while sending payload to Monti APM:', err.message);\n    }\n    send().catch(function (err) {\n      // Likely is RangeError: Invalid string length\n      // This probably means we are close to running out of memory.\n      if (err instanceof RangeError) {\n        console.log('Monti APM: payload was too large to send to Monti APM. Resending without traces');\n        payload.methodRequests = undefined;\n        payload.httpRequests = undefined;\n        payload.pubRequests = undefined;\n        send().catch(logErr);\n      } else {\n        logErr(err);\n      }\n    });\n  }).run();\n};\n\n// this return the __kadiraInfo from the current Fiber by default\n// if called with 2nd argument as true, it will get the kadira info from\n// Meteor.EnvironmentVariable\n//\n// WARNNING: returned info object is the reference object.\n//  Changing it might cause issues when building traces. So use with care\nKadira._getInfo = function (currentFiber, useEnvironmentVariable) {\n  currentFiber = currentFiber || Fibers.current;\n  if (currentFiber) {\n    if (useEnvironmentVariable) {\n      return Kadira.env.kadiraInfo.get();\n    }\n    return currentFiber.__kadiraInfo;\n  }\n};\n\n// this does not clone the info object. So, use with care\nKadira._setInfo = function (info) {\n  Fibers.current.__kadiraInfo = info;\n};\nKadira.startContinuousProfiling = function () {\n  MontiProfiler.startContinuous(function onProfile(_ref2) {\n    let {\n      profile,\n      startTime,\n      endTime\n    } = _ref2;\n    if (!Kadira.connected) {\n      return;\n    }\n    Kadira.coreApi.sendData({\n      profiles: [{\n        profile,\n        startTime,\n        endTime\n      }]\n    }).catch(e => console.log('Monti: err sending cpu profile', e));\n  });\n};\n\n/**\n * @warning Mutating the `__meteor_runtime_config__` object does not propagate in real-time to the client, only if the\n * version changes and the client refreshes it seems. In the future we might want to change that into a reactive approach.\n */\n\nKadira.enableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = true;\n  Kadira.options.enableErrorTracking = true;\n};\nKadira.disableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = false;\n  Kadira.options.enableErrorTracking = false;\n};\nKadira.disableClientErrorTracking = function () {\n  __meteor_runtime_config__.kadira.disableClientErrorTracking = Kadira.options.disableClientErrorTracking = true;\n};\nKadira.enableClientErrorTracking = function () {\n  __meteor_runtime_config__.kadira.disableClientErrorTracking = Kadira.options.disableClientErrorTracking = false;\n};\nKadira.trackError = function () {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n  const {\n    message,\n    subType,\n    stack,\n    type,\n    kadiraInfo = Kadira._getInfo()\n  } = getErrorParameters(arguments);\n  const now = Ntp._now();\n  const previousEvents = kadiraInfo && kadiraInfo.trace ? kadiraInfo.trace.events : [{\n    type: 'start',\n    at: now,\n    endAt: now\n  }];\n  const events = Kadira.tracer.optimizeEvents(previousEvents).concat([['error', 0, {\n    error: {\n      message,\n      stack\n    }\n  }]]);\n  if (message) {\n    let trace = {\n      type: type || 'server-internal',\n      subType: subType || 'server',\n      name: message,\n      errored: true,\n      at: Kadira.syncedDate.getTime(),\n      events,\n      metrics: {\n        total: 0\n      }\n    };\n    Kadira.models.error.trackError({\n      message,\n      stack\n    }, trace);\n  }\n};\nKadira.ignoreErrorTracking = function (err) {\n  err._skipKadira = true;\n};\nKadira.startEvent = function (name) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let kadiraInfo = Kadira._getInfo();\n  if (kadiraInfo) {\n    return Kadira.tracer.event(kadiraInfo.trace, 'custom', data, {\n      name\n    });\n  }\n  return false;\n};\nKadira.endEvent = function (event, data) {\n  let kadiraInfo = Kadira._getInfo();\n\n  // The event could be false if it could not be started.\n  // Handle it here instead of requiring the app to.\n  if (kadiraInfo && event) {\n    Kadira.tracer.eventEnd(kadiraInfo.trace, event, data);\n  }\n};","map":{"version":3,"names":["Meteor","module","link","v","Random","_","ErrorModel","HttpModel","MethodsModel","PubsubModel","SystemModel","packageMap","default","getErrorParameters","WaitTimeBuilder","DocSzCache","Ntp","getClientVersions","handleApiResponse","TrackMeteorDebug","TrackUncaughtExceptions","TrackUnhandledRejections","hostname","Npm","require","logger","Fibers","KadiraCore","Kadira","DEBUG_PAYLOAD_SIZE","process","env","MONTI_DEBUG_PAYLOAD_SIZE","models","options","currentSub","kadiraInfo","EnvironmentVariable","waitTimeBuilder","errors","addFilter","push","bind","methods","pubsub","system","http","docSzCache","syncedDate","buildInterval","setInterval","_buildPayload","connect","appId","appSecret","connected","console","log","payloadTimeout","endpoint","clientEngineSyncDelay","thresholds","isHostNameSet","proxy","recordIPAddress","eventStackTrace","stalledTimeout","disableClientErrorTracking","documentSizeCacheSize","last","substr","length","enableErrorTracking","undefined","uploadSourceMaps","isProduction","authHeaders","trim","coreApi","agentVersion","_headers","release","replace","_checkAuth","then","_sendAppStats","_schedulePayloadSend","catch","err","message","concat","Error","sync","error","addFilterFn","forEach","__meteor_runtime_config__","kadira","disableNtp","disableErrorTracking","startup","publish","_options","added","id","ready","payload","host","clientVersions","buildDetailedInfo","_isDetailedInfo","extend","buildPayload","_countDataSent","_detailInfoSentInterval","Math","ceil","appStats","protocolVersion","packageVersions","each","Package","name","version","sendData","startTime","Date","body","clearInterval","setTimeout","_sendPayload","logPayload","traceCount","methodRequests","pubRequests","httpRequests","largestTrace","size","content","countBreakdowns","breakdowns","field","result","entry","Object","keys","sizeTraces","traces","histogram","create","total","trace","stringified","JSON","stringify","normalized","entries","map","_ref","k","join","methodMetrics","pubMetrics","httpMetrics","send","logErr","RangeError","run","_getInfo","currentFiber","useEnvironmentVariable","current","get","__kadiraInfo","_setInfo","info","startContinuousProfiling","MontiProfiler","startContinuous","onProfile","_ref2","profile","endTime","profiles","e","enableClientErrorTracking","trackError","subType","stack","type","arguments","now","_now","previousEvents","events","at","endAt","tracer","optimizeEvents","errored","getTime","metrics","ignoreErrorTracking","_skipKadira","startEvent","data","event","endEvent","eventEnd"],"sources":["packages/montiapm:agent/lib/kadira.js"],"sourcesContent":["/* global MontiProfiler */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\nimport { ErrorModel } from './models/errors';\nimport { HttpModel } from './models/http';\nimport { MethodsModel } from './models/methods';\nimport { PubsubModel } from './models/pubsub';\nimport { SystemModel } from './models/system';\nimport packageMap from './.meteor-package-versions';\nimport { getErrorParameters } from './common/utils';\nimport { WaitTimeBuilder } from './wait_time_builder';\nimport { DocSzCache } from './docsize_cache';\nimport { Ntp } from './ntp';\nimport { getClientVersions } from './utils';\nimport { handleApiResponse } from './sourcemaps';\nimport { TrackMeteorDebug, TrackUncaughtExceptions, TrackUnhandledRejections } from './hijack/error';\n\nconst hostname = Npm.require('os').hostname();\nconst logger = Npm.require('debug')('kadira:apm');\nconst Fibers = Npm.require('fibers');\nconst KadiraCore = Npm.require('monti-apm-core').Kadira;\n\nconst DEBUG_PAYLOAD_SIZE = process.env.MONTI_DEBUG_PAYLOAD_SIZE === 'true';\n\nKadira.models = {};\nKadira.options = {};\nKadira.env = {\n  currentSub: null, // keep current subscription inside ddp\n  kadiraInfo: new Meteor.EnvironmentVariable(),\n};\nKadira.waitTimeBuilder = new WaitTimeBuilder();\nKadira.errors = [];\nKadira.errors.addFilter = Kadira.errors.push.bind(Kadira.errors);\n\nKadira.models.methods = new MethodsModel();\nKadira.models.pubsub = new PubsubModel();\nKadira.models.system = new SystemModel();\nKadira.models.http = new HttpModel();\nKadira.docSzCache = new DocSzCache(100000, 10);\nKadira.syncedDate = new Ntp();\n\n// If the agent is not connected, we still want to build the payload occasionally\n// since building the payload does some cleanup to prevent memory leaks\n// Once connected, this interval is cleared\nlet buildInterval = Meteor.setInterval(() => {\n  Kadira._buildPayload();\n}, 1000 * 60);\n\n\nKadira.connect = function (appId, appSecret, options) {\n  if (Kadira.connected) {\n    console.log('Monti APM: Already Connected');\n    return;\n  }\n\n  options = options || {};\n  options.appId = appId;\n  options.appSecret = appSecret;\n  options.payloadTimeout = options.payloadTimeout || 1000 * 20;\n  options.endpoint = options.endpoint || 'https://engine.montiapm.com';\n  options.clientEngineSyncDelay = options.clientEngineSyncDelay || 10000;\n  options.thresholds = options.thresholds || {};\n  options.isHostNameSet = !!options.hostname;\n  options.hostname = options.hostname || hostname;\n  options.proxy = options.proxy || null;\n  options.recordIPAddress = options.recordIPAddress || 'full';\n  options.eventStackTrace = options.eventStackTrace || false;\n  options.stalledTimeout = options.stalledTimeout || 1000 * 60 * 30;\n  options.disableClientErrorTracking = options.disableClientErrorTracking || false;\n\n  if (options.documentSizeCacheSize) {\n    Kadira.docSzCache = new DocSzCache(options.documentSizeCacheSize, 10);\n  }\n\n  // remove trailing slash from endpoint url (if any)\n  if (_.last(options.endpoint) === '/') {\n    options.endpoint = options.endpoint.substr(0, options.endpoint.length - 1);\n  }\n\n  // error tracking is enabled by default\n  if (options.enableErrorTracking === undefined) {\n    options.enableErrorTracking = true;\n  }\n\n  // uploading sourcemaps is enabled by default in production\n  if (options.uploadSourceMaps === undefined && Meteor.isProduction) {\n    options.uploadSourceMaps = true;\n  }\n\n  Kadira.options = options;\n  Kadira.options.authHeaders = {\n    'KADIRA-APP-ID': Kadira.options.appId,\n    'KADIRA-APP-SECRET': Kadira.options.appSecret\n  };\n\n  if (appId && appSecret) {\n    options.appId = options.appId.trim();\n    options.appSecret = options.appSecret.trim();\n\n    Kadira.coreApi = new KadiraCore({\n      appId: options.appId,\n      appSecret: options.appSecret,\n      endpoint: options.endpoint,\n      hostname: options.hostname,\n      agentVersion: packageMap['montiapm:agent'] || '<unknown>'\n    });\n\n    Kadira.coreApi._headers['METEOR-RELEASE'] = Meteor.release.replace('METEOR@', '');\n\n    Kadira.coreApi._checkAuth()\n      .then(function () {\n        logger('connected to app: ', appId);\n        console.log('Monti APM: Connected');\n        Kadira._sendAppStats();\n        Kadira._schedulePayloadSend();\n      })\n      .catch(function (err) {\n        if (err.message === 'Unauthorized') {\n          console.log('Monti APM: Authentication failed, check your \"appId\" & \"appSecret\"');\n        } else {\n          console.log(`Monti APM: Unable to connect. ${err.message}`);\n        }\n      });\n  } else {\n    throw new Error('Monti APM: required appId and appSecret');\n  }\n\n  Kadira.syncedDate = new Ntp(options);\n  Kadira.syncedDate.sync();\n  Kadira.models.error = new ErrorModel(appId);\n\n  // handle pre-added filters\n  let addFilterFn = Kadira.models.error.addFilter.bind(Kadira.models.error);\n  Kadira.errors.forEach(addFilterFn);\n  Kadira.errors = Kadira.models.error;\n\n  // setting runtime info, which will be sent to kadira\n  __meteor_runtime_config__.kadira = {\n    appId,\n    endpoint: options.endpoint,\n    clientEngineSyncDelay: options.clientEngineSyncDelay,\n    recordIPAddress: options.recordIPAddress,\n    disableNtp: options.disableNtp,\n    disableClientErrorTracking: options.disableClientErrorTracking,\n  };\n\n  if (options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  } else {\n    Kadira.disableErrorTracking();\n  }\n\n  // start tracking errors\n  Meteor.startup(function () {\n    TrackUncaughtExceptions();\n    TrackUnhandledRejections();\n    TrackMeteorDebug();\n  });\n\n  Meteor.publish(null, function () {\n    let _options = __meteor_runtime_config__.kadira;\n    this.added('kadira_settings', Random.id(), _options);\n    this.ready();\n  });\n\n  // notify we've connected\n  Kadira.connected = true;\n};\n\n// track how many times we've sent the data (once per minute)\nKadira._buildPayload = function () {\n  let payload = {host: Kadira.options.hostname, clientVersions: getClientVersions()};\n  let buildDetailedInfo = Kadira._isDetailedInfo();\n  _.extend(payload, Kadira.models.methods.buildPayload(buildDetailedInfo));\n  _.extend(payload, Kadira.models.pubsub.buildPayload(buildDetailedInfo));\n  _.extend(payload, Kadira.models.system.buildPayload());\n  _.extend(payload, Kadira.models.http.buildPayload());\n\n  if (Kadira.options.enableErrorTracking) {\n    _.extend(payload, Kadira.models.error.buildPayload());\n  }\n\n  return payload;\n};\n\nKadira._countDataSent = 0;\nKadira._detailInfoSentInterval = Math.ceil((1000 * 60) / Kadira.options.payloadTimeout);\nKadira._isDetailedInfo = function () {\n  return (Kadira._countDataSent++ % Kadira._detailInfoSentInterval) === 0;\n};\n\nKadira._sendAppStats = function () {\n  let appStats = {};\n  appStats.release = Meteor.release;\n  appStats.protocolVersion = '1.0.0';\n  appStats.packageVersions = [];\n  appStats.clientVersions = getClientVersions();\n\n  _.each(Package, function (v, name) {\n    appStats.packageVersions.push({\n      name,\n      version: packageMap[name] || null\n    });\n  });\n\n  Kadira.coreApi.sendData({\n    startTime: new Date(),\n    appStats\n  }).then(function (body) {\n    handleApiResponse(body);\n  }).catch(function (err) {\n    console.error('Monti APM Error on sending appStats:', err.message);\n  });\n};\n\nKadira._schedulePayloadSend = function () {\n  clearInterval(buildInterval);\n\n  setTimeout(function () {\n    Kadira._schedulePayloadSend();\n    Kadira._sendPayload();\n  }, Kadira.options.payloadTimeout);\n};\n\nfunction logPayload (payload) {\n  let traceCount = payload.methodRequests.length +\n    payload.pubRequests.length + payload.httpRequests.length +\n    payload.errors.length;\n  let largestTrace = {\n    size: 0,\n    content: ''\n  };\n\n  // eslint-disable-next-line no-inner-declarations\n  function countBreakdowns (breakdowns, field) {\n    let result = 0;\n    breakdowns.forEach(entry => {\n      result += Object.keys(entry[field]).length;\n    });\n\n    return result;\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function sizeTraces (traces) {\n    let histogram = Object.create(null);\n    let total = 0;\n    traces.forEach(trace => {\n      const stringified = JSON.stringify(trace);\n      let length = stringified.length;\n      total += length;\n\n      if (length > largestTrace.size) {\n        largestTrace = { size: length, content: stringified };\n      }\n\n      let normalized = length - (length % 500);\n      histogram[normalized] = histogram[normalized] || 0;\n      histogram[normalized] += 1;\n    });\n\n    histogram.total = total;\n\n    return Object.entries(histogram).map(([k, v]) => `${k}: ${v}`).join(', ');\n  }\n\n  console.log('------- APM Payload Metrics -------');\n  console.log(`methods: ${countBreakdowns(payload.methodMetrics, 'methods')}`);\n  console.log(`pubs: ${countBreakdowns(payload.pubMetrics, 'pubs')}`);\n  console.log(`routes: ${countBreakdowns(payload.httpMetrics, 'routes')}`);\n  console.log(`errors: ${payload.errors.length}`);\n  console.log(`traces: ${traceCount}`);\n  console.log('Method trace sizes:', sizeTraces(payload.methodRequests));\n  console.log('Pub trace sizes:', sizeTraces(payload.pubRequests));\n  console.log('HTTP trace sizes:', sizeTraces(payload.httpRequests));\n  console.log('Error trace sizes:', sizeTraces(payload.errors));\n  console.log('Largest trace:', largestTrace);\n  console.log('------- ------------------- -------');\n}\n\nKadira._sendPayload = function () {\n  new Fibers(function () {\n    let payload = Kadira._buildPayload();\n\n    if (DEBUG_PAYLOAD_SIZE) {\n      logPayload(payload);\n    }\n\n    function send () {\n      return Kadira.coreApi.sendData(payload)\n        .then(function (body) {\n          handleApiResponse(body);\n        });\n    }\n\n    function logErr (err) {\n      console.log('Monti APM Error:', 'while sending payload to Monti APM:', err.message);\n    }\n\n    send()\n      .catch(function (err) {\n        // Likely is RangeError: Invalid string length\n        // This probably means we are close to running out of memory.\n        if (err instanceof RangeError) {\n          console.log('Monti APM: payload was too large to send to Monti APM. Resending without traces');\n          payload.methodRequests = undefined;\n          payload.httpRequests = undefined;\n          payload.pubRequests = undefined;\n          send()\n            .catch(logErr);\n        } else {\n          logErr(err);\n        }\n      });\n  }).run();\n};\n\n// this return the __kadiraInfo from the current Fiber by default\n// if called with 2nd argument as true, it will get the kadira info from\n// Meteor.EnvironmentVariable\n//\n// WARNNING: returned info object is the reference object.\n//  Changing it might cause issues when building traces. So use with care\nKadira._getInfo = function (currentFiber, useEnvironmentVariable) {\n  currentFiber = currentFiber || Fibers.current;\n  if (currentFiber) {\n    if (useEnvironmentVariable) {\n      return Kadira.env.kadiraInfo.get();\n    }\n    return currentFiber.__kadiraInfo;\n  }\n};\n\n// this does not clone the info object. So, use with care\nKadira._setInfo = function (info) {\n  Fibers.current.__kadiraInfo = info;\n};\n\nKadira.startContinuousProfiling = function () {\n  MontiProfiler.startContinuous(function onProfile ({ profile, startTime, endTime }) {\n    if (!Kadira.connected) {\n      return;\n    }\n\n    Kadira.coreApi.sendData({ profiles: [{profile, startTime, endTime }]})\n      .catch(e => console.log('Monti: err sending cpu profile', e));\n  });\n};\n\n/**\n * @warning Mutating the `__meteor_runtime_config__` object does not propagate in real-time to the client, only if the\n * version changes and the client refreshes it seems. In the future we might want to change that into a reactive approach.\n */\n\nKadira.enableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = true;\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  __meteor_runtime_config__.kadira.enableErrorTracking = false;\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.disableClientErrorTracking = function () {\n  __meteor_runtime_config__.kadira.disableClientErrorTracking = Kadira.options.disableClientErrorTracking = true;\n};\n\nKadira.enableClientErrorTracking = function () {\n  __meteor_runtime_config__.kadira.disableClientErrorTracking = Kadira.options.disableClientErrorTracking = false;\n};\n\nKadira.trackError = function () {\n  if (!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  const {\n    message,\n    subType,\n    stack,\n    type,\n    kadiraInfo = Kadira._getInfo(),\n  } = getErrorParameters(arguments);\n\n  const now = Ntp._now();\n\n  const previousEvents =\n    kadiraInfo && kadiraInfo.trace ?\n      kadiraInfo.trace.events :\n      [{ type: 'start', at: now, endAt: now }];\n\n  const events = Kadira.tracer\n    .optimizeEvents(previousEvents)\n    .concat([['error', 0, { error: { message, stack } }]]);\n\n  if (message) {\n    let trace = {\n      type: type || 'server-internal',\n      subType: subType || 'server',\n      name: message,\n      errored: true,\n      at: Kadira.syncedDate.getTime(),\n      events,\n      metrics: { total: 0 },\n    };\n\n    Kadira.models.error.trackError({ message, stack }, trace);\n  }\n};\n\nKadira.ignoreErrorTracking = function (err) {\n  err._skipKadira = true;\n};\n\nKadira.startEvent = function (name, data = {}) {\n  let kadiraInfo = Kadira._getInfo();\n  if (kadiraInfo) {\n    return Kadira.tracer.event(kadiraInfo.trace, 'custom', data, { name });\n  }\n\n  return false;\n};\n\nKadira.endEvent = function (event, data) {\n  let kadiraInfo = Kadira._getInfo();\n\n  // The event could be false if it could not be started.\n  // Handle it here instead of requiring the app to.\n  if (kadiraInfo && event) {\n    Kadira.tracer.eventEnd(kadiraInfo.trace, event, data);\n  }\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"f90f332449f46ef6585c4031d5fe82ca01b70b47"}
