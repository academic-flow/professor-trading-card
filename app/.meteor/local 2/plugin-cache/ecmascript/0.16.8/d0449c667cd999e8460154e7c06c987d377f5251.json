{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/accounts-base/accounts_server.js","filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/phatca/Documents/GitHub/professor-trading-card/app","root":"/Users/phatca/Documents/GitHub/professor-trading-card/app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/phatca/Documents/GitHub/professor-trading-card/app/packages/accounts-base/accounts_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_server.js"}},"code":"var _Package$oauthEncryp;\nconst _excluded = [\"token\"];\nlet _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n}, 0);\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 1);\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 1);\nlet AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  },\n  EXPIRE_TOKENS_INTERVAL_MS(v) {\n    EXPIRE_TOKENS_INTERVAL_MS = v;\n  }\n}, 2);\nlet URL;\nmodule.link(\"meteor/url\", {\n  URL(v) {\n    URL = v;\n  }\n}, 3);\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server, _options) {\n    var _this;\n    super(_options || {});\n    _this = this;\n    ///\n    /// CREATE USER HOOKS\n    ///\n    /**\n     * @summary Customize login token creation.\n     * @locus Server\n     * @param {Function} func Called whenever a new token is created.\n     * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n     */\n    this.onCreateLoginToken = function (func) {\n      if (this._onCreateLoginTokenHook) {\n        throw new Error('Can only call onCreateLoginToken once');\n      }\n      this._onCreateLoginTokenHook = func;\n    };\n    // Generates a MongoDB selector that can be used to perform a fast case\n    // insensitive lookup for the given fieldName and string. Since MongoDB does\n    // not support case insensitive indexes, and case insensitive regex queries\n    // are slow, we construct a set of prefix selectors for all permutations of\n    // the first 4 characters ourselves. We first attempt to matching against\n    // these, and because 'prefix expression' regex queries do use indexes (see\n    // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n    // this has been found to greatly improve performance (from 1200ms to 5ms in a\n    // test with 1.000.000 users).\n    this._selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n      // Performance seems to improve up to 4 prefix characters\n      const prefix = string.substring(0, Math.min(string.length, 4));\n      const orClause = generateCasePermutationsForString(prefix).map(prefixPermutation => {\n        const selector = {};\n        selector[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(prefixPermutation)));\n        return selector;\n      });\n      const caseInsensitiveClause = {};\n      caseInsensitiveClause[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(string), \"$\"), 'i');\n      return {\n        $and: [{\n          $or: orClause\n        }, caseInsensitiveClause]\n      };\n    };\n    this._findUserByQuery = (query, options) => {\n      let user = null;\n      if (query.id) {\n        // default field selector is added within getUserById()\n        user = Meteor.users.findOne(query.id, this._addDefaultFieldSelector(options));\n      } else {\n        options = this._addDefaultFieldSelector(options);\n        let fieldName;\n        let fieldValue;\n        if (query.username) {\n          fieldName = 'username';\n          fieldValue = query.username;\n        } else if (query.email) {\n          fieldName = 'emails.address';\n          fieldValue = query.email;\n        } else {\n          throw new Error(\"shouldn't happen (validation missed something)\");\n        }\n        let selector = {};\n        selector[fieldName] = fieldValue;\n        user = Meteor.users.findOne(selector, options);\n        // If user is not found, try a case insensitive lookup\n        if (!user) {\n          selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n          const candidateUsers = Meteor.users.find(selector, _objectSpread(_objectSpread({}, options), {}, {\n            limit: 2\n          })).fetch();\n          // No match if multiple candidates are found\n          if (candidateUsers.length === 1) {\n            user = candidateUsers[0];\n          }\n        }\n      }\n      return user;\n    };\n    this._handleError = function (msg) {\n      let throwError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let errorCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 403;\n      const error = new Meteor.Error(errorCode, _this._options.ambiguousErrorMessages ? \"Something went wrong. Please check your credentials.\" : msg);\n      if (throwError) {\n        throw error;\n      }\n      return error;\n    };\n    this._userQueryValidator = Match.Where(user => {\n      check(user, {\n        id: Match.Optional(NonEmptyString),\n        username: Match.Optional(NonEmptyString),\n        email: Match.Optional(NonEmptyString)\n      });\n      if (Object.keys(user).length !== 1) throw new Match.Error(\"User property must have exactly one field\");\n      return true;\n    });\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1\n      }\n    };\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n    this._deleteSavedTokensForAllUsersOnStartup();\n    this._skipCaseInsensitiveChecksForTest = {};\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(\"#/reset-password/\".concat(token), extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(\"#/verify-email/\".concat(token), extraParams),\n      loginToken: (selector, token, extraParams) => this.buildEmailUrl(\"/?loginToken=\".concat(token, \"&selector=\").concat(selector), extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(\"#/enroll-account/\".concat(token), extraParams)\n    };\n    this.addDefaultRateLimit();\n    this.buildEmailUrl = function (path) {\n      let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n    this._beforeExternalLoginHook = func;\n  }\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n    this._onCreateUserHook = Meteor.wrapFn(func);\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.forEach(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      } catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (!ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  }\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {\n        fields: this._options.defaultFieldSelector\n      });\n      callback({\n        user,\n        connection\n      });\n      return true;\n    });\n  }\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (!stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() => this._setLoginToken(userId, methodInvocation.connection, this._hashLoginToken(stampedLoginToken.token)));\n    methodInvocation.setUserId(userId);\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  }\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(methodInvocation, methodName, methodArgs, result) {\n    return Promise.asyncApply(() => {\n      if (!result) throw new Error(\"result is required\");\n\n      // XXX A programming error in a login handler can lead to this occurring, and\n      // then we don't call onLogin or onLoginFailure callbacks. Should\n      // tryLoginMethod catch this case and turn it into an error?\n      if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n      let user;\n      if (result.userId) user = this.users.findOne(result.userId, {\n        fields: this._options.defaultFieldSelector\n      });\n      const attempt = {\n        type: result.type || \"unknown\",\n        allowed: !!(result.userId && !result.error),\n        methodName: methodName,\n        methodArguments: Array.from(methodArgs)\n      };\n      if (result.error) {\n        attempt.error = result.error;\n      }\n      if (user) {\n        attempt.user = user;\n      }\n\n      // _validateLogin may mutate `attempt` by adding an error and changing allowed\n      // to false, but that's the only change it can make (and the user's callbacks\n      // only get a clone of `attempt`).\n      this._validateLogin(methodInvocation.connection, attempt);\n      if (attempt.allowed) {\n        const ret = _objectSpread(_objectSpread({}, this._loginUser(methodInvocation, result.userId, result.stampedLoginToken)), result.options);\n        ret.type = attempt.type;\n        this._successfulLogin(methodInvocation.connection, attempt);\n        return ret;\n      } else {\n        this._failedLogin(methodInvocation.connection, attempt);\n        throw attempt.error;\n      }\n    });\n  }\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(methodInvocation, methodName, methodArgs, type, fn) {\n    return Promise.asyncApply(() => {\n      return Promise.await(this._attemptLogin(methodInvocation, methodName, methodArgs, Promise.await(tryLoginMethod(type, fn))));\n    });\n  }\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(methodInvocation, methodName, methodArgs, result) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {\n        fields: this._options.defaultFieldSelector\n      });\n    }\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  }\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  /**\n   * @summary Registers a new login handler.\n   * @locus Server\n   * @param {String} [name] The type of login method like oauth, password, etc.\n   * @param {Function} handler A function that receives an options object\n   * (as passed as an argument to the `login` method) and returns one of\n   * `undefined`, meaning don't handle or a login method result object.\n   */\n  registerLoginHandler(name, handler) {\n    if (!handler) {\n      handler = name;\n      name = null;\n    }\n    this._loginHandlers.push({\n      name: name,\n      handler: Meteor.wrapFn(handler)\n    });\n  }\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    return Promise.asyncApply(() => {\n      for (let handler of this._loginHandlers) {\n        const result = Promise.await(tryLoginMethod(handler.name, () => Promise.asyncApply(() => Promise.await(handler.handler.call(methodInvocation, options)))));\n        if (result) {\n          return result;\n        }\n        if (result !== undefined) {\n          throw new Meteor.Error(400, 'A login handler should return a result or undefined');\n        }\n      }\n      return {\n        type: null,\n        error: new Meteor.Error(400, \"Unrecognized options for login request\")\n      };\n    });\n  }\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            hashedToken: loginToken\n          }, {\n            token: loginToken\n          }]\n        }\n      }\n    });\n  }\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = function (options) {\n      return Promise.asyncApply(() => {\n        // Login handlers should really also check whatever field they look at in\n        // options, but we don't enforce it.\n        check(options, Object);\n        const result = Promise.await(accounts._runLoginHandlers(this, options));\n        //console.log({result});\n\n        return Promise.await(accounts._attemptLogin(this, \"login\", arguments, result));\n      });\n    };\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": 1\n        }\n      });\n      if (!this.userId || !user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(stampedToken => stampedToken.hashedToken === currentHashedToken);\n      if (!currentStampedToken) {\n        // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (!this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": {\n            hashedToken: {\n              $ne: currentToken\n            }\n          }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = options => {\n      check(options, Match.ObjectIncluding({\n        service: String\n      }));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n      if (Package['service-configuration']) {\n        const {\n          ServiceConfiguration\n        } = Package['service-configuration'];\n        if (ServiceConfiguration.configurations.findOne({\n          service: options.service\n        })) throw new Meteor.Error(403, \"Service \".concat(options.service, \" already configured\"));\n        if (Package[\"oauth-encryption\"]) {\n          const {\n            OAuthEncryption\n          } = Package[\"oauth-encryption\"];\n          if (hasOwn.call(options, 'secret') && OAuthEncryption.keyIsLoaded()) options.secret = OAuthEncryption.seal(options.secret);\n        }\n        ServiceConfiguration.configurations.insert(options);\n      }\n    };\n    accounts._server.methods(methods);\n  }\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  }\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const {\n      users,\n      _autopublishFields,\n      _defaultPublishFields\n    } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", function () {\n      if (Package['service-configuration']) {\n        const {\n          ServiceConfiguration\n        } = Package['service-configuration'];\n        return ServiceConfiguration.configurations.find({}, {\n          fields: {\n            secret: 0\n          }\n        });\n      }\n      this.ready();\n    }, {\n      is_auto: true\n    }); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields);\n      // If the custom fields are negative, then ignore them and only send the necessary fields\n      const fields = keys.length > 0 && customFields[keys[0]] ? _objectSpread(_objectSpread({}, this._addDefaultFieldSelector().fields), _defaultPublishFields.projection) : _defaultPublishFields.projection;\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{\n        is_auto: true\n      });\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => _objectSpread(_objectSpread({}, prev), {}, {\n        [field]: 1\n      }), {});\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser)\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{\n        is_auto: true\n      });\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? {\n          _id: {\n            $ne: this.userId\n          }\n        } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers)\n        });\n      }, /*suppress autopublish warning*/{\n        is_auto: true\n      });\n    });\n  }\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n  }\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  }\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  }\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data) return;\n    if (value === undefined) delete data[field];else data[field] = value;\n  }\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  }\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const {\n        token\n      } = stampedToken,\n      hashedStampedToken = _objectWithoutProperties(stampedToken, _excluded);\n    return _objectSpread(_objectSpread({}, hashedStampedToken), {}, {\n      hashedToken: this._hashLoginToken(token)\n    });\n  }\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? _objectSpread({}, query) : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  }\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n  }\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  }\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  }\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  }\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  }\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, {\n          nonMutatingCallbacks: true\n        });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n        this._userObservesForConnections[connection.id] = observe;\n        if (!foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  }\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date()\n    };\n  }\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      $or: [{\n        \"services.password.reset.reason\": \"reset\"\n      }, {\n        \"services.password.reset.reason\": {\n          $exists: false\n        }\n      }]\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const userFilter = userId ? {\n      _id: userId\n    } : {};\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update(_objectSpread(_objectSpread({}, userFilter), {}, {\n      $or: [{\n        \"services.resume.loginTokens.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.resume.loginTokens.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    }), {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            when: {\n              $lt: oldestValidDate\n            }\n          }, {\n            when: {\n              $lt: +oldestValidDate\n            }\n          }]\n        }\n      }\n    }, {\n      multi: true\n    });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  }\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n    return superResult;\n  }\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = _objectSpread({\n      createdAt: new Date(),\n      _id: Random.id()\n    }, user);\n    if (user.services) {\n      Object.keys(user.services).forEach(service => pinEncryptedFieldsToUser(user.services[service], user._id));\n    }\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n    this._validateNewUserHooks.forEach(hook => {\n      if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n    });\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address')) throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username')) throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  }\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n    return !domain || typeof domain === 'function' && domain(email) || typeof domain === 'string' && new RegExp(\"@\".concat(Meteor._escapeRegExp(domain), \"$\"), 'i').test(email);\n  }\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  }\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {\n        fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }\n      }).forEach(user => {\n        this._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n      });\n    });\n  }\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(serviceName, serviceData, options) {\n    options = _objectSpread({}, options);\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\"Service data for service \".concat(serviceName, \" must include id\"));\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{}, {}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n    let user = this.users.findOne(selector, {\n      fields: this._options.defaultFieldSelector\n    });\n\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({\n        serviceName,\n        serviceData,\n        options\n      });\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key => setAttrs[\"services.\".concat(serviceName, \".\").concat(key)] = serviceData[key]);\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = _objectSpread(_objectSpread({}, setAttrs), opts);\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {\n        services: {}\n      };\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  }\n  /**\n   * @summary Removes default rate limiting rule\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  }\n  /**\n   * @summary Add a default rule of limiting logins, creating new users and password reset\n   * to 5 times every 10 seconds per connection.\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword'].includes(name),\n        connectionId: connectionId => true\n      }, 5, 10000);\n    }\n  }\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  generateOptionsForEmail(email, user, url, reason) {\n    let extra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from ? this.emailTemplates[reason].from(user) : this.emailTemplates.from,\n      subject: this.emailTemplates[reason].subject(user, url, extra)\n    };\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = this.emailTemplates[reason].text(user, url, extra);\n    }\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = this.emailTemplates[reason].html(user, url, extra);\n    }\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n    return options;\n  }\n  _checkForCaseInsensitiveDuplicates(fieldName, displayName, fieldValue, ownUserId) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(this._skipCaseInsensitiveChecksForTest, fieldValue);\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = Meteor.users.find(this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue), {\n        fields: {\n          _id: 1\n        },\n        // we only need a maximum of 2 users for the logic below to work\n        limit: 2\n      }).fetch();\n      if (matchedUsers.length > 0 && (\n      // If we don't have a userId yet, any match we find is a duplicate\n      !ownUserId ||\n      // Otherwise, check to see if there are multiple matches or a match\n      // that is not us\n      matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)) {\n        this._handleError(\"\".concat(displayName, \" already exists.\"));\n      }\n    }\n  }\n  _createUserCheckingDuplicates(_ref) {\n    let {\n      user,\n      email,\n      username,\n      options\n    } = _ref;\n    const newUser = _objectSpread(_objectSpread(_objectSpread({}, user), username ? {\n      username\n    } : {}), email ? {\n      emails: [{\n        address: email,\n        verified: false\n      }]\n    } : {});\n\n    // Perform a case insensitive check before insert\n    this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n    this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n    const userId = this.insertUserDoc(options, newUser);\n    // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n    try {\n      this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n      this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      Meteor.users.remove(userId);\n      throw ex;\n    }\n    return userId;\n  }\n}\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\nconst tryLoginMethod = (type, fn) => Promise.asyncApply(() => {\n  let result;\n  try {\n    result = Promise.await(fn());\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n  if (result && !result.type && type) result.type = type;\n  return result;\n});\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  }, {\n    fields: {\n      \"services.resume.loginTokens.$\": 1\n    }\n  });\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    },\n    // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n  }\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token => token.hashedToken === hashedToken);\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token => token.token === options.resume);\n    oldUnhashedStyleToken = true;\n  }\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    });\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\nconst expirePasswordToken = (accounts, oldestValidDate, tokenFilter, userId) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {\n    _id: userId\n  } : {};\n  // check if this method was called from enroll account workflow\n  if (tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n  let resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n  if (isEnroll) {\n    resetRangeOr = {\n      $or: [{\n        \"services.password.enroll.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.password.enroll.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    };\n  }\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n  if (isEnroll) {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  } else {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  }\n};\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\nconst OAuthEncryption = (_Package$oauthEncryp = Package[\"oauth-encryption\"]) === null || _Package$oauthEncryp === void 0 ? void 0 : _Package$oauthEncryp.OAuthEncryption;\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption !== null && OAuthEncryption !== void 0 && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile) user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce((prev, email) => prev || this._testEmailDomain(email.address), false);\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce((prev, service) => service.email && this._testEmailDomain(service.email), false);\n  }\n  if (emailIsGood) {\n    return true;\n  }\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, \"@\".concat(domain, \" email required\"));\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users.createIndexAsync('username', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndexAsync('emails.address', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndexAsync('services.resume.loginTokens.hashedToken', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndexAsync('services.resume.loginTokens.token', {\n    unique: true,\n    sparse: true\n  });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users.createIndexAsync('services.resume.haveLoginTokensToDelete', {\n    sparse: true\n  });\n  // For expiring login tokens\n  users.createIndexAsync(\"services.resume.loginTokens.when\", {\n    sparse: true\n  });\n  // For expiring password tokens\n  users.createIndexAsync('services.password.reset.when', {\n    sparse: true\n  });\n  users.createIndexAsync('services.password.enroll.when', {\n    sparse: true\n  });\n};\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n  return permutations;\n};","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","export","AccountsServer","crypto","Meteor","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","URL","hasOwn","Object","prototype","hasOwnProperty","NonEmptyString","Match","Where","x","check","String","length","constructor","server","options","_this","this","onCreateLoginToken","func","_onCreateLoginTokenHook","Error","_selectorForFastCaseInsensitiveLookup","fieldName","string","prefix","substring","Math","min","orClause","generateCasePermutationsForString","map","prefixPermutation","selector","RegExp","concat","_escapeRegExp","caseInsensitiveClause","$and","$or","_findUserByQuery","query","user","id","users","findOne","_addDefaultFieldSelector","fieldValue","username","email","candidateUsers","find","limit","fetch","_handleError","msg","throwError","arguments","undefined","errorCode","error","_options","ambiguousErrorMessages","_userQueryValidator","Optional","keys","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","Hook","bindEnvironment","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","loginToken","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","key","value","searchParams","append","toString","userId","currentInvocation","DDP","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","validateLoginAttempt","register","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","wrapFn","onExternalLogin","_onExternalLoginHook","setAdditionalFindUserOnExternalLogin","_additionalFindUserOnExternalLogin","_validateLogin","connection","attempt","forEach","callback","ret","cloneAttemptWithConnection","e","allowed","_successfulLogin","_onLoginHook","each","_failedLogin","_onLoginFailureHook","_successfulLogout","_onLogoutHook","fields","defaultFieldSelector","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","tokenExpires","_tokenExpiration","when","_attemptLogin","methodName","methodArgs","result","Promise","asyncApply","type","methodArguments","Array","from","_loginMethod","fn","await","tryLoginMethod","_reportLoginFailure","registerLoginHandler","name","handler","_runLoginHandlers","call","destroyToken","update","$pull","hashedToken","accounts","methods","login","logout","_getLoginToken","getNewToken","currentHashedToken","currentStampedToken","services","resume","loginTokens","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","ObjectIncluding","service","oauth","serviceNames","includes","Package","ServiceConfiguration","configurations","OAuthEncryption","keyIsLoaded","secret","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","ready","is_auto","startup","customFields","_id","autopublish","toFieldSelector","reduce","prev","field","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","digest","_hashStampedToken","hashedStampedToken","_excluded","_insertHashedLoginToken","$addToSet","_clearAllLoginTokens","$set","_getUserObserve","observe","stop","newToken","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","Date","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_getPasswordEnrollTokenLifetimeMs","_expireTokens","_getTokenLifetimeMs","userFilter","$lt","multi","config","superResult","loginExpirationInDays","expireTokenInterval","clearInterval","insertUserDoc","createdAt","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","hook","errmsg","_testEmailDomain","domain","restrictCreationByEmailDomain","test","_deleteSavedTokensForUser","tokensToDelete","$unset","$pullAll","loginTokensToDelete","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","generateOptionsForEmail","reason","extra","to","emailTemplates","subject","text","html","headers","_checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","matchedUsers","_createUserCheckingDuplicates","_ref","newUser","address","verified","ex","remove","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","isEnroll","resetRangeOr","expireFilter","setInterval","_Package$oauthEncryp","isSealed","open","emailIsGood","values","allow","modifier","createIndexAsync","unique","sparse","permutations","i","ch","charAt","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase"],"sources":["packages/accounts-base/accounts_server.js"],"sourcesContent":["import crypto from 'crypto';\nimport { Meteor } from 'meteor/meteor'\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server, options) {\n    super(options || {});\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      loginToken: (selector, token, extraParams) =>\n        this.buildEmailUrl(`/?loginToken=${token}&selector=${selector}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize login token creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new token is created.\n   * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n   */\n  onCreateLoginToken = function(func) {\n    if (this._onCreateLoginTokenHook) {\n      throw new Error('Can only call onCreateLoginToken once');\n    }\n\n    this._onCreateLoginTokenHook = func;\n  };\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = Meteor.wrapFn(func);\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.forEach(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {fields: this._options.defaultFieldSelector});\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  // Generates a MongoDB selector that can be used to perform a fast case\n  // insensitive lookup for the given fieldName and string. Since MongoDB does\n  // not support case insensitive indexes, and case insensitive regex queries\n  // are slow, we construct a set of prefix selectors for all permutations of\n  // the first 4 characters ourselves. We first attempt to matching against\n  // these, and because 'prefix expression' regex queries do use indexes (see\n  // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n  // this has been found to greatly improve performance (from 1200ms to 5ms in a\n  // test with 1.000.000 users).\n  _selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n    // Performance seems to improve up to 4 prefix characters\n    const prefix = string.substring(0, Math.min(string.length, 4));\n    const orClause = generateCasePermutationsForString(prefix).map(\n        prefixPermutation => {\n          const selector = {};\n          selector[fieldName] =\n              new RegExp(`^${Meteor._escapeRegExp(prefixPermutation)}`);\n          return selector;\n        });\n    const caseInsensitiveClause = {};\n    caseInsensitiveClause[fieldName] =\n        new RegExp(`^${Meteor._escapeRegExp(string)}$`, 'i')\n    return {$and: [{$or: orClause}, caseInsensitiveClause]};\n  }\n\n  _findUserByQuery = (query, options) => {\n    let user = null;\n\n    if (query.id) {\n      // default field selector is added within getUserById()\n      user = Meteor.users.findOne(query.id, this._addDefaultFieldSelector(options));\n    } else {\n      options = this._addDefaultFieldSelector(options);\n      let fieldName;\n      let fieldValue;\n      if (query.username) {\n        fieldName = 'username';\n        fieldValue = query.username;\n      } else if (query.email) {\n        fieldName = 'emails.address';\n        fieldValue = query.email;\n      } else {\n        throw new Error(\"shouldn't happen (validation missed something)\");\n      }\n      let selector = {};\n      selector[fieldName] = fieldValue;\n      user = Meteor.users.findOne(selector, options);\n      // If user is not found, try a case insensitive lookup\n      if (!user) {\n        selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n        const candidateUsers = Meteor.users.find(selector, { ...options, limit: 2 }).fetch();\n        // No match if multiple candidates are found\n        if (candidateUsers.length === 1) {\n          user = candidateUsers[0];\n        }\n      }\n    }\n\n    return user;\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  async _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = {\n        ...this._loginUser(\n          methodInvocation,\n          result.userId,\n          result.stampedLoginToken\n        ),\n        ...result.options\n      };\n      ret.type = attempt.type;\n      this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  async _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return await this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      await tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  /**\n   * @summary Registers a new login handler.\n   * @locus Server\n   * @param {String} [name] The type of login method like oauth, password, etc.\n   * @param {Function} handler A function that receives an options object\n   * (as passed as an argument to the `login` method) and returns one of\n   * `undefined`, meaning don't handle or a login method result object.\n   */\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: Meteor.wrapFn(handler)\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  async _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = await tryLoginMethod(handler.name, async () =>\n        await handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(\n          400,\n          'A login handler should return a result or undefined'\n        );\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = async function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = await accounts._runLoginHandlers(this, options);\n      //console.log({result});\n\n      return await accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        if (ServiceConfiguration.configurations.findOne({service: options.service}))\n          throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n        if (Package[\"oauth-encryption\"]) {\n          const { OAuthEncryption } = Package[\"oauth-encryption\"]\n          if (hasOwn.call(options, 'secret') && OAuthEncryption.keyIsLoaded())\n            options.secret = OAuthEncryption.seal(options.secret);\n        }\n\n        ServiceConfiguration.configurations.insert(options);\n      }\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", function() {\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n      }\n      this.ready();\n    }, {is_auto: true}); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields);\n      // If the custom fields are negative, then ignore them and only send the necessary fields\n      const fields = keys.length > 0 && customFields[keys[0]] ? {\n        ...this._addDefaultFieldSelector().fields,\n        ..._defaultPublishFields.projection\n      } : _defaultPublishFields.projection\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (! hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }}).forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        );\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {fields: this._options.defaultFieldSelector});\n\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({serviceName, serviceData, options})\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  };\n\n  /**\n   * @summary Removes default rate limiting rule\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  /**\n   * @summary Add a default rule of limiting logins, creating new users and password reset\n   * to 5 times every 10 seconds per connection.\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  generateOptionsForEmail(email, user, url, reason, extra = {}){\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from\n        ? this.emailTemplates[reason].from(user)\n        : this.emailTemplates.from,\n      subject: this.emailTemplates[reason].subject(user, url, extra),\n    };\n\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = this.emailTemplates[reason].text(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = this.emailTemplates[reason].html(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n\n    return options;\n  };\n\n  _checkForCaseInsensitiveDuplicates(\n    fieldName,\n    displayName,\n    fieldValue,\n    ownUserId\n  ) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(\n      this._skipCaseInsensitiveChecksForTest,\n      fieldValue\n    );\n\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = Meteor.users\n        .find(\n          this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue),\n          {\n            fields: { _id: 1 },\n            // we only need a maximum of 2 users for the logic below to work\n            limit: 2,\n          }\n        )\n        .fetch();\n\n      if (\n        matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n          // Otherwise, check to see if there are multiple matches or a match\n          // that is not us\n          matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)\n      ) {\n        this._handleError(`${displayName} already exists.`);\n      }\n    }\n  };\n\n  _createUserCheckingDuplicates({ user, email, username, options }) {\n    const newUser = {\n      ...user,\n      ...(username ? { username } : {}),\n      ...(email ? { emails: [{ address: email, verified: false }] } : {}),\n    };\n\n    // Perform a case insensitive check before insert\n    this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n    this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n    const userId = this.insertUserDoc(options, newUser);\n    // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n    try {\n      this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n      this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      Meteor.users.remove(userId);\n      throw ex;\n    }\n    return userId;\n  }\n\n  _handleError = (msg, throwError = true, errorCode = 403) => {\n    const error = new Meteor.Error(\n      errorCode,\n      this._options.ambiguousErrorMessages\n        ? \"Something went wrong. Please check your credentials.\"\n        : msg\n    );\n    if (throwError) {\n      throw error;\n    }\n    return error;\n  }\n\n  _userQueryValidator = Match.Where(user => {\n    check(user, {\n      id: Match.Optional(NonEmptyString),\n      username: Match.Optional(NonEmptyString),\n      email: Match.Optional(NonEmptyString)\n    });\n    if (Object.keys(user).length !== 1)\n      throw new Match.Error(\"User property must have exactly one field\");\n    return true;\n  });\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = async (type, fn) => {\n  let result;\n  try {\n    result = await fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n        $or: [\n          {\"services.resume.loginTokens.hashedToken\": hashedToken},\n          {\"services.resume.loginTokens.token\": options.resume}\n        ]\n      },\n      // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n      {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (\n  accounts,\n  oldestValidDate,\n  tokenFilter,\n  userId\n) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {_id: userId} : {};\n  // check if this method was called from enroll account workflow\n  if(tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n  let resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  if(isEnroll) {\n    resetRangeOr = {\n      $or: [\n        { \"services.password.enroll.when\": { $lt: oldestValidDate } },\n        { \"services.password.enroll.when\": { $lt: +oldestValidDate } }\n      ]\n    };\n  }\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n  if(isEnroll) {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, { multi: true });\n  } else {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, { multi: true });\n  }\n\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\nconst OAuthEncryption = Package[\"oauth-encryption\"]?.OAuthEncryption;\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption?.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users.createIndexAsync('username', { unique: true, sparse: true });\n  users.createIndexAsync('emails.address', { unique: true, sparse: true });\n  users.createIndexAsync('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  users.createIndexAsync('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users.createIndexAsync('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  users.createIndexAsync(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  users.createIndexAsync('services.password.reset.when', { sparse: true });\n  users.createIndexAsync('services.password.enroll.when', { sparse: true });\n};\n\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...(permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    })));\n  }\n  return permutations;\n}\n\n"],"mappings":";;AAAA,IAAIA,wBAAwB;AAACC,MAAM,CAACC,IAAI,CAAC,gDAAgD,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACJ,wBAAwB,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,aAAa;AAACJ,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACC,aAAa,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAA3OH,MAAM,CAACK,MAAM,CAAC;EAACC,cAAc,EAACA,CAAA,KAAIA;AAAc,CAAC,CAAC;AAAC,IAAIC,MAAM;AAACP,MAAM,CAACC,IAAI,CAAC,QAAQ,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACI,MAAM,GAACJ,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIK,MAAM;AAACR,MAAM,CAACC,IAAI,CAAC,eAAe,EAAC;EAACO,MAAMA,CAACL,CAAC,EAAC;IAACK,MAAM,GAACL,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIM,cAAc,EAACC,yBAAyB;AAACV,MAAM,CAACC,IAAI,CAAC,sBAAsB,EAAC;EAACQ,cAAcA,CAACN,CAAC,EAAC;IAACM,cAAc,GAACN,CAAC;EAAA,CAAC;EAACO,yBAAyBA,CAACP,CAAC,EAAC;IAACO,yBAAyB,GAACP,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIQ,GAAG;AAACX,MAAM,CAACC,IAAI,CAAC,YAAY,EAAC;EAACU,GAAGA,CAACR,CAAC,EAAC;IAACQ,GAAG,GAACR,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAQnZ,MAAMS,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,cAAc;;AAE9C;AACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,KAAK,CAACC,CAAC,IAAI;EACtCC,KAAK,CAACD,CAAC,EAAEE,MAAM,CAAC;EAChB,OAAOF,CAAC,CAACG,MAAM,GAAG,CAAC;AACrB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMhB,cAAc,SAASG,cAAc,CAAC;EACjD;EACA;EACA;EACAc,WAAWA,CAACC,MAAM,EAAEC,QAAO,EAAE;IAAA,IAAAC,KAAA;IAC3B,KAAK,CAACD,QAAO,IAAI,CAAC,CAAC,CAAC;IAAAC,KAAA,GAAAC,IAAA;IAuItB;IACA;IACA;IAEA;AACF;AACA;AACA;AACA;AACA;IALE,KAMAC,kBAAkB,GAAG,UAASC,IAAI,EAAE;MAClC,IAAI,IAAI,CAACC,uBAAuB,EAAE;QAChC,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;MAC1D;MAEA,IAAI,CAACD,uBAAuB,GAAGD,IAAI;IACrC,CAAC;IA2FD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KACAG,qCAAqC,GAAG,CAACC,SAAS,EAAEC,MAAM,KAAK;MAC7D;MACA,MAAMC,MAAM,GAAGD,MAAM,CAACE,SAAS,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACZ,MAAM,EAAE,CAAC,CAAC,CAAC;MAC9D,MAAMiB,QAAQ,GAAGC,iCAAiC,CAACL,MAAM,CAAC,CAACM,GAAG,CAC1DC,iBAAiB,IAAI;QACnB,MAAMC,QAAQ,GAAG,CAAC,CAAC;QACnBA,QAAQ,CAACV,SAAS,CAAC,GACf,IAAIW,MAAM,KAAAC,MAAA,CAAKrC,MAAM,CAACsC,aAAa,CAACJ,iBAAiB,CAAC,CAAE,CAAC;QAC7D,OAAOC,QAAQ;MACjB,CAAC,CAAC;MACN,MAAMI,qBAAqB,GAAG,CAAC,CAAC;MAChCA,qBAAqB,CAACd,SAAS,CAAC,GAC5B,IAAIW,MAAM,KAAAC,MAAA,CAAKrC,MAAM,CAACsC,aAAa,CAACZ,MAAM,CAAC,QAAK,GAAG,CAAC;MACxD,OAAO;QAACc,IAAI,EAAE,CAAC;UAACC,GAAG,EAAEV;QAAQ,CAAC,EAAEQ,qBAAqB;MAAC,CAAC;IACzD,CAAC;IAAA,KAEDG,gBAAgB,GAAG,CAACC,KAAK,EAAE1B,OAAO,KAAK;MACrC,IAAI2B,IAAI,GAAG,IAAI;MAEf,IAAID,KAAK,CAACE,EAAE,EAAE;QACZ;QACAD,IAAI,GAAG5C,MAAM,CAAC8C,KAAK,CAACC,OAAO,CAACJ,KAAK,CAACE,EAAE,EAAE,IAAI,CAACG,wBAAwB,CAAC/B,OAAO,CAAC,CAAC;MAC/E,CAAC,MAAM;QACLA,OAAO,GAAG,IAAI,CAAC+B,wBAAwB,CAAC/B,OAAO,CAAC;QAChD,IAAIQ,SAAS;QACb,IAAIwB,UAAU;QACd,IAAIN,KAAK,CAACO,QAAQ,EAAE;UAClBzB,SAAS,GAAG,UAAU;UACtBwB,UAAU,GAAGN,KAAK,CAACO,QAAQ;QAC7B,CAAC,MAAM,IAAIP,KAAK,CAACQ,KAAK,EAAE;UACtB1B,SAAS,GAAG,gBAAgB;UAC5BwB,UAAU,GAAGN,KAAK,CAACQ,KAAK;QAC1B,CAAC,MAAM;UACL,MAAM,IAAI5B,KAAK,CAAC,gDAAgD,CAAC;QACnE;QACA,IAAIY,QAAQ,GAAG,CAAC,CAAC;QACjBA,QAAQ,CAACV,SAAS,CAAC,GAAGwB,UAAU;QAChCL,IAAI,GAAG5C,MAAM,CAAC8C,KAAK,CAACC,OAAO,CAACZ,QAAQ,EAAElB,OAAO,CAAC;QAC9C;QACA,IAAI,CAAC2B,IAAI,EAAE;UACTT,QAAQ,GAAG,IAAI,CAACX,qCAAqC,CAACC,SAAS,EAAEwB,UAAU,CAAC;UAC5E,MAAMG,cAAc,GAAGpD,MAAM,CAAC8C,KAAK,CAACO,IAAI,CAAClB,QAAQ,EAAAvC,aAAA,CAAAA,aAAA,KAAOqB,OAAO;YAAEqC,KAAK,EAAE;UAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC;UACpF;UACA,IAAIH,cAAc,CAACtC,MAAM,KAAK,CAAC,EAAE;YAC/B8B,IAAI,GAAGQ,cAAc,CAAC,CAAC,CAAC;UAC1B;QACF;MACF;MAEA,OAAOR,IAAI;IACb,CAAC;IAAA,KA4oCDY,YAAY,GAAG,UAACC,GAAG,EAAyC;MAAA,IAAvCC,UAAU,GAAAC,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;MAAA,IAAEE,SAAS,GAAAF,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;MACrD,MAAMG,KAAK,GAAG,IAAI9D,MAAM,CAACuB,KAAK,CAC5BsC,SAAS,EACT3C,KAAI,CAAC6C,QAAQ,CAACC,sBAAsB,GAChC,sDAAsD,GACtDP,GACN,CAAC;MACD,IAAIC,UAAU,EAAE;QACd,MAAMI,KAAK;MACb;MACA,OAAOA,KAAK;IACd,CAAC;IAAA,KAEDG,mBAAmB,GAAGxD,KAAK,CAACC,KAAK,CAACkC,IAAI,IAAI;MACxChC,KAAK,CAACgC,IAAI,EAAE;QACVC,EAAE,EAAEpC,KAAK,CAACyD,QAAQ,CAAC1D,cAAc,CAAC;QAClC0C,QAAQ,EAAEzC,KAAK,CAACyD,QAAQ,CAAC1D,cAAc,CAAC;QACxC2C,KAAK,EAAE1C,KAAK,CAACyD,QAAQ,CAAC1D,cAAc;MACtC,CAAC,CAAC;MACF,IAAIH,MAAM,CAAC8D,IAAI,CAACvB,IAAI,CAAC,CAAC9B,MAAM,KAAK,CAAC,EAChC,MAAM,IAAIL,KAAK,CAACc,KAAK,CAAC,2CAA2C,CAAC;MACpE,OAAO,IAAI;IACb,CAAC,CAAC;IA78CA,IAAI,CAAC6C,OAAO,GAAGpD,MAAM,IAAIhB,MAAM,CAACgB,MAAM;IACtC;IACA,IAAI,CAACqD,kBAAkB,CAAC,CAAC;IAEzB,IAAI,CAACC,qBAAqB,CAAC,CAAC;;IAE5B;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,kBAAkB,GAAG;MACxBC,YAAY,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC;MAC/CC,UAAU,EAAE,CAAC,SAAS,EAAE,UAAU;IACpC,CAAC;;IAED;IACA;IACA;IACA,IAAI,CAACC,qBAAqB,GAAG;MAC3BC,UAAU,EAAE;QACVC,OAAO,EAAE,CAAC;QACV1B,QAAQ,EAAE,CAAC;QACX2B,MAAM,EAAE;MACV;IACF,CAAC;IAED,IAAI,CAACC,uBAAuB,CAAC,CAAC;;IAE9B;IACA,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;;IAEtB;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,2BAA2B,GAAG,CAAC,CAAC;IACrC,IAAI,CAACC,sBAAsB,GAAG,CAAC,CAAC,CAAE;;IAElC;IACA,IAAI,CAACC,cAAc,GAAG,EAAE;IAExBC,oBAAoB,CAAC,IAAI,CAACrC,KAAK,CAAC;IAChCsC,yBAAyB,CAAC,IAAI,CAAC;IAC/BC,uBAAuB,CAAC,IAAI,CAAC;IAE7B,IAAI,CAACC,kBAAkB,GAAG,IAAIC,IAAI,CAAC;MAAEC,eAAe,EAAE;IAAM,CAAC,CAAC;IAC9D,IAAI,CAACC,qBAAqB,GAAG,CAC3BC,0BAA0B,CAACC,IAAI,CAAC,IAAI,CAAC,CACtC;IAED,IAAI,CAACC,sCAAsC,CAAC,CAAC;IAE7C,IAAI,CAACC,iCAAiC,GAAG,CAAC,CAAC;IAE3C,IAAI,CAACC,IAAI,GAAG;MACVC,aAAa,EAAEA,CAACC,KAAK,EAAEC,WAAW,KAAK,IAAI,CAACC,aAAa,qBAAA7D,MAAA,CAAqB2D,KAAK,GAAIC,WAAW,CAAC;MACnGE,WAAW,EAAEA,CAACH,KAAK,EAAEC,WAAW,KAAK,IAAI,CAACC,aAAa,mBAAA7D,MAAA,CAAmB2D,KAAK,GAAIC,WAAW,CAAC;MAC/FG,UAAU,EAAEA,CAACjE,QAAQ,EAAE6D,KAAK,EAAEC,WAAW,KACvC,IAAI,CAACC,aAAa,iBAAA7D,MAAA,CAAiB2D,KAAK,gBAAA3D,MAAA,CAAaF,QAAQ,GAAI8D,WAAW,CAAC;MAC/EI,aAAa,EAAEA,CAACL,KAAK,EAAEC,WAAW,KAAK,IAAI,CAACC,aAAa,qBAAA7D,MAAA,CAAqB2D,KAAK,GAAIC,WAAW;IACpG,CAAC;IAED,IAAI,CAACK,mBAAmB,CAAC,CAAC;IAE1B,IAAI,CAACJ,aAAa,GAAG,UAACK,IAAI,EAAuB;MAAA,IAArBN,WAAW,GAAAtC,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC,CAAC;MAC1C,MAAM6C,GAAG,GAAG,IAAIrG,GAAG,CAACH,MAAM,CAACyG,WAAW,CAACF,IAAI,CAAC,CAAC;MAC7C,MAAMG,MAAM,GAAGrG,MAAM,CAACsG,OAAO,CAACV,WAAW,CAAC;MAC1C,IAAIS,MAAM,CAAC5F,MAAM,GAAG,CAAC,EAAE;QACrB;QACA,KAAK,MAAM,CAAC8F,GAAG,EAAEC,KAAK,CAAC,IAAIH,MAAM,EAAE;UACjCF,GAAG,CAACM,YAAY,CAACC,MAAM,CAACH,GAAG,EAAEC,KAAK,CAAC;QACrC;MACF;MACA,OAAOL,GAAG,CAACQ,QAAQ,CAAC,CAAC;IACvB,CAAC;EACH;;EAEA;EACA;EACA;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,iBAAiB,GAAGC,GAAG,CAACC,wBAAwB,CAACC,GAAG,CAAC,CAAC,IAAIF,GAAG,CAACG,6BAA6B,CAACD,GAAG,CAAC,CAAC;IACvG,IAAI,CAACH,iBAAiB,EACpB,MAAM,IAAI3F,KAAK,CAAC,oEAAoE,CAAC;IACvF,OAAO2F,iBAAiB,CAACD,MAAM;EACjC;;EAEA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;EACEM,oBAAoBA,CAAClG,IAAI,EAAE;IACzB;IACA,OAAO,IAAI,CAACiE,kBAAkB,CAACkC,QAAQ,CAACnG,IAAI,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EACEoG,eAAeA,CAACpG,IAAI,EAAE;IACpB,IAAI,CAACoE,qBAAqB,CAACiC,IAAI,CAACrG,IAAI,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;EACEsG,mBAAmBA,CAACtG,IAAI,EAAE;IACxB,IAAI,IAAI,CAACuG,wBAAwB,EAAE;MACjC,MAAM,IAAIrG,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IAEA,IAAI,CAACqG,wBAAwB,GAAGvG,IAAI;EACtC;EAoBA;AACF;AACA;AACA;AACA;EACEwG,YAAYA,CAACxG,IAAI,EAAE;IACjB,IAAI,IAAI,CAACyG,iBAAiB,EAAE;MAC1B,MAAM,IAAIvG,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,IAAI,CAACuG,iBAAiB,GAAG9H,MAAM,CAAC+H,MAAM,CAAC1G,IAAI,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EACE2G,eAAeA,CAAC3G,IAAI,EAAE;IACpB,IAAI,IAAI,CAAC4G,oBAAoB,EAAE;MAC7B,MAAM,IAAI1G,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAI,CAAC0G,oBAAoB,GAAG5G,IAAI;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE6G,oCAAoCA,CAAC7G,IAAI,EAAE;IACzC,IAAI,IAAI,CAAC8G,kCAAkC,EAAE;MAC3C,MAAM,IAAI5G,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IACA,IAAI,CAAC4G,kCAAkC,GAAG9G,IAAI;EAChD;EAEA+G,cAAcA,CAACC,UAAU,EAAEC,OAAO,EAAE;IAClC,IAAI,CAAChD,kBAAkB,CAACiD,OAAO,CAACC,QAAQ,IAAI;MAC1C,IAAIC,GAAG;MACP,IAAI;QACFA,GAAG,GAAGD,QAAQ,CAACE,0BAA0B,CAACL,UAAU,EAAEC,OAAO,CAAC,CAAC;MACjE,CAAC,CACD,OAAOK,CAAC,EAAE;QACRL,OAAO,CAACM,OAAO,GAAG,KAAK;QACvB;QACA;QACA;QACA;QACAN,OAAO,CAACxE,KAAK,GAAG6E,CAAC;QACjB,OAAO,IAAI;MACb;MACA,IAAI,CAAEF,GAAG,EAAE;QACTH,OAAO,CAACM,OAAO,GAAG,KAAK;QACvB;QACA;QACA,IAAI,CAACN,OAAO,CAACxE,KAAK,EAChBwE,OAAO,CAACxE,KAAK,GAAG,IAAI9D,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,iBAAiB,CAAC;MAC5D;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EAEAsH,gBAAgBA,CAACR,UAAU,EAAEC,OAAO,EAAE;IACpC,IAAI,CAACQ,YAAY,CAACC,IAAI,CAACP,QAAQ,IAAI;MACjCA,QAAQ,CAACE,0BAA0B,CAACL,UAAU,EAAEC,OAAO,CAAC,CAAC;MACzD,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EAEAU,YAAYA,CAACX,UAAU,EAAEC,OAAO,EAAE;IAChC,IAAI,CAACW,mBAAmB,CAACF,IAAI,CAACP,QAAQ,IAAI;MACxCA,QAAQ,CAACE,0BAA0B,CAACL,UAAU,EAAEC,OAAO,CAAC,CAAC;MACzD,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EAEAY,iBAAiBA,CAACb,UAAU,EAAEpB,MAAM,EAAE;IACpC;IACA,IAAIrE,IAAI;IACR,IAAI,CAACuG,aAAa,CAACJ,IAAI,CAACP,QAAQ,IAAI;MAClC,IAAI,CAAC5F,IAAI,IAAIqE,MAAM,EAAErE,IAAI,GAAG,IAAI,CAACE,KAAK,CAACC,OAAO,CAACkE,MAAM,EAAE;QAACmC,MAAM,EAAE,IAAI,CAACrF,QAAQ,CAACsF;MAAoB,CAAC,CAAC;MACpGb,QAAQ,CAAC;QAAE5F,IAAI;QAAEyF;MAAW,CAAC,CAAC;MAC9B,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;EA+DA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAiB,UAAUA,CAACC,gBAAgB,EAAEtC,MAAM,EAAEuC,iBAAiB,EAAE;IACtD,IAAI,CAAEA,iBAAiB,EAAE;MACvBA,iBAAiB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;MACrD,IAAI,CAACC,iBAAiB,CAACzC,MAAM,EAAEuC,iBAAiB,CAAC;IACnD;;IAEA;IACA;IACA;IACA;IACA;IACA;IACAxJ,MAAM,CAAC2J,gBAAgB,CAAC,MACtB,IAAI,CAACC,cAAc,CACjB3C,MAAM,EACNsC,gBAAgB,CAAClB,UAAU,EAC3B,IAAI,CAACwB,eAAe,CAACL,iBAAiB,CAACxD,KAAK,CAC9C,CACF,CAAC;IAEDuD,gBAAgB,CAACO,SAAS,CAAC7C,MAAM,CAAC;IAElC,OAAO;MACLpE,EAAE,EAAEoE,MAAM;MACVjB,KAAK,EAAEwD,iBAAiB,CAACxD,KAAK;MAC9B+D,YAAY,EAAE,IAAI,CAACC,gBAAgB,CAACR,iBAAiB,CAACS,IAAI;IAC5D,CAAC;EACH;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACMC,aAAaA,CACjBX,gBAAgB,EAChBY,UAAU,EACVC,UAAU,EACVC,MAAM;IAAA,OAAAC,OAAA,CAAAC,UAAA,OACN;MACA,IAAI,CAACF,MAAM,EACT,MAAM,IAAI9I,KAAK,CAAC,oBAAoB,CAAC;;MAEvC;MACA;MACA;MACA,IAAI,CAAC8I,MAAM,CAACpD,MAAM,IAAI,CAACoD,MAAM,CAACvG,KAAK,EACjC,MAAM,IAAIvC,KAAK,CAAC,kDAAkD,CAAC;MAErE,IAAIqB,IAAI;MACR,IAAIyH,MAAM,CAACpD,MAAM,EACfrE,IAAI,GAAG,IAAI,CAACE,KAAK,CAACC,OAAO,CAACsH,MAAM,CAACpD,MAAM,EAAE;QAACmC,MAAM,EAAE,IAAI,CAACrF,QAAQ,CAACsF;MAAoB,CAAC,CAAC;MAExF,MAAMf,OAAO,GAAG;QACdkC,IAAI,EAAEH,MAAM,CAACG,IAAI,IAAI,SAAS;QAC9B5B,OAAO,EAAE,CAAC,EAAGyB,MAAM,CAACpD,MAAM,IAAI,CAACoD,MAAM,CAACvG,KAAK,CAAC;QAC5CqG,UAAU,EAAEA,UAAU;QACtBM,eAAe,EAAEC,KAAK,CAACC,IAAI,CAACP,UAAU;MACxC,CAAC;MACD,IAAIC,MAAM,CAACvG,KAAK,EAAE;QAChBwE,OAAO,CAACxE,KAAK,GAAGuG,MAAM,CAACvG,KAAK;MAC9B;MACA,IAAIlB,IAAI,EAAE;QACR0F,OAAO,CAAC1F,IAAI,GAAGA,IAAI;MACrB;;MAEA;MACA;MACA;MACA,IAAI,CAACwF,cAAc,CAACmB,gBAAgB,CAAClB,UAAU,EAAEC,OAAO,CAAC;MAEzD,IAAIA,OAAO,CAACM,OAAO,EAAE;QACnB,MAAMH,GAAG,GAAA7I,aAAA,CAAAA,aAAA,KACJ,IAAI,CAAC0J,UAAU,CAChBC,gBAAgB,EAChBc,MAAM,CAACpD,MAAM,EACboD,MAAM,CAACb,iBACT,CAAC,GACEa,MAAM,CAACpJ,OAAO,CAClB;QACDwH,GAAG,CAAC+B,IAAI,GAAGlC,OAAO,CAACkC,IAAI;QACvB,IAAI,CAAC3B,gBAAgB,CAACU,gBAAgB,CAAClB,UAAU,EAAEC,OAAO,CAAC;QAC3D,OAAOG,GAAG;MACZ,CAAC,MACI;QACH,IAAI,CAACO,YAAY,CAACO,gBAAgB,CAAClB,UAAU,EAAEC,OAAO,CAAC;QACvD,MAAMA,OAAO,CAACxE,KAAK;MACrB;IACF,CAAC;EAAA;EAED;EACA;EACA;EACA;EACM8G,YAAYA,CAChBrB,gBAAgB,EAChBY,UAAU,EACVC,UAAU,EACVI,IAAI,EACJK,EAAE;IAAA,OAAAP,OAAA,CAAAC,UAAA,OACF;MACA,OAAAD,OAAA,CAAAQ,KAAA,CAAa,IAAI,CAACZ,aAAa,CAC7BX,gBAAgB,EAChBY,UAAU,EACVC,UAAU,EAAAE,OAAA,CAAAQ,KAAA,CACJC,cAAc,CAACP,IAAI,EAAEK,EAAE,CAAC,CAChC,CAAC;IACH,CAAC;EAAA;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACAG,mBAAmBA,CACjBzB,gBAAgB,EAChBY,UAAU,EACVC,UAAU,EACVC,MAAM,EACN;IACA,MAAM/B,OAAO,GAAG;MACdkC,IAAI,EAAEH,MAAM,CAACG,IAAI,IAAI,SAAS;MAC9B5B,OAAO,EAAE,KAAK;MACd9E,KAAK,EAAEuG,MAAM,CAACvG,KAAK;MACnBqG,UAAU,EAAEA,UAAU;MACtBM,eAAe,EAAEC,KAAK,CAACC,IAAI,CAACP,UAAU;IACxC,CAAC;IAED,IAAIC,MAAM,CAACpD,MAAM,EAAE;MACjBqB,OAAO,CAAC1F,IAAI,GAAG,IAAI,CAACE,KAAK,CAACC,OAAO,CAACsH,MAAM,CAACpD,MAAM,EAAE;QAACmC,MAAM,EAAE,IAAI,CAACrF,QAAQ,CAACsF;MAAoB,CAAC,CAAC;IAChG;IAEA,IAAI,CAACjB,cAAc,CAACmB,gBAAgB,CAAClB,UAAU,EAAEC,OAAO,CAAC;IACzD,IAAI,CAACU,YAAY,CAACO,gBAAgB,CAAClB,UAAU,EAAEC,OAAO,CAAC;;IAEvD;IACA;IACA,OAAOA,OAAO;EAChB;EAEA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE2C,oBAAoBA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAClC,IAAI,CAAEA,OAAO,EAAE;MACbA,OAAO,GAAGD,IAAI;MACdA,IAAI,GAAG,IAAI;IACb;IAEA,IAAI,CAAChG,cAAc,CAACwC,IAAI,CAAC;MACvBwD,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEnL,MAAM,CAAC+H,MAAM,CAACoD,OAAO;IAChC,CAAC,CAAC;EACJ;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACMC,iBAAiBA,CAAC7B,gBAAgB,EAAEtI,OAAO;IAAA,OAAAqJ,OAAA,CAAAC,UAAA,OAAE;MACjD,KAAK,IAAIY,OAAO,IAAI,IAAI,CAACjG,cAAc,EAAE;QACvC,MAAMmF,MAAM,GAAAC,OAAA,CAAAQ,KAAA,CAASC,cAAc,CAACI,OAAO,CAACD,IAAI,EAAE,MAAAZ,OAAA,CAAAC,UAAA,OAAAD,OAAA,CAAAQ,KAAA,CAC1CK,OAAO,CAACA,OAAO,CAACE,IAAI,CAAC9B,gBAAgB,EAAEtI,OAAO,CAAC,EACvD,CAAC;QAED,IAAIoJ,MAAM,EAAE;UACV,OAAOA,MAAM;QACf;QAEA,IAAIA,MAAM,KAAKzG,SAAS,EAAE;UACxB,MAAM,IAAI5D,MAAM,CAACuB,KAAK,CACpB,GAAG,EACH,qDACF,CAAC;QACH;MACF;MAEA,OAAO;QACLiJ,IAAI,EAAE,IAAI;QACV1G,KAAK,EAAE,IAAI9D,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,wCAAwC;MACvE,CAAC;IACH,CAAC;EAAA;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA+J,YAAYA,CAACrE,MAAM,EAAEb,UAAU,EAAE;IAC/B,IAAI,CAACtD,KAAK,CAACyI,MAAM,CAACtE,MAAM,EAAE;MACxBuE,KAAK,EAAE;QACL,6BAA6B,EAAE;UAC7B/I,GAAG,EAAE,CACH;YAAEgJ,WAAW,EAAErF;UAAW,CAAC,EAC3B;YAAEJ,KAAK,EAAEI;UAAW,CAAC;QAEzB;MACF;IACF,CAAC,CAAC;EACJ;EAEA/B,kBAAkBA,CAAA,EAAG;IACnB;IACA;IACA,MAAMqH,QAAQ,GAAG,IAAI;;IAGrB;IACA;IACA,MAAMC,OAAO,GAAG,CAAC,CAAC;;IAElB;IACA;IACA;IACA;IACAA,OAAO,CAACC,KAAK,GAAG,UAAgB3K,OAAO;MAAA,OAAAqJ,OAAA,CAAAC,UAAA,OAAE;QACvC;QACA;QACA3J,KAAK,CAACK,OAAO,EAAEZ,MAAM,CAAC;QAEtB,MAAMgK,MAAM,GAAAC,OAAA,CAAAQ,KAAA,CAASY,QAAQ,CAACN,iBAAiB,CAAC,IAAI,EAAEnK,OAAO,CAAC;QAC9D;;QAEA,OAAAqJ,OAAA,CAAAQ,KAAA,CAAaY,QAAQ,CAACxB,aAAa,CAAC,IAAI,EAAE,OAAO,EAAEvG,SAAS,EAAE0G,MAAM,CAAC;MACvE,CAAC;IAAA;IAEDsB,OAAO,CAACE,MAAM,GAAG,YAAY;MAC3B,MAAM7F,KAAK,GAAG0F,QAAQ,CAACI,cAAc,CAAC,IAAI,CAACzD,UAAU,CAACxF,EAAE,CAAC;MACzD6I,QAAQ,CAAC9B,cAAc,CAAC,IAAI,CAAC3C,MAAM,EAAE,IAAI,CAACoB,UAAU,EAAE,IAAI,CAAC;MAC3D,IAAIrC,KAAK,IAAI,IAAI,CAACiB,MAAM,EAAE;QACxByE,QAAQ,CAACJ,YAAY,CAAC,IAAI,CAACrE,MAAM,EAAEjB,KAAK,CAAC;MAC3C;MACA0F,QAAQ,CAACxC,iBAAiB,CAAC,IAAI,CAACb,UAAU,EAAE,IAAI,CAACpB,MAAM,CAAC;MACxD,IAAI,CAAC6C,SAAS,CAAC,IAAI,CAAC;IACtB,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA6B,OAAO,CAACI,WAAW,GAAG,YAAY;MAChC,MAAMnJ,IAAI,GAAG8I,QAAQ,CAAC5I,KAAK,CAACC,OAAO,CAAC,IAAI,CAACkE,MAAM,EAAE;QAC/CmC,MAAM,EAAE;UAAE,6BAA6B,EAAE;QAAE;MAC7C,CAAC,CAAC;MACF,IAAI,CAAE,IAAI,CAACnC,MAAM,IAAI,CAAErE,IAAI,EAAE;QAC3B,MAAM,IAAI5C,MAAM,CAACuB,KAAK,CAAC,wBAAwB,CAAC;MAClD;MACA;MACA;MACA;MACA;MACA,MAAMyK,kBAAkB,GAAGN,QAAQ,CAACI,cAAc,CAAC,IAAI,CAACzD,UAAU,CAACxF,EAAE,CAAC;MACtE,MAAMoJ,mBAAmB,GAAGrJ,IAAI,CAACsJ,QAAQ,CAACC,MAAM,CAACC,WAAW,CAAC/I,IAAI,CAC/DgJ,YAAY,IAAIA,YAAY,CAACZ,WAAW,KAAKO,kBAC/C,CAAC;MACD,IAAI,CAAEC,mBAAmB,EAAE;QAAE;QAC3B,MAAM,IAAIjM,MAAM,CAACuB,KAAK,CAAC,qBAAqB,CAAC;MAC/C;MACA,MAAM+K,eAAe,GAAGZ,QAAQ,CAACjC,0BAA0B,CAAC,CAAC;MAC7D6C,eAAe,CAACrC,IAAI,GAAGgC,mBAAmB,CAAChC,IAAI;MAC/CyB,QAAQ,CAAChC,iBAAiB,CAAC,IAAI,CAACzC,MAAM,EAAEqF,eAAe,CAAC;MACxD,OAAOZ,QAAQ,CAACpC,UAAU,CAAC,IAAI,EAAE,IAAI,CAACrC,MAAM,EAAEqF,eAAe,CAAC;IAChE,CAAC;;IAED;IACA;IACA;IACAX,OAAO,CAACY,iBAAiB,GAAG,YAAY;MACtC,IAAI,CAAE,IAAI,CAACtF,MAAM,EAAE;QACjB,MAAM,IAAIjH,MAAM,CAACuB,KAAK,CAAC,wBAAwB,CAAC;MAClD;MACA,MAAMiL,YAAY,GAAGd,QAAQ,CAACI,cAAc,CAAC,IAAI,CAACzD,UAAU,CAACxF,EAAE,CAAC;MAChE6I,QAAQ,CAAC5I,KAAK,CAACyI,MAAM,CAAC,IAAI,CAACtE,MAAM,EAAE;QACjCuE,KAAK,EAAE;UACL,6BAA6B,EAAE;YAAEC,WAAW,EAAE;cAAEgB,GAAG,EAAED;YAAa;UAAE;QACtE;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA;IACAb,OAAO,CAACe,qBAAqB,GAAIzL,OAAO,IAAK;MAC3CL,KAAK,CAACK,OAAO,EAAER,KAAK,CAACkM,eAAe,CAAC;QAACC,OAAO,EAAE/L;MAAM,CAAC,CAAC,CAAC;MACxD;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,EAAE6K,QAAQ,CAACmB,KAAK,IACfnB,QAAQ,CAACmB,KAAK,CAACC,YAAY,CAAC,CAAC,CAACC,QAAQ,CAAC9L,OAAO,CAAC2L,OAAO,CAAC,CAAC,EAAE;QAC7D,MAAM,IAAI5M,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,iBAAiB,CAAC;MAChD;MAEA,IAAIyL,OAAO,CAAC,uBAAuB,CAAC,EAAE;QACpC,MAAM;UAAEC;QAAqB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;QACjE,IAAIC,oBAAoB,CAACC,cAAc,CAACnK,OAAO,CAAC;UAAC6J,OAAO,EAAE3L,OAAO,CAAC2L;QAAO,CAAC,CAAC,EACzE,MAAM,IAAI5M,MAAM,CAACuB,KAAK,CAAC,GAAG,aAAAc,MAAA,CAAapB,OAAO,CAAC2L,OAAO,wBAAqB,CAAC;QAE9E,IAAII,OAAO,CAAC,kBAAkB,CAAC,EAAE;UAC/B,MAAM;YAAEG;UAAgB,CAAC,GAAGH,OAAO,CAAC,kBAAkB,CAAC;UACvD,IAAI5M,MAAM,CAACiL,IAAI,CAACpK,OAAO,EAAE,QAAQ,CAAC,IAAIkM,eAAe,CAACC,WAAW,CAAC,CAAC,EACjEnM,OAAO,CAACoM,MAAM,GAAGF,eAAe,CAACG,IAAI,CAACrM,OAAO,CAACoM,MAAM,CAAC;QACzD;QAEAJ,oBAAoB,CAACC,cAAc,CAACK,MAAM,CAACtM,OAAO,CAAC;MACrD;IACF,CAAC;IAEDyK,QAAQ,CAACtH,OAAO,CAACuH,OAAO,CAACA,OAAO,CAAC;EACnC;EAEArH,qBAAqBA,CAAA,EAAG;IACtB,IAAI,CAACF,OAAO,CAACoJ,YAAY,CAACnF,UAAU,IAAI;MACtC,IAAI,CAACtD,YAAY,CAACsD,UAAU,CAACxF,EAAE,CAAC,GAAG;QACjCwF,UAAU,EAAEA;MACd,CAAC;MAEDA,UAAU,CAACoF,OAAO,CAAC,MAAM;QACvB,IAAI,CAACC,0BAA0B,CAACrF,UAAU,CAACxF,EAAE,CAAC;QAC9C,OAAO,IAAI,CAACkC,YAAY,CAACsD,UAAU,CAACxF,EAAE,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAiC,uBAAuBA,CAAA,EAAG;IACxB;IACA,MAAM;MAAEhC,KAAK;MAAEyB,kBAAkB;MAAEG;IAAsB,CAAC,GAAG,IAAI;;IAEjE;IACA,IAAI,CAACN,OAAO,CAACuJ,OAAO,CAAC,kCAAkC,EAAE,YAAW;MAClE,IAAIX,OAAO,CAAC,uBAAuB,CAAC,EAAE;QACpC,MAAM;UAAEC;QAAqB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;QACjE,OAAOC,oBAAoB,CAACC,cAAc,CAAC7J,IAAI,CAAC,CAAC,CAAC,EAAE;UAAC+F,MAAM,EAAE;YAACiE,MAAM,EAAE;UAAC;QAAC,CAAC,CAAC;MAC5E;MACA,IAAI,CAACO,KAAK,CAAC,CAAC;IACd,CAAC,EAAE;MAACC,OAAO,EAAE;IAAI,CAAC,CAAC,CAAC,CAAC;;IAErB;IACA;IACA7N,MAAM,CAAC8N,OAAO,CAAC,MAAM;MACnB;MACA;MACA,MAAMC,YAAY,GAAG,IAAI,CAAC/K,wBAAwB,CAAC,CAAC,CAACoG,MAAM,IAAI,CAAC,CAAC;MACjE,MAAMjF,IAAI,GAAG9D,MAAM,CAAC8D,IAAI,CAAC4J,YAAY,CAAC;MACtC;MACA,MAAM3E,MAAM,GAAGjF,IAAI,CAACrD,MAAM,GAAG,CAAC,IAAIiN,YAAY,CAAC5J,IAAI,CAAC,CAAC,CAAC,CAAC,GAAAvE,aAAA,CAAAA,aAAA,KAClD,IAAI,CAACoD,wBAAwB,CAAC,CAAC,CAACoG,MAAM,GACtC1E,qBAAqB,CAACC,UAAU,IACjCD,qBAAqB,CAACC,UAAU;MACpC;MACA,IAAI,CAACP,OAAO,CAACuJ,OAAO,CAAC,IAAI,EAAE,YAAY;QACrC,IAAI,IAAI,CAAC1G,MAAM,EAAE;UACf,OAAOnE,KAAK,CAACO,IAAI,CAAC;YAChB2K,GAAG,EAAE,IAAI,CAAC/G;UACZ,CAAC,EAAE;YACDmC;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,EAAE,gCAAgC;QAACyE,OAAO,EAAE;MAAI,CAAC,CAAC;IACrD,CAAC,CAAC;;IAEF;IACA;IACAb,OAAO,CAACiB,WAAW,IAAIjO,MAAM,CAAC8N,OAAO,CAAC,MAAM;MAC1C;MACA,MAAMI,eAAe,GAAG9E,MAAM,IAAIA,MAAM,CAAC+E,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAAzO,aAAA,CAAAA,aAAA,KACnDwO,IAAI;QAAE,CAACC,KAAK,GAAG;MAAC,EAAG,EAC1B,CAAC,CACH,CAAC;MACD,IAAI,CAACjK,OAAO,CAACuJ,OAAO,CAAC,IAAI,EAAE,YAAY;QACrC,IAAI,IAAI,CAAC1G,MAAM,EAAE;UACf,OAAOnE,KAAK,CAACO,IAAI,CAAC;YAAE2K,GAAG,EAAE,IAAI,CAAC/G;UAAO,CAAC,EAAE;YACtCmC,MAAM,EAAE8E,eAAe,CAAC3J,kBAAkB,CAACC,YAAY;UACzD,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,EAAE,gCAAgC;QAACqJ,OAAO,EAAE;MAAI,CAAC,CAAC;;MAEnD;MACA;MACA;MACA;MACA;MACA,IAAI,CAACzJ,OAAO,CAACuJ,OAAO,CAAC,IAAI,EAAE,YAAY;QACrC,MAAMxL,QAAQ,GAAG,IAAI,CAAC8E,MAAM,GAAG;UAAE+G,GAAG,EAAE;YAAEvB,GAAG,EAAE,IAAI,CAACxF;UAAO;QAAE,CAAC,GAAG,CAAC,CAAC;QACjE,OAAOnE,KAAK,CAACO,IAAI,CAAClB,QAAQ,EAAE;UAC1BiH,MAAM,EAAE8E,eAAe,CAAC3J,kBAAkB,CAACE,UAAU;QACvD,CAAC,CAAC;MACJ,CAAC,EAAE,gCAAgC;QAACoJ,OAAO,EAAE;MAAI,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACAS,oBAAoBA,CAACC,IAAI,EAAE;IACzB,IAAI,CAAChK,kBAAkB,CAACC,YAAY,CAACkD,IAAI,CAAC8G,KAAK,CAC7C,IAAI,CAACjK,kBAAkB,CAACC,YAAY,EAAE+J,IAAI,CAACE,eAAe,CAAC;IAC7D,IAAI,CAAClK,kBAAkB,CAACE,UAAU,CAACiD,IAAI,CAAC8G,KAAK,CAC3C,IAAI,CAACjK,kBAAkB,CAACE,UAAU,EAAE8J,IAAI,CAACG,aAAa,CAAC;EAC3D;EAEA;EACA;EACA;EACA;EACAC,uBAAuBA,CAACvF,MAAM,EAAE;IAC9B,IAAI,CAAC1E,qBAAqB,CAACC,UAAU,GAAGyE,MAAM;EAChD;EAEA;EACA;EACA;;EAEA;EACA;EACAwF,eAAeA,CAACC,YAAY,EAAER,KAAK,EAAE;IACnC,MAAMS,IAAI,GAAG,IAAI,CAAC/J,YAAY,CAAC8J,YAAY,CAAC;IAC5C,OAAOC,IAAI,IAAIA,IAAI,CAACT,KAAK,CAAC;EAC5B;EAEAU,eAAeA,CAACF,YAAY,EAAER,KAAK,EAAExH,KAAK,EAAE;IAC1C,MAAMiI,IAAI,GAAG,IAAI,CAAC/J,YAAY,CAAC8J,YAAY,CAAC;;IAE5C;IACA;IACA,IAAI,CAACC,IAAI,EACP;IAEF,IAAIjI,KAAK,KAAKjD,SAAS,EACrB,OAAOkL,IAAI,CAACT,KAAK,CAAC,CAAC,KAEnBS,IAAI,CAACT,KAAK,CAAC,GAAGxH,KAAK;EACvB;EAEA;EACA;EACA;EACA;;EAEAgD,eAAeA,CAACzD,UAAU,EAAE;IAC1B,MAAM4I,IAAI,GAAGjP,MAAM,CAACkP,UAAU,CAAC,QAAQ,CAAC;IACxCD,IAAI,CAACzD,MAAM,CAACnF,UAAU,CAAC;IACvB,OAAO4I,IAAI,CAACE,MAAM,CAAC,QAAQ,CAAC;EAC9B;EAEA;EACAC,iBAAiBA,CAAC9C,YAAY,EAAE;IAC9B,MAAM;QAAErG;MAA6B,CAAC,GAAGqG,YAAY;MAAnC+C,kBAAkB,GAAA7P,wBAAA,CAAK8M,YAAY,EAAAgD,SAAA;IACrD,OAAAzP,aAAA,CAAAA,aAAA,KACKwP,kBAAkB;MACrB3D,WAAW,EAAE,IAAI,CAAC5B,eAAe,CAAC7D,KAAK;IAAC;EAE5C;EAEA;EACA;EACA;EACAsJ,uBAAuBA,CAACrI,MAAM,EAAEwE,WAAW,EAAE9I,KAAK,EAAE;IAClDA,KAAK,GAAGA,KAAK,GAAA/C,aAAA,KAAQ+C,KAAK,IAAK,CAAC,CAAC;IACjCA,KAAK,CAACqL,GAAG,GAAG/G,MAAM;IAClB,IAAI,CAACnE,KAAK,CAACyI,MAAM,CAAC5I,KAAK,EAAE;MACvB4M,SAAS,EAAE;QACT,6BAA6B,EAAE9D;MACjC;IACF,CAAC,CAAC;EACJ;EAEA;EACA/B,iBAAiBA,CAACzC,MAAM,EAAEoF,YAAY,EAAE1J,KAAK,EAAE;IAC7C,IAAI,CAAC2M,uBAAuB,CAC1BrI,MAAM,EACN,IAAI,CAACkI,iBAAiB,CAAC9C,YAAY,CAAC,EACpC1J,KACF,CAAC;EACH;EAEA6M,oBAAoBA,CAACvI,MAAM,EAAE;IAC3B,IAAI,CAACnE,KAAK,CAACyI,MAAM,CAACtE,MAAM,EAAE;MACxBwI,IAAI,EAAE;QACJ,6BAA6B,EAAE;MACjC;IACF,CAAC,CAAC;EACJ;EAEA;EACAC,eAAeA,CAACb,YAAY,EAAE;IAC5B,OAAO,IAAI,CAAC7J,2BAA2B,CAAC6J,YAAY,CAAC;EACvD;EAEA;EACA;EACA;EACAnB,0BAA0BA,CAACmB,YAAY,EAAE;IACvC,IAAIzO,MAAM,CAACiL,IAAI,CAAC,IAAI,CAACrG,2BAA2B,EAAE6J,YAAY,CAAC,EAAE;MAC/D,MAAMc,OAAO,GAAG,IAAI,CAAC3K,2BAA2B,CAAC6J,YAAY,CAAC;MAC9D,IAAI,OAAOc,OAAO,KAAK,QAAQ,EAAE;QAC/B;QACA;QACA;QACA;QACA,OAAO,IAAI,CAAC3K,2BAA2B,CAAC6J,YAAY,CAAC;MACvD,CAAC,MAAM;QACL,OAAO,IAAI,CAAC7J,2BAA2B,CAAC6J,YAAY,CAAC;QACrDc,OAAO,CAACC,IAAI,CAAC,CAAC;MAChB;IACF;EACF;EAEA9D,cAAcA,CAAC+C,YAAY,EAAE;IAC3B,OAAO,IAAI,CAACD,eAAe,CAACC,YAAY,EAAE,YAAY,CAAC;EACzD;EAEA;EACAjF,cAAcA,CAAC3C,MAAM,EAAEoB,UAAU,EAAEwH,QAAQ,EAAE;IAC3C,IAAI,CAACnC,0BAA0B,CAACrF,UAAU,CAACxF,EAAE,CAAC;IAC9C,IAAI,CAACkM,eAAe,CAAC1G,UAAU,CAACxF,EAAE,EAAE,YAAY,EAAEgN,QAAQ,CAAC;IAE3D,IAAIA,QAAQ,EAAE;MACZ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,eAAe,GAAG,EAAE,IAAI,CAAC7K,sBAAsB;MACrD,IAAI,CAACD,2BAA2B,CAACqD,UAAU,CAACxF,EAAE,CAAC,GAAGiN,eAAe;MACjE9P,MAAM,CAAC+P,KAAK,CAAC,MAAM;QACjB;QACA;QACA;QACA;QACA,IAAI,IAAI,CAAC/K,2BAA2B,CAACqD,UAAU,CAACxF,EAAE,CAAC,KAAKiN,eAAe,EAAE;UACvE;QACF;QAEA,IAAIE,iBAAiB;QACrB;QACA;QACA;QACA,MAAML,OAAO,GAAG,IAAI,CAAC7M,KAAK,CAACO,IAAI,CAAC;UAC9B2K,GAAG,EAAE/G,MAAM;UACX,yCAAyC,EAAE4I;QAC7C,CAAC,EAAE;UAAEzG,MAAM,EAAE;YAAE4E,GAAG,EAAE;UAAE;QAAE,CAAC,CAAC,CAACiC,cAAc,CAAC;UACxCC,KAAK,EAAEA,CAAA,KAAM;YACXF,iBAAiB,GAAG,IAAI;UAC1B,CAAC;UACDG,OAAO,EAAE9H,UAAU,CAAC+H;UACpB;UACA;UACA;QACF,CAAC,EAAE;UAAEC,oBAAoB,EAAE;QAAK,CAAC,CAAC;;QAElC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,IAAI,CAACrL,2BAA2B,CAACqD,UAAU,CAACxF,EAAE,CAAC,KAAKiN,eAAe,EAAE;UACvEH,OAAO,CAACC,IAAI,CAAC,CAAC;UACd;QACF;QAEA,IAAI,CAAC5K,2BAA2B,CAACqD,UAAU,CAACxF,EAAE,CAAC,GAAG8M,OAAO;QAEzD,IAAI,CAAEK,iBAAiB,EAAE;UACvB;UACA;UACA;UACA;UACA;UACA3H,UAAU,CAAC+H,KAAK,CAAC,CAAC;QACpB;MACF,CAAC,CAAC;IACJ;EACF;EAEA;EACA;EACA3G,0BAA0BA,CAAA,EAAG;IAC3B,OAAO;MACLzD,KAAK,EAAEsK,MAAM,CAACjD,MAAM,CAAC,CAAC;MACtBpD,IAAI,EAAE,IAAIsG,IAAI,CAAD;IACf,CAAC;EACH;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACAC,0BAA0BA,CAACC,eAAe,EAAExJ,MAAM,EAAE;IAClD,MAAMyJ,eAAe,GAAG,IAAI,CAACC,gCAAgC,CAAC,CAAC;;IAE/D;IACA,IAAKF,eAAe,IAAI,CAACxJ,MAAM,IAAM,CAACwJ,eAAe,IAAIxJ,MAAO,EAAE;MAChE,MAAM,IAAI1F,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IAEAkP,eAAe,GAAGA,eAAe,IAC9B,IAAIF,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,GAAGG,eAAe,CAAE;IAE1C,MAAME,WAAW,GAAG;MAClBnO,GAAG,EAAE,CACH;QAAE,gCAAgC,EAAE;MAAO,CAAC,EAC5C;QAAE,gCAAgC,EAAE;UAACoO,OAAO,EAAE;QAAK;MAAC,CAAC;IAEzD,CAAC;IAEDC,mBAAmB,CAAC,IAAI,EAAEL,eAAe,EAAEG,WAAW,EAAE3J,MAAM,CAAC;EACjE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA8J,2BAA2BA,CAACN,eAAe,EAAExJ,MAAM,EAAE;IACnD,MAAMyJ,eAAe,GAAG,IAAI,CAACM,iCAAiC,CAAC,CAAC;;IAEhE;IACA,IAAKP,eAAe,IAAI,CAACxJ,MAAM,IAAM,CAACwJ,eAAe,IAAIxJ,MAAO,EAAE;MAChE,MAAM,IAAI1F,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IAEAkP,eAAe,GAAGA,eAAe,IAC9B,IAAIF,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,GAAGG,eAAe,CAAE;IAE1C,MAAME,WAAW,GAAG;MAClB,iCAAiC,EAAE;IACrC,CAAC;IAEDE,mBAAmB,CAAC,IAAI,EAAEL,eAAe,EAAEG,WAAW,EAAE3J,MAAM,CAAC;EACjE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACAgK,aAAaA,CAACR,eAAe,EAAExJ,MAAM,EAAE;IACrC,MAAMyJ,eAAe,GAAG,IAAI,CAACQ,mBAAmB,CAAC,CAAC;;IAElD;IACA,IAAKT,eAAe,IAAI,CAACxJ,MAAM,IAAM,CAACwJ,eAAe,IAAIxJ,MAAO,EAAE;MAChE,MAAM,IAAI1F,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IAEAkP,eAAe,GAAGA,eAAe,IAC9B,IAAIF,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,GAAGG,eAAe,CAAE;IAC1C,MAAMS,UAAU,GAAGlK,MAAM,GAAG;MAAC+G,GAAG,EAAE/G;IAAM,CAAC,GAAG,CAAC,CAAC;;IAG9C;IACA;IACA,IAAI,CAACnE,KAAK,CAACyI,MAAM,CAAA3L,aAAA,CAAAA,aAAA,KAAMuR,UAAU;MAC/B1O,GAAG,EAAE,CACH;QAAE,kCAAkC,EAAE;UAAE2O,GAAG,EAAEX;QAAgB;MAAE,CAAC,EAChE;QAAE,kCAAkC,EAAE;UAAEW,GAAG,EAAE,CAACX;QAAgB;MAAE,CAAC;IAClE,IACA;MACDjF,KAAK,EAAE;QACL,6BAA6B,EAAE;UAC7B/I,GAAG,EAAE,CACH;YAAEwH,IAAI,EAAE;cAAEmH,GAAG,EAAEX;YAAgB;UAAE,CAAC,EAClC;YAAExG,IAAI,EAAE;cAAEmH,GAAG,EAAE,CAACX;YAAgB;UAAE,CAAC;QAEvC;MACF;IACF,CAAC,EAAE;MAAEY,KAAK,EAAE;IAAK,CAAC,CAAC;IACnB;IACA;EACF;EAEA;EACAC,MAAMA,CAACrQ,OAAO,EAAE;IACd;IACA,MAAMsQ,WAAW,GAAGtR,cAAc,CAACK,SAAS,CAACgR,MAAM,CAAC9C,KAAK,CAAC,IAAI,EAAE7K,SAAS,CAAC;;IAE1E;IACA;IACA,IAAIvD,MAAM,CAACiL,IAAI,CAAC,IAAI,CAACtH,QAAQ,EAAE,uBAAuB,CAAC,IACrD,IAAI,CAACA,QAAQ,CAACyN,qBAAqB,KAAK,IAAI,IAC5C,IAAI,CAACC,mBAAmB,EAAE;MAC1BzR,MAAM,CAAC0R,aAAa,CAAC,IAAI,CAACD,mBAAmB,CAAC;MAC9C,IAAI,CAACA,mBAAmB,GAAG,IAAI;IACjC;IAEA,OAAOF,WAAW;EACpB;EAEA;EACAI,aAAaA,CAAC1Q,OAAO,EAAE2B,IAAI,EAAE;IAC3B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAA,IAAI,GAAAhD,aAAA;MACFgS,SAAS,EAAE,IAAIrB,IAAI,CAAC,CAAC;MACrBvC,GAAG,EAAEsC,MAAM,CAACzN,EAAE,CAAC;IAAC,GACbD,IAAI,CACR;IAED,IAAIA,IAAI,CAACsJ,QAAQ,EAAE;MACjB7L,MAAM,CAAC8D,IAAI,CAACvB,IAAI,CAACsJ,QAAQ,CAAC,CAAC3D,OAAO,CAACqE,OAAO,IACxCiF,wBAAwB,CAACjP,IAAI,CAACsJ,QAAQ,CAACU,OAAO,CAAC,EAAEhK,IAAI,CAACoL,GAAG,CAC3D,CAAC;IACH;IAEA,IAAI8D,QAAQ;IACZ,IAAI,IAAI,CAAChK,iBAAiB,EAAE;MAC1BgK,QAAQ,GAAG,IAAI,CAAChK,iBAAiB,CAAC7G,OAAO,EAAE2B,IAAI,CAAC;;MAEhD;MACA;MACA;MACA,IAAIkP,QAAQ,KAAK,mBAAmB,EAClCA,QAAQ,GAAGC,qBAAqB,CAAC9Q,OAAO,EAAE2B,IAAI,CAAC;IACnD,CAAC,MAAM;MACLkP,QAAQ,GAAGC,qBAAqB,CAAC9Q,OAAO,EAAE2B,IAAI,CAAC;IACjD;IAEA,IAAI,CAAC6C,qBAAqB,CAAC8C,OAAO,CAACyJ,IAAI,IAAI;MACzC,IAAI,CAAEA,IAAI,CAACF,QAAQ,CAAC,EAClB,MAAM,IAAI9R,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,wBAAwB,CAAC;IACzD,CAAC,CAAC;IAEF,IAAI0F,MAAM;IACV,IAAI;MACFA,MAAM,GAAG,IAAI,CAACnE,KAAK,CAACyK,MAAM,CAACuE,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAOnJ,CAAC,EAAE;MACV;MACA;MACA;MACA,IAAI,CAACA,CAAC,CAACsJ,MAAM,EAAE,MAAMtJ,CAAC;MACtB,IAAIA,CAAC,CAACsJ,MAAM,CAAClF,QAAQ,CAAC,gBAAgB,CAAC,EACrC,MAAM,IAAI/M,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,uBAAuB,CAAC;MACtD,IAAIoH,CAAC,CAACsJ,MAAM,CAAClF,QAAQ,CAAC,UAAU,CAAC,EAC/B,MAAM,IAAI/M,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,0BAA0B,CAAC;MACzD,MAAMoH,CAAC;IACT;IACA,OAAO1B,MAAM;EACf;EAEA;EACA;EACAiL,gBAAgBA,CAAC/O,KAAK,EAAE;IACtB,MAAMgP,MAAM,GAAG,IAAI,CAACpO,QAAQ,CAACqO,6BAA6B;IAE1D,OAAO,CAACD,MAAM,IACX,OAAOA,MAAM,KAAK,UAAU,IAAIA,MAAM,CAAChP,KAAK,CAAE,IAC9C,OAAOgP,MAAM,KAAK,QAAQ,IACxB,IAAI/P,MAAM,KAAAC,MAAA,CAAKrC,MAAM,CAACsC,aAAa,CAAC6P,MAAM,CAAC,QAAK,GAAG,CAAC,CAAEE,IAAI,CAAClP,KAAK,CAAE;EACzE;EAEA;EACA;EACA;;EAEAmP,yBAAyBA,CAACrL,MAAM,EAAEsL,cAAc,EAAE;IAChD,IAAIA,cAAc,EAAE;MAClB,IAAI,CAACzP,KAAK,CAACyI,MAAM,CAACtE,MAAM,EAAE;QACxBuL,MAAM,EAAE;UACN,yCAAyC,EAAE,CAAC;UAC5C,qCAAqC,EAAE;QACzC,CAAC;QACDC,QAAQ,EAAE;UACR,6BAA6B,EAAEF;QACjC;MACF,CAAC,CAAC;IACJ;EACF;EAEA3M,sCAAsCA,CAAA,EAAG;IACvC;IACA;IACA;IACA;IACA;IACA;IACA5F,MAAM,CAAC8N,OAAO,CAAC,MAAM;MACnB,IAAI,CAAChL,KAAK,CAACO,IAAI,CAAC;QACd,yCAAyC,EAAE;MAC7C,CAAC,EAAE;QAAC+F,MAAM,EAAE;UACR,qCAAqC,EAAE;QACzC;MAAC,CAAC,CAAC,CAACb,OAAO,CAAC3F,IAAI,IAAI;QACpB,IAAI,CAAC0P,yBAAyB,CAC5B1P,IAAI,CAACoL,GAAG,EACRpL,IAAI,CAACsJ,QAAQ,CAACC,MAAM,CAACuG,mBACvB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,qCAAqCA,CACnCC,WAAW,EACXC,WAAW,EACX5R,OAAO,EACP;IACAA,OAAO,GAAArB,aAAA,KAAQqB,OAAO,CAAE;IAExB,IAAI2R,WAAW,KAAK,UAAU,IAAIA,WAAW,KAAK,QAAQ,EAAE;MAC1D,MAAM,IAAIrR,KAAK,CACb,wEAAwE,GACtEqR,WAAW,CAAC;IAClB;IACA,IAAI,CAACxS,MAAM,CAACiL,IAAI,CAACwH,WAAW,EAAE,IAAI,CAAC,EAAE;MACnC,MAAM,IAAItR,KAAK,6BAAAc,MAAA,CACeuQ,WAAW,qBAAkB,CAAC;IAC9D;;IAEA;IACA,MAAMzQ,QAAQ,GAAG,CAAC,CAAC;IACnB,MAAM2Q,YAAY,eAAAzQ,MAAA,CAAeuQ,WAAW,QAAK;;IAEjD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIA,WAAW,KAAK,SAAS,IAAI,CAACG,KAAK,CAACF,WAAW,CAAChQ,EAAE,CAAC,EAAE;MACvDV,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;MACzBA,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC2Q,YAAY,CAAC,GAAGD,WAAW,CAAChQ,EAAE;MACjDV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC2Q,YAAY,CAAC,GAAGE,QAAQ,CAACH,WAAW,CAAChQ,EAAE,EAAE,EAAE,CAAC;IACjE,CAAC,MAAM;MACLV,QAAQ,CAAC2Q,YAAY,CAAC,GAAGD,WAAW,CAAChQ,EAAE;IACzC;IAEA,IAAID,IAAI,GAAG,IAAI,CAACE,KAAK,CAACC,OAAO,CAACZ,QAAQ,EAAE;MAACiH,MAAM,EAAE,IAAI,CAACrF,QAAQ,CAACsF;IAAoB,CAAC,CAAC;;IAErF;IACA;IACA,IAAI,CAACzG,IAAI,IAAI,IAAI,CAACuF,kCAAkC,EAAE;MACpDvF,IAAI,GAAG,IAAI,CAACuF,kCAAkC,CAAC;QAACyK,WAAW;QAAEC,WAAW;QAAE5R;MAAO,CAAC,CAAC;IACrF;;IAEA;IACA,IAAI,IAAI,CAAC2G,wBAAwB,IAAI,CAAC,IAAI,CAACA,wBAAwB,CAACgL,WAAW,EAAEC,WAAW,EAAEjQ,IAAI,CAAC,EAAE;MACnG,MAAM,IAAI5C,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,iBAAiB,CAAC;IAChD;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIgN,IAAI,GAAG3L,IAAI,GAAG,CAAC,CAAC,GAAG3B,OAAO;IAC9B,IAAI,IAAI,CAACgH,oBAAoB,EAAE;MAC7BsG,IAAI,GAAG,IAAI,CAACtG,oBAAoB,CAAChH,OAAO,EAAE2B,IAAI,CAAC;IACjD;IAEA,IAAIA,IAAI,EAAE;MACRiP,wBAAwB,CAACgB,WAAW,EAAEjQ,IAAI,CAACoL,GAAG,CAAC;MAE/C,IAAIiF,QAAQ,GAAG,CAAC,CAAC;MACjB5S,MAAM,CAAC8D,IAAI,CAAC0O,WAAW,CAAC,CAACtK,OAAO,CAAC3B,GAAG,IAClCqM,QAAQ,aAAA5Q,MAAA,CAAauQ,WAAW,OAAAvQ,MAAA,CAAIuE,GAAG,EAAG,GAAGiM,WAAW,CAACjM,GAAG,CAC9D,CAAC;;MAED;MACA;MACAqM,QAAQ,GAAArT,aAAA,CAAAA,aAAA,KAAQqT,QAAQ,GAAK1E,IAAI,CAAE;MACnC,IAAI,CAACzL,KAAK,CAACyI,MAAM,CAAC3I,IAAI,CAACoL,GAAG,EAAE;QAC1ByB,IAAI,EAAEwD;MACR,CAAC,CAAC;MAEF,OAAO;QACLzI,IAAI,EAAEoI,WAAW;QACjB3L,MAAM,EAAErE,IAAI,CAACoL;MACf,CAAC;IACH,CAAC,MAAM;MACL;MACApL,IAAI,GAAG;QAACsJ,QAAQ,EAAE,CAAC;MAAC,CAAC;MACrBtJ,IAAI,CAACsJ,QAAQ,CAAC0G,WAAW,CAAC,GAAGC,WAAW;MACxC,OAAO;QACLrI,IAAI,EAAEoI,WAAW;QACjB3L,MAAM,EAAE,IAAI,CAAC0K,aAAa,CAACpD,IAAI,EAAE3L,IAAI;MACvC,CAAC;IACH;EACF;EAEA;AACF;AACA;AACA;AACA;EACEsQ,sBAAsBA,CAAA,EAAG;IACvB,MAAMC,IAAI,GAAGC,cAAc,CAACC,UAAU,CAAC,IAAI,CAACC,wBAAwB,CAAC;IACrE,IAAI,CAACA,wBAAwB,GAAG,IAAI;IACpC,OAAOH,IAAI;EACb;EAEA;AACF;AACA;AACA;AACA;AACA;EACE7M,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACgN,wBAAwB,EAAE;MAClC,IAAI,CAACA,wBAAwB,GAAGF,cAAc,CAACG,OAAO,CAAC;QACrDtM,MAAM,EAAE,IAAI;QACZuM,aAAa,EAAE,IAAI;QACnBhJ,IAAI,EAAE,QAAQ;QACdU,IAAI,EAAEA,IAAI,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,gBAAgB,CAAC,CACrE6B,QAAQ,CAAC7B,IAAI,CAAC;QACjB2D,YAAY,EAAGA,YAAY,IAAK;MAClC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IACd;EACF;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE4E,uBAAuBA,CAACtQ,KAAK,EAAEP,IAAI,EAAE4D,GAAG,EAAEkN,MAAM,EAAa;IAAA,IAAXC,KAAK,GAAAhQ,SAAA,CAAA7C,MAAA,QAAA6C,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC,CAAC;IAC1D,MAAM1C,OAAO,GAAG;MACd2S,EAAE,EAAEzQ,KAAK;MACTwH,IAAI,EAAE,IAAI,CAACkJ,cAAc,CAACH,MAAM,CAAC,CAAC/I,IAAI,GAClC,IAAI,CAACkJ,cAAc,CAACH,MAAM,CAAC,CAAC/I,IAAI,CAAC/H,IAAI,CAAC,GACtC,IAAI,CAACiR,cAAc,CAAClJ,IAAI;MAC5BmJ,OAAO,EAAE,IAAI,CAACD,cAAc,CAACH,MAAM,CAAC,CAACI,OAAO,CAAClR,IAAI,EAAE4D,GAAG,EAAEmN,KAAK;IAC/D,CAAC;IAED,IAAI,OAAO,IAAI,CAACE,cAAc,CAACH,MAAM,CAAC,CAACK,IAAI,KAAK,UAAU,EAAE;MAC1D9S,OAAO,CAAC8S,IAAI,GAAG,IAAI,CAACF,cAAc,CAACH,MAAM,CAAC,CAACK,IAAI,CAACnR,IAAI,EAAE4D,GAAG,EAAEmN,KAAK,CAAC;IACnE;IAEA,IAAI,OAAO,IAAI,CAACE,cAAc,CAACH,MAAM,CAAC,CAACM,IAAI,KAAK,UAAU,EAAE;MAC1D/S,OAAO,CAAC+S,IAAI,GAAG,IAAI,CAACH,cAAc,CAACH,MAAM,CAAC,CAACM,IAAI,CAACpR,IAAI,EAAE4D,GAAG,EAAEmN,KAAK,CAAC;IACnE;IAEA,IAAI,OAAO,IAAI,CAACE,cAAc,CAACI,OAAO,KAAK,QAAQ,EAAE;MACnDhT,OAAO,CAACgT,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACI,OAAO;IAC/C;IAEA,OAAOhT,OAAO;EAChB;EAEAiT,kCAAkCA,CAChCzS,SAAS,EACT0S,WAAW,EACXlR,UAAU,EACVmR,SAAS,EACT;IACA;IACA;IACA,MAAMC,SAAS,GAAGhU,MAAM,CAACC,SAAS,CAACC,cAAc,CAAC8K,IAAI,CACpD,IAAI,CAACxF,iCAAiC,EACtC5C,UACF,CAAC;IAED,IAAIA,UAAU,IAAI,CAACoR,SAAS,EAAE;MAC5B,MAAMC,YAAY,GAAGtU,MAAM,CAAC8C,KAAK,CAC9BO,IAAI,CACH,IAAI,CAAC7B,qCAAqC,CAACC,SAAS,EAAEwB,UAAU,CAAC,EACjE;QACEmG,MAAM,EAAE;UAAE4E,GAAG,EAAE;QAAE,CAAC;QAClB;QACA1K,KAAK,EAAE;MACT,CACF,CAAC,CACAC,KAAK,CAAC,CAAC;MAEV,IACE+Q,YAAY,CAACxT,MAAM,GAAG,CAAC;MACvB;MACC,CAACsT,SAAS;MACT;MACA;MACAE,YAAY,CAACxT,MAAM,GAAG,CAAC,IAAIwT,YAAY,CAAC,CAAC,CAAC,CAACtG,GAAG,KAAKoG,SAAS,CAAC,EAC/D;QACA,IAAI,CAAC5Q,YAAY,IAAAnB,MAAA,CAAI8R,WAAW,qBAAkB,CAAC;MACrD;IACF;EACF;EAEAI,6BAA6BA,CAAAC,IAAA,EAAqC;IAAA,IAApC;MAAE5R,IAAI;MAAEO,KAAK;MAAED,QAAQ;MAAEjC;IAAQ,CAAC,GAAAuT,IAAA;IAC9D,MAAMC,OAAO,GAAA7U,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACRgD,IAAI,GACHM,QAAQ,GAAG;MAAEA;IAAS,CAAC,GAAG,CAAC,CAAC,GAC5BC,KAAK,GAAG;MAAE0B,MAAM,EAAE,CAAC;QAAE6P,OAAO,EAAEvR,KAAK;QAAEwR,QAAQ,EAAE;MAAM,CAAC;IAAE,CAAC,GAAG,CAAC,CAAC,CACnE;;IAED;IACA,IAAI,CAACT,kCAAkC,CAAC,UAAU,EAAE,UAAU,EAAEhR,QAAQ,CAAC;IACzE,IAAI,CAACgR,kCAAkC,CAAC,gBAAgB,EAAE,OAAO,EAAE/Q,KAAK,CAAC;IAEzE,MAAM8D,MAAM,GAAG,IAAI,CAAC0K,aAAa,CAAC1Q,OAAO,EAAEwT,OAAO,CAAC;IACnD;IACA;IACA,IAAI;MACF,IAAI,CAACP,kCAAkC,CAAC,UAAU,EAAE,UAAU,EAAEhR,QAAQ,EAAE+D,MAAM,CAAC;MACjF,IAAI,CAACiN,kCAAkC,CAAC,gBAAgB,EAAE,OAAO,EAAE/Q,KAAK,EAAE8D,MAAM,CAAC;IACnF,CAAC,CAAC,OAAO2N,EAAE,EAAE;MACX;MACA5U,MAAM,CAAC8C,KAAK,CAAC+R,MAAM,CAAC5N,MAAM,CAAC;MAC3B,MAAM2N,EAAE;IACV;IACA,OAAO3N,MAAM;EACf;AA0BF;AAEA;AACA;AACA;AACA,MAAMyB,0BAA0B,GAAGA,CAACL,UAAU,EAAEC,OAAO,KAAK;EAC1D,MAAMwM,aAAa,GAAGC,KAAK,CAACC,KAAK,CAAC1M,OAAO,CAAC;EAC1CwM,aAAa,CAACzM,UAAU,GAAGA,UAAU;EACrC,OAAOyM,aAAa;AACtB,CAAC;AAED,MAAM/J,cAAc,GAAGA,CAAOP,IAAI,EAAEK,EAAE,KAAAP,OAAA,CAAAC,UAAA,OAAK;EACzC,IAAIF,MAAM;EACV,IAAI;IACFA,MAAM,GAAAC,OAAA,CAAAQ,KAAA,CAASD,EAAE,CAAC,CAAC;EACrB,CAAC,CACD,OAAOlC,CAAC,EAAE;IACR0B,MAAM,GAAG;MAACvG,KAAK,EAAE6E;IAAC,CAAC;EACrB;EAEA,IAAI0B,MAAM,IAAI,CAACA,MAAM,CAACG,IAAI,IAAIA,IAAI,EAChCH,MAAM,CAACG,IAAI,GAAGA,IAAI;EAEpB,OAAOH,MAAM;AACf,CAAC;AAED,MAAMjF,yBAAyB,GAAGsG,QAAQ,IAAI;EAC5CA,QAAQ,CAACT,oBAAoB,CAAC,QAAQ,EAAE,UAAUhK,OAAO,EAAE;IACzD,OAAOgU,yBAAyB,CAAC5J,IAAI,CAAC,IAAI,EAAEK,QAAQ,EAAEzK,OAAO,CAAC;EAChE,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMgU,yBAAyB,GAAGA,CAACvJ,QAAQ,EAAEzK,OAAO,KAAK;EACvD,IAAI,CAACA,OAAO,CAACkL,MAAM,EACjB,OAAOvI,SAAS;EAElBhD,KAAK,CAACK,OAAO,CAACkL,MAAM,EAAEtL,MAAM,CAAC;EAE7B,MAAM4K,WAAW,GAAGC,QAAQ,CAAC7B,eAAe,CAAC5I,OAAO,CAACkL,MAAM,CAAC;;EAE5D;EACA;EACA;EACA,IAAIvJ,IAAI,GAAG8I,QAAQ,CAAC5I,KAAK,CAACC,OAAO,CAC/B;IAAC,yCAAyC,EAAE0I;EAAW,CAAC,EACxD;IAACrC,MAAM,EAAE;MAAC,+BAA+B,EAAE;IAAC;EAAC,CAAC,CAAC;EAEjD,IAAI,CAAExG,IAAI,EAAE;IACV;IACA;IACA;IACA;IACA;IACAA,IAAI,GAAG8I,QAAQ,CAAC5I,KAAK,CAACC,OAAO,CAAC;MAC1BN,GAAG,EAAE,CACH;QAAC,yCAAyC,EAAEgJ;MAAW,CAAC,EACxD;QAAC,mCAAmC,EAAExK,OAAO,CAACkL;MAAM,CAAC;IAEzD,CAAC;IACD;IACA;MAAC/C,MAAM,EAAE;QAAC,6BAA6B,EAAE;MAAC;IAAC,CAAC,CAAC;EACjD;EAEA,IAAI,CAAExG,IAAI,EACR,OAAO;IACLkB,KAAK,EAAE,IAAI9D,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,4DAA4D;EAC3F,CAAC;;EAEH;EACA;EACA;EACA,IAAI2T,qBAAqB;EACzB,IAAIlP,KAAK,GAAGpD,IAAI,CAACsJ,QAAQ,CAACC,MAAM,CAACC,WAAW,CAAC/I,IAAI,CAAC2C,KAAK,IACrDA,KAAK,CAACyF,WAAW,KAAKA,WACxB,CAAC;EACD,IAAIzF,KAAK,EAAE;IACTkP,qBAAqB,GAAG,KAAK;EAC/B,CAAC,MAAM;IACLlP,KAAK,GAAGpD,IAAI,CAACsJ,QAAQ,CAACC,MAAM,CAACC,WAAW,CAAC/I,IAAI,CAAC2C,KAAK,IACjDA,KAAK,CAACA,KAAK,KAAK/E,OAAO,CAACkL,MAC1B,CAAC;IACD+I,qBAAqB,GAAG,IAAI;EAC9B;EAEA,MAAMnL,YAAY,GAAG2B,QAAQ,CAAC1B,gBAAgB,CAAChE,KAAK,CAACiE,IAAI,CAAC;EAC1D,IAAI,IAAIsG,IAAI,CAAC,CAAC,IAAIxG,YAAY,EAC5B,OAAO;IACL9C,MAAM,EAAErE,IAAI,CAACoL,GAAG;IAChBlK,KAAK,EAAE,IAAI9D,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,gDAAgD;EAC/E,CAAC;;EAEH;EACA,IAAI2T,qBAAqB,EAAE;IACzB;IACA;IACA;IACA;IACA;IACAxJ,QAAQ,CAAC5I,KAAK,CAACyI,MAAM,CACnB;MACEyC,GAAG,EAAEpL,IAAI,CAACoL,GAAG;MACb,mCAAmC,EAAE/M,OAAO,CAACkL;IAC/C,CAAC,EACD;MAACoD,SAAS,EAAE;QACR,6BAA6B,EAAE;UAC7B,aAAa,EAAE9D,WAAW;UAC1B,MAAM,EAAEzF,KAAK,CAACiE;QAChB;MACF;IAAC,CACL,CAAC;;IAED;IACA;IACA;IACAyB,QAAQ,CAAC5I,KAAK,CAACyI,MAAM,CAAC3I,IAAI,CAACoL,GAAG,EAAE;MAC9BxC,KAAK,EAAE;QACL,6BAA6B,EAAE;UAAE,OAAO,EAAEvK,OAAO,CAACkL;QAAO;MAC3D;IACF,CAAC,CAAC;EACJ;EAEA,OAAO;IACLlF,MAAM,EAAErE,IAAI,CAACoL,GAAG;IAChBxE,iBAAiB,EAAE;MACjBxD,KAAK,EAAE/E,OAAO,CAACkL,MAAM;MACrBlC,IAAI,EAAEjE,KAAK,CAACiE;IACd;EACF,CAAC;AACH,CAAC;AAED,MAAM6G,mBAAmB,GAAGA,CAC1BpF,QAAQ,EACR+E,eAAe,EACfG,WAAW,EACX3J,MAAM,KACH;EACH;EACA,IAAIkO,QAAQ,GAAG,KAAK;EACpB,MAAMhE,UAAU,GAAGlK,MAAM,GAAG;IAAC+G,GAAG,EAAE/G;EAAM,CAAC,GAAG,CAAC,CAAC;EAC9C;EACA,IAAG2J,WAAW,CAAC,iCAAiC,CAAC,EAAE;IACjDuE,QAAQ,GAAG,IAAI;EACjB;EACA,IAAIC,YAAY,GAAG;IACjB3S,GAAG,EAAE,CACH;MAAE,8BAA8B,EAAE;QAAE2O,GAAG,EAAEX;MAAgB;IAAE,CAAC,EAC5D;MAAE,8BAA8B,EAAE;QAAEW,GAAG,EAAE,CAACX;MAAgB;IAAE,CAAC;EAEjE,CAAC;EACD,IAAG0E,QAAQ,EAAE;IACXC,YAAY,GAAG;MACb3S,GAAG,EAAE,CACH;QAAE,+BAA+B,EAAE;UAAE2O,GAAG,EAAEX;QAAgB;MAAE,CAAC,EAC7D;QAAE,+BAA+B,EAAE;UAAEW,GAAG,EAAE,CAACX;QAAgB;MAAE,CAAC;IAElE,CAAC;EACH;EACA,MAAM4E,YAAY,GAAG;IAAE7S,IAAI,EAAE,CAACoO,WAAW,EAAEwE,YAAY;EAAE,CAAC;EAC1D,IAAGD,QAAQ,EAAE;IACXzJ,QAAQ,CAAC5I,KAAK,CAACyI,MAAM,CAAA3L,aAAA,CAAAA,aAAA,KAAKuR,UAAU,GAAKkE,YAAY,GAAG;MACtD7C,MAAM,EAAE;QACN,0BAA0B,EAAE;MAC9B;IACF,CAAC,EAAE;MAAEnB,KAAK,EAAE;IAAK,CAAC,CAAC;EACrB,CAAC,MAAM;IACL3F,QAAQ,CAAC5I,KAAK,CAACyI,MAAM,CAAA3L,aAAA,CAAAA,aAAA,KAAKuR,UAAU,GAAKkE,YAAY,GAAG;MACtD7C,MAAM,EAAE;QACN,yBAAyB,EAAE;MAC7B;IACF,CAAC,EAAE;MAAEnB,KAAK,EAAE;IAAK,CAAC,CAAC;EACrB;AAEF,CAAC;AAED,MAAMhM,uBAAuB,GAAGqG,QAAQ,IAAI;EAC1CA,QAAQ,CAAC+F,mBAAmB,GAAGzR,MAAM,CAACsV,WAAW,CAAC,MAAM;IACtD5J,QAAQ,CAACuF,aAAa,CAAC,CAAC;IACxBvF,QAAQ,CAAC8E,0BAA0B,CAAC,CAAC;IACrC9E,QAAQ,CAACqF,2BAA2B,CAAC,CAAC;EACxC,CAAC,EAAE7Q,yBAAyB,CAAC;AAC/B,CAAC;AAED,MAAMiN,eAAe,IAAAoI,oBAAA,GAAGvI,OAAO,CAAC,kBAAkB,CAAC,cAAAuI,oBAAA,uBAA3BA,oBAAA,CAA6BpI,eAAe;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0E,wBAAwB,GAAGA,CAACgB,WAAW,EAAE5L,MAAM,KAAK;EACxD5G,MAAM,CAAC8D,IAAI,CAAC0O,WAAW,CAAC,CAACtK,OAAO,CAAC3B,GAAG,IAAI;IACtC,IAAIC,KAAK,GAAGgM,WAAW,CAACjM,GAAG,CAAC;IAC5B,IAAIuG,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEqI,QAAQ,CAAC3O,KAAK,CAAC,EAClCA,KAAK,GAAGsG,eAAe,CAACG,IAAI,CAACH,eAAe,CAACsI,IAAI,CAAC5O,KAAK,CAAC,EAAEI,MAAM,CAAC;IACnE4L,WAAW,CAACjM,GAAG,CAAC,GAAGC,KAAK;EAC1B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA,MAAMkL,qBAAqB,GAAGA,CAAC9Q,OAAO,EAAE2B,IAAI,KAAK;EAC/C,IAAI3B,OAAO,CAAC2D,OAAO,EACjBhC,IAAI,CAACgC,OAAO,GAAG3D,OAAO,CAAC2D,OAAO;EAChC,OAAOhC,IAAI;AACb,CAAC;;AAED;AACA,SAAS8C,0BAA0BA,CAAC9C,IAAI,EAAE;EACxC,MAAMuP,MAAM,GAAG,IAAI,CAACpO,QAAQ,CAACqO,6BAA6B;EAC1D,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAIuD,WAAW,GAAG,KAAK;EACvB,IAAI9S,IAAI,CAACiC,MAAM,IAAIjC,IAAI,CAACiC,MAAM,CAAC/D,MAAM,GAAG,CAAC,EAAE;IACzC4U,WAAW,GAAG9S,IAAI,CAACiC,MAAM,CAACsJ,MAAM,CAC9B,CAACC,IAAI,EAAEjL,KAAK,KAAKiL,IAAI,IAAI,IAAI,CAAC8D,gBAAgB,CAAC/O,KAAK,CAACuR,OAAO,CAAC,EAAE,KACjE,CAAC;EACH,CAAC,MAAM,IAAI9R,IAAI,CAACsJ,QAAQ,IAAI7L,MAAM,CAACsV,MAAM,CAAC/S,IAAI,CAACsJ,QAAQ,CAAC,CAACpL,MAAM,GAAG,CAAC,EAAE;IACnE;IACA4U,WAAW,GAAGrV,MAAM,CAACsV,MAAM,CAAC/S,IAAI,CAACsJ,QAAQ,CAAC,CAACiC,MAAM,CAC/C,CAACC,IAAI,EAAExB,OAAO,KAAKA,OAAO,CAACzJ,KAAK,IAAI,IAAI,CAAC+O,gBAAgB,CAACtF,OAAO,CAACzJ,KAAK,CAAC,EACxE,KACF,CAAC;EACH;EAEA,IAAIuS,WAAW,EAAE;IACf,OAAO,IAAI;EACb;EAEA,IAAI,OAAOvD,MAAM,KAAK,QAAQ,EAAE;IAC9B,MAAM,IAAInS,MAAM,CAACuB,KAAK,CAAC,GAAG,MAAAc,MAAA,CAAM8P,MAAM,oBAAiB,CAAC;EAC1D,CAAC,MAAM;IACL,MAAM,IAAInS,MAAM,CAACuB,KAAK,CAAC,GAAG,EAAE,mCAAmC,CAAC;EAClE;AACF;AAEA,MAAM4D,oBAAoB,GAAGrC,KAAK,IAAI;EACpC;EACA;EACA;EACAA,KAAK,CAAC8S,KAAK,CAAC;IACV;IACA;IACArK,MAAM,EAAEA,CAACtE,MAAM,EAAErE,IAAI,EAAEwG,MAAM,EAAEyM,QAAQ,KAAK;MAC1C;MACA,IAAIjT,IAAI,CAACoL,GAAG,KAAK/G,MAAM,EAAE;QACvB,OAAO,KAAK;MACd;;MAEA;MACA;MACA;MACA,IAAImC,MAAM,CAACtI,MAAM,KAAK,CAAC,IAAIsI,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;QAClD,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb,CAAC;IACD7F,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;EACjB,CAAC,CAAC;;EAEF;EACAT,KAAK,CAACgT,gBAAgB,CAAC,UAAU,EAAE;IAAEC,MAAM,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EAClElT,KAAK,CAACgT,gBAAgB,CAAC,gBAAgB,EAAE;IAAEC,MAAM,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EACxElT,KAAK,CAACgT,gBAAgB,CAAC,yCAAyC,EAC9D;IAAEC,MAAM,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EACjClT,KAAK,CAACgT,gBAAgB,CAAC,mCAAmC,EACxD;IAAEC,MAAM,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EACjC;EACA;EACAlT,KAAK,CAACgT,gBAAgB,CAAC,yCAAyC,EAC9D;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;EACnB;EACAlT,KAAK,CAACgT,gBAAgB,CAAC,kCAAkC,EAAE;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;EAC5E;EACAlT,KAAK,CAACgT,gBAAgB,CAAC,8BAA8B,EAAE;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;EACxElT,KAAK,CAACgT,gBAAgB,CAAC,+BAA+B,EAAE;IAAEE,MAAM,EAAE;EAAK,CAAC,CAAC;AAC3E,CAAC;;AAGD;AACA,MAAMhU,iCAAiC,GAAGN,MAAM,IAAI;EAClD,IAAIuU,YAAY,GAAG,CAAC,EAAE,CAAC;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxU,MAAM,CAACZ,MAAM,EAAEoV,CAAC,EAAE,EAAE;IACtC,MAAMC,EAAE,GAAGzU,MAAM,CAAC0U,MAAM,CAACF,CAAC,CAAC;IAC3BD,YAAY,GAAG,EAAE,CAAC5T,MAAM,CAAC,GAAI4T,YAAY,CAAChU,GAAG,CAACN,MAAM,IAAI;MACtD,MAAM0U,aAAa,GAAGF,EAAE,CAACG,WAAW,CAAC,CAAC;MACtC,MAAMC,aAAa,GAAGJ,EAAE,CAACK,WAAW,CAAC,CAAC;MACtC;MACA,IAAIH,aAAa,KAAKE,aAAa,EAAE;QACnC,OAAO,CAAC5U,MAAM,GAAGwU,EAAE,CAAC;MACtB,CAAC,MAAM;QACL,OAAO,CAACxU,MAAM,GAAG0U,aAAa,EAAE1U,MAAM,GAAG4U,aAAa,CAAC;MACzD;IACF,CAAC,CAAE,CAAC;EACN;EACA,OAAON,YAAY;AACrB,CAAC"},"sourceType":"module","externalDependencies":{},"hash":"d0449c667cd999e8460154e7c06c987d377f5251"}
